### YamlMime:ManagedReference
items:
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  commentId: T:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  id: DifferentRegions
  parent: TMG.GTAModel.Modes.FeasibilityCalculations
  children:
  - TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Exceptions
  - TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Load
  - TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Name
  - TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProduceResult(Datastructure.Pair{TMG.IZone,TMG.IZone})
  - TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Progress
  - TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProgressColour
  - TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.RuntimeValidation(System.String@)
  - TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Unload
  langs:
  - csharp
  - vb
  name: DifferentRegions
  nameWithType: DifferentRegions
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  type: Class
  source:
    remote:
      path: Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: DifferentRegions
    path: ../../XTMF/Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
    startLine: 26
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Modes.FeasibilityCalculations
  syntax:
    content: 'public class DifferentRegions : ICalculation<Pair<IZone, IZone>, bool>, IModule'
    content.vb: >-
      Public Class DifferentRegions
          Implements ICalculation(Of Pair(Of IZone, IZone), Boolean), IModule
  inheritance:
  - System.Object
  implements:
  - TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}
  - XTMF.IModule
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Exceptions
  commentId: F:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Exceptions
  id: Exceptions
  parent: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  langs:
  - csharp
  - vb
  name: Exceptions
  nameWithType: DifferentRegions.Exceptions
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Exceptions
  type: Field
  source:
    remote:
      path: Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Exceptions
    path: ../../XTMF/Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
    startLine: 32
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Modes.FeasibilityCalculations
  syntax:
    content: >-
      [RunParameter("Excepted Regions", "1", typeof(NumberList), "The regions to excuse from this feasibility calculation.")]

      public NumberList Exceptions
    return:
      type: TMG.GTAModel.DataUtility.NumberList
    content.vb: >-
      <RunParameter("Excepted Regions", "1", GetType(NumberList), "The regions to excuse from this feasibility calculation.")>

      Public Exceptions As NumberList
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.String,System.Type,System.String)
    arguments:
    - type: System.String
      value: Excepted Regions
    - type: System.String
      value: "1"
    - type: System.Type
      value: TMG.GTAModel.DataUtility.NumberList
    - type: System.String
      value: The regions to excuse from this feasibility calculation.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Load
  commentId: M:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Load
  id: Load
  parent: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  langs:
  - csharp
  - vb
  name: Load()
  nameWithType: DifferentRegions.Load()
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Load()
  type: Method
  source:
    remote:
      path: Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Load
    path: ../../XTMF/Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
    startLine: 34
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Modes.FeasibilityCalculations
  syntax:
    content: public void Load()
    content.vb: Public Sub Load
  overload: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Load*
  implements:
  - TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}.Load
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProduceResult(Datastructure.Pair{TMG.IZone,TMG.IZone})
  commentId: M:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProduceResult(Datastructure.Pair{TMG.IZone,TMG.IZone})
  id: ProduceResult(Datastructure.Pair{TMG.IZone,TMG.IZone})
  parent: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  langs:
  - csharp
  - vb
  name: ProduceResult(Pair<IZone, IZone>)
  nameWithType: DifferentRegions.ProduceResult(Pair<IZone, IZone>)
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProduceResult(Datastructure.Pair<TMG.IZone, TMG.IZone>)
  type: Method
  source:
    remote:
      path: Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ProduceResult
    path: ../../XTMF/Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
    startLine: 39
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Modes.FeasibilityCalculations
  syntax:
    content: public bool ProduceResult(Pair<IZone, IZone> data)
    parameters:
    - id: data
      type: Datastructure.Pair{TMG.IZone,TMG.IZone}
    return:
      type: System.Boolean
    content.vb: Public Function ProduceResult(data As Pair(Of IZone, IZone)) As Boolean
  overload: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProduceResult*
  implements:
  - TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}.ProduceResult(Datastructure.Pair{TMG.IZone,TMG.IZone})
  nameWithType.vb: DifferentRegions.ProduceResult(Pair(Of IZone, IZone))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProduceResult(Datastructure.Pair(Of TMG.IZone, TMG.IZone))
  name.vb: ProduceResult(Pair(Of IZone, IZone))
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Unload
  commentId: M:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Unload
  id: Unload
  parent: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  langs:
  - csharp
  - vb
  name: Unload()
  nameWithType: DifferentRegions.Unload()
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Unload()
  type: Method
  source:
    remote:
      path: Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Unload
    path: ../../XTMF/Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
    startLine: 50
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Modes.FeasibilityCalculations
  syntax:
    content: public void Unload()
    content.vb: Public Sub Unload
  overload: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Unload*
  implements:
  - TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}.Unload
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Name
  commentId: P:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Name
  id: Name
  parent: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DifferentRegions.Name
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Name
  type: Property
  source:
    remote:
      path: Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Name
    path: ../../XTMF/Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
    startLine: 55
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Modes.FeasibilityCalculations
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Name*
  implements:
  - XTMF.IModule.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Progress
  commentId: P:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Progress
  id: Progress
  parent: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: DifferentRegions.Progress
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Progress
  type: Property
  source:
    remote:
      path: Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Progress
    path: ../../XTMF/Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
    startLine: 57
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Modes.FeasibilityCalculations
  syntax:
    content: public float Progress { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Progress As Single
  overload: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Progress*
  implements:
  - XTMF.IModule.Progress
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProgressColour
  commentId: P:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProgressColour
  id: ProgressColour
  parent: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  langs:
  - csharp
  - vb
  name: ProgressColour
  nameWithType: DifferentRegions.ProgressColour
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProgressColour
  type: Property
  source:
    remote:
      path: Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ProgressColour
    path: ../../XTMF/Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
    startLine: 59
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Modes.FeasibilityCalculations
  syntax:
    content: public Tuple<byte, byte, byte> ProgressColour { get; }
    parameters: []
    return:
      type: System.Tuple{System.Byte,System.Byte,System.Byte}
    content.vb: Public ReadOnly Property ProgressColour As Tuple(Of Byte, Byte, Byte)
  overload: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProgressColour*
  implements:
  - XTMF.IModule.ProgressColour
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.RuntimeValidation(System.String@)
  commentId: M:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.RuntimeValidation(System.String@)
  id: RuntimeValidation(System.String@)
  parent: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions
  langs:
  - csharp
  - vb
  name: RuntimeValidation(ref String)
  nameWithType: DifferentRegions.RuntimeValidation(ref String)
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.RuntimeValidation(ref System.String)
  type: Method
  source:
    remote:
      path: Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RuntimeValidation
    path: ../../XTMF/Code/GTAModel/Modes/FeasibilityCalculations/DifferentRegions.cs
    startLine: 61
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Modes.FeasibilityCalculations
  syntax:
    content: public bool RuntimeValidation(ref string error)
    parameters:
    - id: error
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function RuntimeValidation(ByRef error As String) As Boolean
  overload: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.RuntimeValidation*
  implements:
  - XTMF.IModule.RuntimeValidation(System.String@)
  nameWithType.vb: DifferentRegions.RuntimeValidation(ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.RuntimeValidation(ByRef System.String)
  name.vb: RuntimeValidation(ByRef String)
references:
- uid: TMG.GTAModel.Modes.FeasibilityCalculations
  commentId: N:TMG.GTAModel.Modes.FeasibilityCalculations
  name: TMG.GTAModel.Modes.FeasibilityCalculations
  nameWithType: TMG.GTAModel.Modes.FeasibilityCalculations
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}
  commentId: T:TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}
  parent: TMG
  definition: TMG.ICalculation`2
  name: ICalculation<Pair<IZone, IZone>, Boolean>
  nameWithType: ICalculation<Pair<IZone, IZone>, Boolean>
  fullName: TMG.ICalculation<Datastructure.Pair<TMG.IZone, TMG.IZone>, System.Boolean>
  nameWithType.vb: ICalculation(Of Pair(Of IZone, IZone), Boolean)
  fullName.vb: TMG.ICalculation(Of Datastructure.Pair(Of TMG.IZone, TMG.IZone), System.Boolean)
  name.vb: ICalculation(Of Pair(Of IZone, IZone), Boolean)
  spec.csharp:
  - uid: TMG.ICalculation`2
    name: ICalculation
    nameWithType: ICalculation
    fullName: TMG.ICalculation
  - name: <
    nameWithType: <
    fullName: <
  - uid: Datastructure.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Datastructure.Pair
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TMG.ICalculation`2
    name: ICalculation
    nameWithType: ICalculation
    fullName: TMG.ICalculation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Datastructure.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Datastructure.Pair
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule
  commentId: T:XTMF.IModule
  parent: XTMF
  name: IModule
  nameWithType: IModule
  fullName: XTMF.IModule
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  name: EnsureExactlyOne(IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TMG.ICalculation`2
  commentId: T:TMG.ICalculation`2
  name: ICalculation<D, O>
  nameWithType: ICalculation<D, O>
  fullName: TMG.ICalculation<D, O>
  nameWithType.vb: ICalculation(Of D, O)
  fullName.vb: TMG.ICalculation(Of D, O)
  name.vb: ICalculation(Of D, O)
  spec.csharp:
  - uid: TMG.ICalculation`2
    name: ICalculation
    nameWithType: ICalculation
    fullName: TMG.ICalculation
  - name: <
    nameWithType: <
    fullName: <
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: O
    nameWithType: O
    fullName: O
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TMG.ICalculation`2
    name: ICalculation
    nameWithType: ICalculation
    fullName: TMG.ICalculation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: D
    nameWithType: D
    fullName: D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: O
    nameWithType: O
    fullName: O
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG
  commentId: N:TMG
  name: TMG
  nameWithType: TMG
  fullName: TMG
- uid: XTMF
  commentId: N:XTMF
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper
  commentId: T:TMG.Functions.ModuleHelper
  parent: TMG.Functions
  name: ModuleHelper
  nameWithType: ModuleHelper
  fullName: TMG.Functions.ModuleHelper
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  isExternal: true
  name: EnsureExactlyOne(IModule, IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions
  commentId: N:TMG.Functions
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: TMG.GTAModel.DataUtility.NumberList
  commentId: T:TMG.GTAModel.DataUtility.NumberList
  parent: TMG.GTAModel.DataUtility
  name: NumberList
  nameWithType: NumberList
  fullName: TMG.GTAModel.DataUtility.NumberList
- uid: TMG.GTAModel.DataUtility
  commentId: N:TMG.GTAModel.DataUtility
  name: TMG.GTAModel.DataUtility
  nameWithType: TMG.GTAModel.DataUtility
  fullName: TMG.GTAModel.DataUtility
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Load*
  commentId: Overload:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Load
  name: Load
  nameWithType: DifferentRegions.Load
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Load
- uid: TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}.Load
  commentId: M:TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}.Load
  parent: TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}
  definition: TMG.ICalculation`2.Load
  name: Load()
  nameWithType: ICalculation<Pair<IZone, IZone>, Boolean>.Load()
  fullName: TMG.ICalculation<Datastructure.Pair<TMG.IZone, TMG.IZone>, System.Boolean>.Load()
  nameWithType.vb: ICalculation(Of Pair(Of IZone, IZone), Boolean).Load()
  fullName.vb: TMG.ICalculation(Of Datastructure.Pair(Of TMG.IZone, TMG.IZone), System.Boolean).Load()
  spec.csharp:
  - uid: TMG.ICalculation`2.Load
    name: Load
    nameWithType: ICalculation<Pair<IZone, IZone>, Boolean>.Load
    fullName: TMG.ICalculation<Datastructure.Pair<TMG.IZone, TMG.IZone>, System.Boolean>.Load
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.ICalculation`2.Load
    name: Load
    nameWithType: ICalculation(Of Pair(Of IZone, IZone), Boolean).Load
    fullName: TMG.ICalculation(Of Datastructure.Pair(Of TMG.IZone, TMG.IZone), System.Boolean).Load
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.ICalculation`2.Load
  commentId: M:TMG.ICalculation`2.Load
  name: Load()
  nameWithType: ICalculation<D, O>.Load()
  fullName: TMG.ICalculation<D, O>.Load()
  nameWithType.vb: ICalculation(Of D, O).Load()
  fullName.vb: TMG.ICalculation(Of D, O).Load()
  spec.csharp:
  - uid: TMG.ICalculation`2.Load
    name: Load
    nameWithType: ICalculation<D, O>.Load
    fullName: TMG.ICalculation<D, O>.Load
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.ICalculation`2.Load
    name: Load
    nameWithType: ICalculation(Of D, O).Load
    fullName: TMG.ICalculation(Of D, O).Load
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProduceResult*
  commentId: Overload:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProduceResult
  name: ProduceResult
  nameWithType: DifferentRegions.ProduceResult
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProduceResult
- uid: TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}.ProduceResult(Datastructure.Pair{TMG.IZone,TMG.IZone})
  commentId: M:TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}.ProduceResult(Datastructure.Pair{TMG.IZone,TMG.IZone})
  parent: TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}
  definition: TMG.ICalculation`2.ProduceResult(`0)
  name: ProduceResult(Pair<IZone, IZone>)
  nameWithType: ICalculation<Pair<IZone, IZone>, Boolean>.ProduceResult(Pair<IZone, IZone>)
  fullName: TMG.ICalculation<Datastructure.Pair<TMG.IZone, TMG.IZone>, System.Boolean>.ProduceResult(Datastructure.Pair<TMG.IZone, TMG.IZone>)
  nameWithType.vb: ICalculation(Of Pair(Of IZone, IZone), Boolean).ProduceResult(Pair(Of IZone, IZone))
  fullName.vb: TMG.ICalculation(Of Datastructure.Pair(Of TMG.IZone, TMG.IZone), System.Boolean).ProduceResult(Datastructure.Pair(Of TMG.IZone, TMG.IZone))
  name.vb: ProduceResult(Pair(Of IZone, IZone))
  spec.csharp:
  - uid: TMG.ICalculation`2.ProduceResult(`0)
    name: ProduceResult
    nameWithType: ICalculation<Pair<IZone, IZone>, Boolean>.ProduceResult
    fullName: TMG.ICalculation<Datastructure.Pair<TMG.IZone, TMG.IZone>, System.Boolean>.ProduceResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: Datastructure.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Datastructure.Pair
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.ICalculation`2.ProduceResult(`0)
    name: ProduceResult
    nameWithType: ICalculation(Of Pair(Of IZone, IZone), Boolean).ProduceResult
    fullName: TMG.ICalculation(Of Datastructure.Pair(Of TMG.IZone, TMG.IZone), System.Boolean).ProduceResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: Datastructure.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Datastructure.Pair
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure.Pair{TMG.IZone,TMG.IZone}
  commentId: T:Datastructure.Pair{TMG.IZone,TMG.IZone}
  parent: Datastructure
  definition: Datastructure.Pair`2
  name: Pair<IZone, IZone>
  nameWithType: Pair<IZone, IZone>
  fullName: Datastructure.Pair<TMG.IZone, TMG.IZone>
  nameWithType.vb: Pair(Of IZone, IZone)
  fullName.vb: Datastructure.Pair(Of TMG.IZone, TMG.IZone)
  name.vb: Pair(Of IZone, IZone)
  spec.csharp:
  - uid: Datastructure.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Datastructure.Pair
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Datastructure.Pair
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TMG.ICalculation`2.ProduceResult(`0)
  commentId: M:TMG.ICalculation`2.ProduceResult(`0)
  name: ProduceResult(D)
  nameWithType: ICalculation<D, O>.ProduceResult(D)
  fullName: TMG.ICalculation<D, O>.ProduceResult(D)
  nameWithType.vb: ICalculation(Of D, O).ProduceResult(D)
  fullName.vb: TMG.ICalculation(Of D, O).ProduceResult(D)
  spec.csharp:
  - uid: TMG.ICalculation`2.ProduceResult(`0)
    name: ProduceResult
    nameWithType: ICalculation<D, O>.ProduceResult
    fullName: TMG.ICalculation<D, O>.ProduceResult
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.ICalculation`2.ProduceResult(`0)
    name: ProduceResult
    nameWithType: ICalculation(Of D, O).ProduceResult
    fullName: TMG.ICalculation(Of D, O).ProduceResult
  - name: (
    nameWithType: (
    fullName: (
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure.Pair`2
  commentId: T:Datastructure.Pair`2
  name: Pair<TF, TS>
  nameWithType: Pair<TF, TS>
  fullName: Datastructure.Pair<TF, TS>
  nameWithType.vb: Pair(Of TF, TS)
  fullName.vb: Datastructure.Pair(Of TF, TS)
  name.vb: Pair(Of TF, TS)
  spec.csharp:
  - uid: Datastructure.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Datastructure.Pair
  - name: <
    nameWithType: <
    fullName: <
  - name: TF
    nameWithType: TF
    fullName: TF
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TS
    nameWithType: TS
    fullName: TS
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Datastructure.Pair
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TF
    nameWithType: TF
    fullName: TF
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TS
    nameWithType: TS
    fullName: TS
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure
  commentId: N:Datastructure
  name: Datastructure
  nameWithType: Datastructure
  fullName: Datastructure
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Unload*
  commentId: Overload:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Unload
  name: Unload
  nameWithType: DifferentRegions.Unload
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Unload
- uid: TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}.Unload
  commentId: M:TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}.Unload
  parent: TMG.ICalculation{Datastructure.Pair{TMG.IZone,TMG.IZone},System.Boolean}
  definition: TMG.ICalculation`2.Unload
  name: Unload()
  nameWithType: ICalculation<Pair<IZone, IZone>, Boolean>.Unload()
  fullName: TMG.ICalculation<Datastructure.Pair<TMG.IZone, TMG.IZone>, System.Boolean>.Unload()
  nameWithType.vb: ICalculation(Of Pair(Of IZone, IZone), Boolean).Unload()
  fullName.vb: TMG.ICalculation(Of Datastructure.Pair(Of TMG.IZone, TMG.IZone), System.Boolean).Unload()
  spec.csharp:
  - uid: TMG.ICalculation`2.Unload
    name: Unload
    nameWithType: ICalculation<Pair<IZone, IZone>, Boolean>.Unload
    fullName: TMG.ICalculation<Datastructure.Pair<TMG.IZone, TMG.IZone>, System.Boolean>.Unload
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.ICalculation`2.Unload
    name: Unload
    nameWithType: ICalculation(Of Pair(Of IZone, IZone), Boolean).Unload
    fullName: TMG.ICalculation(Of Datastructure.Pair(Of TMG.IZone, TMG.IZone), System.Boolean).Unload
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.ICalculation`2.Unload
  commentId: M:TMG.ICalculation`2.Unload
  name: Unload()
  nameWithType: ICalculation<D, O>.Unload()
  fullName: TMG.ICalculation<D, O>.Unload()
  nameWithType.vb: ICalculation(Of D, O).Unload()
  fullName.vb: TMG.ICalculation(Of D, O).Unload()
  spec.csharp:
  - uid: TMG.ICalculation`2.Unload
    name: Unload
    nameWithType: ICalculation<D, O>.Unload
    fullName: TMG.ICalculation<D, O>.Unload
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.ICalculation`2.Unload
    name: Unload
    nameWithType: ICalculation(Of D, O).Unload
    fullName: TMG.ICalculation(Of D, O).Unload
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Name*
  commentId: Overload:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Name
  name: Name
  nameWithType: DifferentRegions.Name
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Name
- uid: XTMF.IModule.Name
  commentId: P:XTMF.IModule.Name
  parent: XTMF.IModule
  name: Name
  nameWithType: IModule.Name
  fullName: XTMF.IModule.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Progress*
  commentId: Overload:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Progress
  name: Progress
  nameWithType: DifferentRegions.Progress
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.Progress
- uid: XTMF.IModule.Progress
  commentId: P:XTMF.IModule.Progress
  parent: XTMF.IModule
  name: Progress
  nameWithType: IModule.Progress
  fullName: XTMF.IModule.Progress
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProgressColour*
  commentId: Overload:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProgressColour
  name: ProgressColour
  nameWithType: DifferentRegions.ProgressColour
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.ProgressColour
- uid: XTMF.IModule.ProgressColour
  commentId: P:XTMF.IModule.ProgressColour
  parent: XTMF.IModule
  name: ProgressColour
  nameWithType: IModule.ProgressColour
  fullName: XTMF.IModule.ProgressColour
- uid: System.Tuple{System.Byte,System.Byte,System.Byte}
  commentId: T:System.Tuple{System.Byte,System.Byte,System.Byte}
  parent: System
  definition: System.Tuple`3
  name: Tuple<Byte, Byte, Byte>
  nameWithType: Tuple<Byte, Byte, Byte>
  fullName: System.Tuple<System.Byte, System.Byte, System.Byte>
  nameWithType.vb: Tuple(Of Byte, Byte, Byte)
  fullName.vb: System.Tuple(Of System.Byte, System.Byte, System.Byte)
  name.vb: Tuple(Of Byte, Byte, Byte)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.RuntimeValidation*
  commentId: Overload:TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.RuntimeValidation
  name: RuntimeValidation
  nameWithType: DifferentRegions.RuntimeValidation
  fullName: TMG.GTAModel.Modes.FeasibilityCalculations.DifferentRegions.RuntimeValidation
- uid: XTMF.IModule.RuntimeValidation(System.String@)
  commentId: M:XTMF.IModule.RuntimeValidation(System.String@)
  parent: XTMF.IModule
  isExternal: true
  name: RuntimeValidation(String)
  nameWithType: IModule.RuntimeValidation(String)
  fullName: XTMF.IModule.RuntimeValidation(System.String)
  spec.csharp:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
