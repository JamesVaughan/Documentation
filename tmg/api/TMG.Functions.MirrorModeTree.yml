### YamlMime:ManagedReference
items:
- uid: TMG.Functions.MirrorModeTree
  commentId: T:TMG.Functions.MirrorModeTree
  id: MirrorModeTree
  parent: TMG.Functions
  children:
  - TMG.Functions.MirrorModeTree.CreateMirroredTree``1(System.Collections.Generic.List{TMG.IModeChoiceNode})
  - TMG.Functions.MirrorModeTree.GetLeafNodeWithIndex``1(System.Collections.Generic.List{TMG.TreeData{``0}},System.Int32)
  langs:
  - csharp
  - vb
  name: MirrorModeTree
  nameWithType: MirrorModeTree
  fullName: TMG.Functions.MirrorModeTree
  type: Class
  source:
    remote:
      path: Code/TMG.Functions/MirrorModeTree.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: MirrorModeTree
    path: ../../XTMF/Code/TMG.Functions/MirrorModeTree.cs
    startLine: 22
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  syntax:
    content: public static class MirrorModeTree
    content.vb: Public Module MirrorModeTree
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TMG.Functions.MirrorModeTree.CreateMirroredTree``1(System.Collections.Generic.List{TMG.IModeChoiceNode})
  commentId: M:TMG.Functions.MirrorModeTree.CreateMirroredTree``1(System.Collections.Generic.List{TMG.IModeChoiceNode})
  id: CreateMirroredTree``1(System.Collections.Generic.List{TMG.IModeChoiceNode})
  parent: TMG.Functions.MirrorModeTree
  langs:
  - csharp
  - vb
  name: CreateMirroredTree<T>(List<IModeChoiceNode>)
  nameWithType: MirrorModeTree.CreateMirroredTree<T>(List<IModeChoiceNode>)
  fullName: TMG.Functions.MirrorModeTree.CreateMirroredTree<T>(System.Collections.Generic.List<TMG.IModeChoiceNode>)
  type: Method
  source:
    remote:
      path: Code/TMG.Functions/MirrorModeTree.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: CreateMirroredTree
    path: ../../XTMF/Code/TMG.Functions/MirrorModeTree.cs
    startLine: 24
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  syntax:
    content: public static List<TreeData<T>> CreateMirroredTree<T>(List<IModeChoiceNode> modes)
    parameters:
    - id: modes
      type: System.Collections.Generic.List{TMG.IModeChoiceNode}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{TMG.TreeData{{T}}}
    content.vb: Public Shared Function CreateMirroredTree(Of T)(modes As List(Of IModeChoiceNode)) As List(Of TreeData(Of T))
  overload: TMG.Functions.MirrorModeTree.CreateMirroredTree*
  nameWithType.vb: MirrorModeTree.CreateMirroredTree(Of T)(List(Of IModeChoiceNode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.Functions.MirrorModeTree.CreateMirroredTree(Of T)(System.Collections.Generic.List(Of TMG.IModeChoiceNode))
  name.vb: CreateMirroredTree(Of T)(List(Of IModeChoiceNode))
- uid: TMG.Functions.MirrorModeTree.GetLeafNodeWithIndex``1(System.Collections.Generic.List{TMG.TreeData{``0}},System.Int32)
  commentId: M:TMG.Functions.MirrorModeTree.GetLeafNodeWithIndex``1(System.Collections.Generic.List{TMG.TreeData{``0}},System.Int32)
  id: GetLeafNodeWithIndex``1(System.Collections.Generic.List{TMG.TreeData{``0}},System.Int32)
  parent: TMG.Functions.MirrorModeTree
  langs:
  - csharp
  - vb
  name: GetLeafNodeWithIndex<T>(List<TreeData<T>>, Int32)
  nameWithType: MirrorModeTree.GetLeafNodeWithIndex<T>(List<TreeData<T>>, Int32)
  fullName: TMG.Functions.MirrorModeTree.GetLeafNodeWithIndex<T>(System.Collections.Generic.List<TMG.TreeData<T>>, System.Int32)
  type: Method
  source:
    remote:
      path: Code/TMG.Functions/MirrorModeTree.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetLeafNodeWithIndex
    path: ../../XTMF/Code/TMG.Functions/MirrorModeTree.cs
    startLine: 57
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  syntax:
    content: public static TreeData<T> GetLeafNodeWithIndex<T>(List<TreeData<T>> list, int index)
    parameters:
    - id: list
      type: System.Collections.Generic.List{TMG.TreeData{{T}}}
    - id: index
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: TMG.TreeData{{T}}
    content.vb: Public Shared Function GetLeafNodeWithIndex(Of T)(list As List(Of TreeData(Of T)), index As Integer) As TreeData(Of T)
  overload: TMG.Functions.MirrorModeTree.GetLeafNodeWithIndex*
  nameWithType.vb: MirrorModeTree.GetLeafNodeWithIndex(Of T)(List(Of TreeData(Of T)), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.Functions.MirrorModeTree.GetLeafNodeWithIndex(Of T)(System.Collections.Generic.List(Of TMG.TreeData(Of T)), System.Int32)
  name.vb: GetLeafNodeWithIndex(Of T)(List(Of TreeData(Of T)), Int32)
references:
- uid: TMG.Functions
  commentId: N:TMG.Functions
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TMG.Functions.MirrorModeTree.CreateMirroredTree*
  commentId: Overload:TMG.Functions.MirrorModeTree.CreateMirroredTree
  name: CreateMirroredTree
  nameWithType: MirrorModeTree.CreateMirroredTree
  fullName: TMG.Functions.MirrorModeTree.CreateMirroredTree
- uid: System.Collections.Generic.List{TMG.IModeChoiceNode}
  commentId: T:System.Collections.Generic.List{TMG.IModeChoiceNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IModeChoiceNode>
  nameWithType: List<IModeChoiceNode>
  fullName: System.Collections.Generic.List<TMG.IModeChoiceNode>
  nameWithType.vb: List(Of IModeChoiceNode)
  fullName.vb: System.Collections.Generic.List(Of TMG.IModeChoiceNode)
  name.vb: List(Of IModeChoiceNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.IModeChoiceNode
    name: IModeChoiceNode
    nameWithType: IModeChoiceNode
    fullName: TMG.IModeChoiceNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.IModeChoiceNode
    name: IModeChoiceNode
    nameWithType: IModeChoiceNode
    fullName: TMG.IModeChoiceNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{TMG.TreeData{{T}}}
  commentId: T:System.Collections.Generic.List{TMG.TreeData{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TreeData<T>>
  nameWithType: List<TreeData<T>>
  fullName: System.Collections.Generic.List<TMG.TreeData<T>>
  nameWithType.vb: List(Of TreeData(Of T))
  fullName.vb: System.Collections.Generic.List(Of TMG.TreeData(Of T))
  name.vb: List(Of TreeData(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TMG.Functions.MirrorModeTree.GetLeafNodeWithIndex*
  commentId: Overload:TMG.Functions.MirrorModeTree.GetLeafNodeWithIndex
  name: GetLeafNodeWithIndex
  nameWithType: MirrorModeTree.GetLeafNodeWithIndex
  fullName: TMG.Functions.MirrorModeTree.GetLeafNodeWithIndex
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TMG.TreeData{{T}}
  commentId: T:TMG.TreeData{``0}
  parent: TMG
  definition: TMG.TreeData`1
  name: TreeData<T>
  nameWithType: TreeData<T>
  fullName: TMG.TreeData<T>
  nameWithType.vb: TreeData(Of T)
  fullName.vb: TMG.TreeData(Of T)
  name.vb: TreeData(Of T)
  spec.csharp:
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.TreeData`1
  commentId: T:TMG.TreeData`1
  name: TreeData<T>
  nameWithType: TreeData<T>
  fullName: TMG.TreeData<T>
  nameWithType.vb: TreeData(Of T)
  fullName.vb: TMG.TreeData(Of T)
  name.vb: TreeData(Of T)
  spec.csharp:
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG
  commentId: N:TMG
  name: TMG
  nameWithType: TMG
  fullName: TMG
