### YamlMime:ManagedReference
items:
- uid: XTMF.IModuleRepository
  commentId: T:XTMF.IModuleRepository
  id: IModuleRepository
  parent: XTMF
  children:
  - XTMF.IModuleRepository.AddModule(System.Type)
  - XTMF.IModuleRepository.GetModuleType(System.String)
  - XTMF.IModuleRepository.Modules
  - XTMF.IModuleRepository.Unload(System.Type)
  langs:
  - csharp
  - vb
  name: IModuleRepository
  nameWithType: IModuleRepository
  fullName: XTMF.IModuleRepository
  type: Interface
  source:
    remote:
      path: Code/XTMFInterfaces/Interfaces/IModuleRepository.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IModuleRepository
    path: ../../XTMF/Code/XTMFInterfaces/Interfaces/IModuleRepository.cs
    startLine: 27
  assemblies:
  - XTMFInterfaces
  namespace: XTMF
  summary: "\nProvides access to all of the loaded\nmodels in XTMF\n"
  example: []
  syntax:
    content: 'public interface IModuleRepository : IEnumerable<Type>, IEnumerable'
    content.vb: >-
      Public Interface IModuleRepository
          Inherits IEnumerable(Of Type)
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{System.Type}.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: XTMF.IModuleRepository.Modules
  commentId: P:XTMF.IModuleRepository.Modules
  id: Modules
  parent: XTMF.IModuleRepository
  langs:
  - csharp
  - vb
  name: Modules
  nameWithType: IModuleRepository.Modules
  fullName: XTMF.IModuleRepository.Modules
  type: Property
  source:
    remote:
      path: Code/XTMFInterfaces/Interfaces/IModuleRepository.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Modules
    path: ../../XTMF/Code/XTMFInterfaces/Interfaces/IModuleRepository.cs
    startLine: 33
  assemblies:
  - XTMFInterfaces
  namespace: XTMF
  summary: "\nProvides access to the modules that\nexist in this XTMF installation\n"
  example: []
  syntax:
    content: IList<Type> Modules { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Type}
    content.vb: ReadOnly Property Modules As IList(Of Type)
  overload: XTMF.IModuleRepository.Modules*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: XTMF.IModuleRepository.AddModule(System.Type)
  commentId: M:XTMF.IModuleRepository.AddModule(System.Type)
  id: AddModule(System.Type)
  parent: XTMF.IModuleRepository
  langs:
  - csharp
  - vb
  name: AddModule(Type)
  nameWithType: IModuleRepository.AddModule(Type)
  fullName: XTMF.IModuleRepository.AddModule(System.Type)
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Interfaces/IModuleRepository.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: AddModule
    path: ../../XTMF/Code/XTMFInterfaces/Interfaces/IModuleRepository.cs
    startLine: 40
  assemblies:
  - XTMFInterfaces
  namespace: XTMF
  summary: "\nAdd a new module to the module repository\n"
  example: []
  syntax:
    content: bool AddModule(Type module)
    parameters:
    - id: module
      type: System.Type
      description: The module that you wish to add
    return:
      type: System.Boolean
      description: If the module was able to be added successfully
    content.vb: Function AddModule(module As Type) As Boolean
  overload: XTMF.IModuleRepository.AddModule*
- uid: XTMF.IModuleRepository.GetModuleType(System.String)
  commentId: M:XTMF.IModuleRepository.GetModuleType(System.String)
  id: GetModuleType(System.String)
  parent: XTMF.IModuleRepository
  langs:
  - csharp
  - vb
  name: GetModuleType(String)
  nameWithType: IModuleRepository.GetModuleType(String)
  fullName: XTMF.IModuleRepository.GetModuleType(System.String)
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Interfaces/IModuleRepository.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetModuleType
    path: ../../XTMF/Code/XTMFInterfaces/Interfaces/IModuleRepository.cs
    startLine: 42
  assemblies:
  - XTMFInterfaces
  namespace: XTMF
  syntax:
    content: Type GetModuleType(string typeName)
    parameters:
    - id: typeName
      type: System.String
    return:
      type: System.Type
    content.vb: Function GetModuleType(typeName As String) As Type
  overload: XTMF.IModuleRepository.GetModuleType*
- uid: XTMF.IModuleRepository.Unload(System.Type)
  commentId: M:XTMF.IModuleRepository.Unload(System.Type)
  id: Unload(System.Type)
  parent: XTMF.IModuleRepository
  langs:
  - csharp
  - vb
  name: Unload(Type)
  nameWithType: IModuleRepository.Unload(Type)
  fullName: XTMF.IModuleRepository.Unload(System.Type)
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Interfaces/IModuleRepository.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Unload
    path: ../../XTMF/Code/XTMFInterfaces/Interfaces/IModuleRepository.cs
    startLine: 48
  assemblies:
  - XTMFInterfaces
  namespace: XTMF
  summary: "\nUnload a type from the repository\n"
  example: []
  syntax:
    content: void Unload(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type to remove from the IModuleRepository
    content.vb: Sub Unload(type As Type)
  overload: XTMF.IModuleRepository.Unload*
references:
- uid: XTMF
  commentId: N:XTMF
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: System.Collections.Generic.IEnumerable{System.Type}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Type}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Type}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Type>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Type).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Type).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Type>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Type).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Type).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: T:System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: XTMF.IModuleRepository.Modules*
  commentId: Overload:XTMF.IModuleRepository.Modules
  name: Modules
  nameWithType: IModuleRepository.Modules
  fullName: XTMF.IModuleRepository.Modules
- uid: System.Collections.Generic.IList{System.Type}
  commentId: T:System.Collections.Generic.IList{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Type>
  nameWithType: IList<Type>
  fullName: System.Collections.Generic.IList<System.Type>
  nameWithType.vb: IList(Of Type)
  fullName.vb: System.Collections.Generic.IList(Of System.Type)
  name.vb: IList(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModuleRepository.AddModule*
  commentId: Overload:XTMF.IModuleRepository.AddModule
  name: AddModule
  nameWithType: IModuleRepository.AddModule
  fullName: XTMF.IModuleRepository.AddModule
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: XTMF.IModuleRepository.GetModuleType*
  commentId: Overload:XTMF.IModuleRepository.GetModuleType
  name: GetModuleType
  nameWithType: IModuleRepository.GetModuleType
  fullName: XTMF.IModuleRepository.GetModuleType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: XTMF.IModuleRepository.Unload*
  commentId: Overload:XTMF.IModuleRepository.Unload
  name: Unload
  nameWithType: IModuleRepository.Unload
  fullName: XTMF.IModuleRepository.Unload
