### YamlMime:ManagedReference
items:
- uid: TMG.Data.ZoneMap
  commentId: T:TMG.Data.ZoneMap
  id: ZoneMap
  parent: TMG.Data
  children:
  - TMG.Data.ZoneMap.CreateZoneMap(TMG.IZone[],System.Int32[])
  - TMG.Data.ZoneMap.KeyToZoneIndex
  - TMG.Data.ZoneMap.Map
  - TMG.Data.ZoneMap.MapValues
  langs:
  - csharp
  - vb
  name: ZoneMap
  nameWithType: ZoneMap
  fullName: TMG.Data.ZoneMap
  type: Class
  source:
    remote:
      path: Code/TMGInterfaces/Data/ZoneMap.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ZoneMap
    path: ../../XTMF/Code/TMGInterfaces/Data/ZoneMap.cs
    startLine: 27
  assemblies:
  - TMGInterfaces
  namespace: TMG.Data
  summary: "\nThis class is designed to help map the zone system by a given mapping\n"
  example: []
  syntax:
    content: public sealed class ZoneMap
    content.vb: Public NotInheritable Class ZoneMap
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: TMG.Data.ZoneMap.Map
  commentId: P:TMG.Data.ZoneMap.Map
  id: Map
  parent: TMG.Data.ZoneMap
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: ZoneMap.Map
  fullName: TMG.Data.ZoneMap.Map
  type: Property
  source:
    remote:
      path: Code/TMGInterfaces/Data/ZoneMap.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Map
    path: ../../XTMF/Code/TMGInterfaces/Data/ZoneMap.cs
    startLine: 32
  assemblies:
  - TMGInterfaces
  namespace: TMG.Data
  summary: "\nThis provides a mapping for each zone to what new category it fits into\n"
  example: []
  syntax:
    content: public int[] Map { get; }
    parameters: []
    return:
      type: System.Int32[]
    content.vb: Public ReadOnly Property Map As Integer()
  overload: TMG.Data.ZoneMap.Map*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Data.ZoneMap.KeyToZoneIndex
  commentId: P:TMG.Data.ZoneMap.KeyToZoneIndex
  id: KeyToZoneIndex
  parent: TMG.Data.ZoneMap
  langs:
  - csharp
  - vb
  name: KeyToZoneIndex
  nameWithType: ZoneMap.KeyToZoneIndex
  fullName: TMG.Data.ZoneMap.KeyToZoneIndex
  type: Property
  source:
    remote:
      path: Code/TMGInterfaces/Data/ZoneMap.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: KeyToZoneIndex
    path: ../../XTMF/Code/TMGInterfaces/Data/ZoneMap.cs
    startLine: 37
  assemblies:
  - TMGInterfaces
  namespace: TMG.Data
  summary: "\nThis provides a mapping for each new category to all of the contained zones\n"
  example: []
  syntax:
    content: public IReadOnlyDictionary<int, IReadOnlyList<int>> KeyToZoneIndex { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32}}
    content.vb: Public ReadOnly Property KeyToZoneIndex As IReadOnlyDictionary(Of Integer, IReadOnlyList(Of Integer))
  overload: TMG.Data.ZoneMap.KeyToZoneIndex*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Data.ZoneMap.MapValues
  commentId: P:TMG.Data.ZoneMap.MapValues
  id: MapValues
  parent: TMG.Data.ZoneMap
  langs:
  - csharp
  - vb
  name: MapValues
  nameWithType: ZoneMap.MapValues
  fullName: TMG.Data.ZoneMap.MapValues
  type: Property
  source:
    remote:
      path: Code/TMGInterfaces/Data/ZoneMap.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: MapValues
    path: ../../XTMF/Code/TMGInterfaces/Data/ZoneMap.cs
    startLine: 44
  assemblies:
  - TMGInterfaces
  namespace: TMG.Data
  summary: "\nThe set of different values provided to map to.\n"
  example: []
  syntax:
    content: public IReadOnlyList<int> MapValues { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Int32}
    content.vb: Public ReadOnly Property MapValues As IReadOnlyList(Of Integer)
  overload: TMG.Data.ZoneMap.MapValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Data.ZoneMap.CreateZoneMap(TMG.IZone[],System.Int32[])
  commentId: M:TMG.Data.ZoneMap.CreateZoneMap(TMG.IZone[],System.Int32[])
  id: CreateZoneMap(TMG.IZone[],System.Int32[])
  parent: TMG.Data.ZoneMap
  langs:
  - csharp
  - vb
  name: CreateZoneMap(IZone[], Int32[])
  nameWithType: ZoneMap.CreateZoneMap(IZone[], Int32[])
  fullName: TMG.Data.ZoneMap.CreateZoneMap(TMG.IZone[], System.Int32[])
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/Data/ZoneMap.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: CreateZoneMap
    path: ../../XTMF/Code/TMGInterfaces/Data/ZoneMap.cs
    startLine: 88
  assemblies:
  - TMGInterfaces
  namespace: TMG.Data
  syntax:
    content: public static ZoneMap CreateZoneMap(IZone[] zones, int[] map)
    parameters:
    - id: zones
      type: TMG.IZone[]
    - id: map
      type: System.Int32[]
    return:
      type: TMG.Data.ZoneMap
    content.vb: Public Shared Function CreateZoneMap(zones As IZone(), map As Integer()) As ZoneMap
  overload: TMG.Data.ZoneMap.CreateZoneMap*
  nameWithType.vb: ZoneMap.CreateZoneMap(IZone(), Int32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.Data.ZoneMap.CreateZoneMap(TMG.IZone(), System.Int32())
  name.vb: CreateZoneMap(IZone(), Int32())
references:
- uid: TMG.Data
  commentId: N:TMG.Data
  name: TMG.Data
  nameWithType: TMG.Data
  fullName: TMG.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TMG.Data.ZoneMap.Map*
  commentId: Overload:TMG.Data.ZoneMap.Map
  name: Map
  nameWithType: ZoneMap.Map
  fullName: TMG.Data.ZoneMap.Map
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TMG.Data.ZoneMap.KeyToZoneIndex*
  commentId: Overload:TMG.Data.ZoneMap.KeyToZoneIndex
  name: KeyToZoneIndex
  nameWithType: ZoneMap.KeyToZoneIndex
  fullName: TMG.Data.ZoneMap.KeyToZoneIndex
- uid: System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32}}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<Int32, IReadOnlyList<Int32>>
  nameWithType: IReadOnlyDictionary<Int32, IReadOnlyList<Int32>>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.Int32, System.Collections.Generic.IReadOnlyList<System.Int32>>
  nameWithType.vb: IReadOnlyDictionary(Of Int32, IReadOnlyList(Of Int32))
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.Int32, System.Collections.Generic.IReadOnlyList(Of System.Int32))
  name.vb: IReadOnlyDictionary(Of Int32, IReadOnlyList(Of Int32))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TMG.Data.ZoneMap.MapValues*
  commentId: Overload:TMG.Data.ZoneMap.MapValues
  name: MapValues
  nameWithType: ZoneMap.MapValues
  fullName: TMG.Data.ZoneMap.MapValues
- uid: System.Collections.Generic.IReadOnlyList{System.Int32}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Int32>
  nameWithType: IReadOnlyList<Int32>
  fullName: System.Collections.Generic.IReadOnlyList<System.Int32>
  nameWithType.vb: IReadOnlyList(Of Int32)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of System.Int32)
  name.vb: IReadOnlyList(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Data.ZoneMap.CreateZoneMap*
  commentId: Overload:TMG.Data.ZoneMap.CreateZoneMap
  name: CreateZoneMap
  nameWithType: ZoneMap.CreateZoneMap
  fullName: TMG.Data.ZoneMap.CreateZoneMap
- uid: TMG.IZone[]
  isExternal: true
  name: IZone[]
  nameWithType: IZone[]
  fullName: TMG.IZone[]
  nameWithType.vb: IZone()
  fullName.vb: TMG.IZone()
  name.vb: IZone()
  spec.csharp:
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TMG.Data.ZoneMap
  commentId: T:TMG.Data.ZoneMap
  parent: TMG.Data
  name: ZoneMap
  nameWithType: ZoneMap
  fullName: TMG.Data.ZoneMap
