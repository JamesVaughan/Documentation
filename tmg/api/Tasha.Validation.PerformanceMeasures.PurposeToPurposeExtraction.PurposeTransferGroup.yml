### YamlMime:ManagedReference
items:
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  commentId: T:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  id: PurposeToPurposeExtraction.PurposeTransferGroup
  parent: Tasha.Validation.PerformanceMeasures
  children:
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.And
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.DestinationPurpose
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.DestinationZones
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationFinished
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationStarting
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.MinimumAge
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Name
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.OriginPurpose
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.OriginZones
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Progress
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ProgressColour
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RecordHousehold(Tasha.Common.ITashaHousehold)
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Root
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation(System.String@)
  - Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriods
  langs:
  - csharp
  - vb
  name: PurposeToPurposeExtraction.PurposeTransferGroup
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  type: Class
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: PurposeTransferGroup
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 53
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: 'public sealed class PurposeTransferGroup : IModule'
    content.vb: >-
      Public NotInheritable Class PurposeTransferGroup
          Implements IModule
  inheritance:
  - System.Object
  implements:
  - XTMF.IModule
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriods
  commentId: F:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriods
  id: TimePeriods
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: TimePeriods
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriods
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriods
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: TimePeriods
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 122
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "The different time periods to work with")]

      public PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod[] TimePeriods
    return:
      type: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod[]
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="The different time periods to work with")>

      Public TimePeriods As PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod()
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: The different time periods to work with
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.MinimumAge
  commentId: F:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.MinimumAge
  id: MinimumAge
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: MinimumAge
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.MinimumAge
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.MinimumAge
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: MinimumAge
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 143
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [RunParameter("Minimum Age", 11, "The minimum age a person needs top be in order to be recorded.")]

      public int MinimumAge
    return:
      type: System.Int32
    content.vb: >-
      <RunParameter("Minimum Age", 11, "The minimum age a person needs top be in order to be recorded.")>

      Public MinimumAge As Integer
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Minimum Age
    - type: System.Int32
      value: 11
    - type: System.String
      value: The minimum age a person needs top be in order to be recorded.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.OriginZones
  commentId: F:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.OriginZones
  id: OriginZones
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: OriginZones
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.OriginZones
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.OriginZones
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: OriginZones
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 146
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [RunParameter("Origin Zones", "1-9999", typeof(RangeSet), "The origin zones to select for.")]

      public RangeSet OriginZones
    return:
      type: Datastructure.RangeSet
    content.vb: >-
      <RunParameter("Origin Zones", "1-9999", GetType(RangeSet), "The origin zones to select for.")>

      Public OriginZones As RangeSet
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.String,System.Type,System.String)
    arguments:
    - type: System.String
      value: Origin Zones
    - type: System.String
      value: 1-9999
    - type: System.Type
      value: Datastructure.RangeSet
    - type: System.String
      value: The origin zones to select for.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.DestinationZones
  commentId: F:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.DestinationZones
  id: DestinationZones
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: DestinationZones
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.DestinationZones
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.DestinationZones
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: DestinationZones
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 149
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [RunParameter("Destination Zones", "1-9999", typeof(RangeSet), "The destination zones to select for.")]

      public RangeSet DestinationZones
    return:
      type: Datastructure.RangeSet
    content.vb: >-
      <RunParameter("Destination Zones", "1-9999", GetType(RangeSet), "The destination zones to select for.")>

      Public DestinationZones As RangeSet
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.String,System.Type,System.String)
    arguments:
    - type: System.String
      value: Destination Zones
    - type: System.String
      value: 1-9999
    - type: System.Type
      value: Datastructure.RangeSet
    - type: System.String
      value: The destination zones to select for.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.OriginPurpose
  commentId: F:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.OriginPurpose
  id: OriginPurpose
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: OriginPurpose
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.OriginPurpose
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.OriginPurpose
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: OriginPurpose
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 152
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "The purposes to record from the origin")]

      public PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule[] OriginPurpose
    return:
      type: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule[]
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="The purposes to record from the origin")>

      Public OriginPurpose As PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule()
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: The purposes to record from the origin
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.DestinationPurpose
  commentId: F:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.DestinationPurpose
  id: DestinationPurpose
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: DestinationPurpose
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.DestinationPurpose
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.DestinationPurpose
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: DestinationPurpose
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 155
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "The purposes to record from the destination")]

      public PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule[] DestinationPurpose
    return:
      type: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule[]
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="The purposes to record from the destination")>

      Public DestinationPurpose As PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule()
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: The purposes to record from the destination
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Name
  commentId: P:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Name
  id: Name
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.Name
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Name
  type: Property
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Name
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 157
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Name*
  implements:
  - XTMF.IModule.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Progress
  commentId: P:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Progress
  id: Progress
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.Progress
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Progress
  type: Property
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Progress
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 159
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public float Progress { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Progress As Single
  overload: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Progress*
  implements:
  - XTMF.IModule.Progress
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ProgressColour
  commentId: P:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ProgressColour
  id: ProgressColour
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: ProgressColour
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.ProgressColour
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ProgressColour
  type: Property
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ProgressColour
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 161
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public Tuple<byte, byte, byte> ProgressColour { get; }
    parameters: []
    return:
      type: System.Tuple{System.Byte,System.Byte,System.Byte}
    content.vb: Public ReadOnly Property ProgressColour As Tuple(Of Byte, Byte, Byte)
  overload: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ProgressColour*
  implements:
  - XTMF.IModule.ProgressColour
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Root
  commentId: F:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Root
  id: Root
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.Root
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Root
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Root
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 166
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public ITravelDemandModel Root
    return:
      type: TMG.ITravelDemandModel
    content.vb: Public Root As ITravelDemandModel
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationStarting
  commentId: M:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationStarting
  id: IterationStarting
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: IterationStarting()
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.IterationStarting()
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationStarting()
  type: Method
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IterationStarting
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 171
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  summary: "\nThis must be called when an iteration is starting that we will be recording for.\n"
  example: []
  syntax:
    content: public void IterationStarting()
    content.vb: Public Sub IterationStarting
  overload: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationStarting*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RecordHousehold(Tasha.Common.ITashaHousehold)
  commentId: M:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RecordHousehold(Tasha.Common.ITashaHousehold)
  id: RecordHousehold(Tasha.Common.ITashaHousehold)
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: RecordHousehold(ITashaHousehold)
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.RecordHousehold(ITashaHousehold)
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RecordHousehold(Tasha.Common.ITashaHousehold)
  type: Method
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RecordHousehold
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 184
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  summary: "\nRecord the household data if it passes the tests\n"
  example: []
  syntax:
    content: public void RecordHousehold(ITashaHousehold household)
    parameters:
    - id: household
      type: Tasha.Common.ITashaHousehold
      description: The household to record
    content.vb: Public Sub RecordHousehold(household As ITashaHousehold)
  overload: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RecordHousehold*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.And
  commentId: F:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.And
  id: And
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: And
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.And
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.And
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: And
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 243
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [RunParameter("Require both zones contained", true, "Require that both zones are contained.  Setting this to false will result in recording if at least one is contained.")]

      public bool And
    return:
      type: System.Boolean
    content.vb: >-
      <RunParameter("Require both zones contained", True, "Require that both zones are contained.  Setting this to false will result in recording if at least one is contained.")>

      Public And As Boolean
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Require both zones contained
    - type: System.Boolean
      value: true
    - type: System.String
      value: Require that both zones are contained.  Setting this to false will result in recording if at least one is contained.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationFinished
  commentId: M:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationFinished
  id: IterationFinished
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: IterationFinished()
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.IterationFinished()
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationFinished()
  type: Method
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IterationFinished
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 260
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  summary: "\nThis must be called at the end of an iteration that we recorded in order to save the data to disk\n"
  example: []
  syntax:
    content: public void IterationFinished()
    content.vb: Public Sub IterationFinished
  overload: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationFinished*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation(System.String@)
  commentId: M:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation(System.String@)
  id: RuntimeValidation(System.String@)
  parent: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup
  langs:
  - csharp
  - vb
  name: RuntimeValidation(ref String)
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation(ref String)
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation(ref System.String)
  type: Method
  source:
    remote:
      path: Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RuntimeValidation
    path: ../../XTMF/Code/Tasha.Validation/TripExtraction/PurposeToPurposeExtraction.cs
    startLine: 268
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public bool RuntimeValidation(ref string error)
    parameters:
    - id: error
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function RuntimeValidation(ByRef error As String) As Boolean
  overload: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation*
  implements:
  - XTMF.IModule.RuntimeValidation(System.String@)
  nameWithType.vb: PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation(ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation(ByRef System.String)
  name.vb: RuntimeValidation(ByRef String)
references:
- uid: Tasha.Validation.PerformanceMeasures
  commentId: N:Tasha.Validation.PerformanceMeasures
  name: Tasha.Validation.PerformanceMeasures
  nameWithType: Tasha.Validation.PerformanceMeasures
  fullName: Tasha.Validation.PerformanceMeasures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: XTMF.IModule
  commentId: T:XTMF.IModule
  parent: XTMF
  name: IModule
  nameWithType: IModule
  fullName: XTMF.IModule
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  name: EnsureExactlyOne(IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: XTMF
  commentId: N:XTMF
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper
  commentId: T:TMG.Functions.ModuleHelper
  parent: TMG.Functions
  name: ModuleHelper
  nameWithType: ModuleHelper
  fullName: TMG.Functions.ModuleHelper
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  isExternal: true
  name: EnsureExactlyOne(IModule, IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions
  commentId: N:TMG.Functions
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod[]
  isExternal: true
  name: PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod[]
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod[]
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod[]
  nameWithType.vb: PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod()
  fullName.vb: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod()
  name.vb: PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod()
  spec.csharp:
  - uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod
    name: PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod
    nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod
    fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod
    name: PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod
    nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod
    fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.TimePeriod
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Datastructure.RangeSet
  commentId: T:Datastructure.RangeSet
  parent: Datastructure
  name: RangeSet
  nameWithType: RangeSet
  fullName: Datastructure.RangeSet
- uid: Datastructure
  commentId: N:Datastructure
  name: Datastructure
  nameWithType: Datastructure
  fullName: Datastructure
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule[]
  isExternal: true
  name: PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule[]
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule[]
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule[]
  nameWithType.vb: PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule()
  fullName.vb: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule()
  name.vb: PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule()
  spec.csharp:
  - uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule
    name: PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule
    nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule
    fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule
    name: PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule
    nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule
    fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ActivityModule
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Name*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Name
  name: Name
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.Name
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Name
- uid: XTMF.IModule.Name
  commentId: P:XTMF.IModule.Name
  parent: XTMF.IModule
  name: Name
  nameWithType: IModule.Name
  fullName: XTMF.IModule.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Progress*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Progress
  name: Progress
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.Progress
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.Progress
- uid: XTMF.IModule.Progress
  commentId: P:XTMF.IModule.Progress
  parent: XTMF.IModule
  name: Progress
  nameWithType: IModule.Progress
  fullName: XTMF.IModule.Progress
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ProgressColour*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ProgressColour
  name: ProgressColour
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.ProgressColour
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.ProgressColour
- uid: XTMF.IModule.ProgressColour
  commentId: P:XTMF.IModule.ProgressColour
  parent: XTMF.IModule
  name: ProgressColour
  nameWithType: IModule.ProgressColour
  fullName: XTMF.IModule.ProgressColour
- uid: System.Tuple{System.Byte,System.Byte,System.Byte}
  commentId: T:System.Tuple{System.Byte,System.Byte,System.Byte}
  parent: System
  definition: System.Tuple`3
  name: Tuple<Byte, Byte, Byte>
  nameWithType: Tuple<Byte, Byte, Byte>
  fullName: System.Tuple<System.Byte, System.Byte, System.Byte>
  nameWithType.vb: Tuple(Of Byte, Byte, Byte)
  fullName.vb: System.Tuple(Of System.Byte, System.Byte, System.Byte)
  name.vb: Tuple(Of Byte, Byte, Byte)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.ITravelDemandModel
  commentId: T:TMG.ITravelDemandModel
  parent: TMG
  name: ITravelDemandModel
  nameWithType: ITravelDemandModel
  fullName: TMG.ITravelDemandModel
- uid: TMG
  commentId: N:TMG
  name: TMG
  nameWithType: TMG
  fullName: TMG
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationStarting*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationStarting
  name: IterationStarting
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.IterationStarting
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationStarting
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RecordHousehold*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RecordHousehold
  name: RecordHousehold
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.RecordHousehold
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RecordHousehold
- uid: Tasha.Common.ITashaHousehold
  commentId: T:Tasha.Common.ITashaHousehold
  parent: Tasha.Common
  name: ITashaHousehold
  nameWithType: ITashaHousehold
  fullName: Tasha.Common.ITashaHousehold
- uid: Tasha.Common
  commentId: N:Tasha.Common
  name: Tasha.Common
  nameWithType: Tasha.Common
  fullName: Tasha.Common
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationFinished*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationFinished
  name: IterationFinished
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.IterationFinished
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.IterationFinished
- uid: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation
  name: RuntimeValidation
  nameWithType: PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation
  fullName: Tasha.Validation.PerformanceMeasures.PurposeToPurposeExtraction.PurposeTransferGroup.RuntimeValidation
- uid: XTMF.IModule.RuntimeValidation(System.String@)
  commentId: M:XTMF.IModule.RuntimeValidation(System.String@)
  parent: XTMF.IModule
  isExternal: true
  name: RuntimeValidation(String)
  nameWithType: IModule.RuntimeValidation(String)
  fullName: XTMF.IModule.RuntimeValidation(System.String)
  spec.csharp:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
