### YamlMime:ManagedReference
items:
- uid: TMG.Functions.ZoneSystemHelper
  commentId: T:TMG.Functions.ZoneSystemHelper
  id: ZoneSystemHelper
  parent: TMG.Functions
  children:
  - TMG.Functions.ZoneSystemHelper.CreatePdArray``1(Datastructure.SparseArray{TMG.IZone})
  - TMG.Functions.ZoneSystemHelper.CreatePdTwinArray``1(Datastructure.SparseArray{TMG.IZone})
  - TMG.Functions.ZoneSystemHelper.CreateRegionArray``1(Datastructure.SparseArray{TMG.IZone})
  - TMG.Functions.ZoneSystemHelper.IsSameZoneSystem(Datastructure.SparseTwinIndex{System.Single},Datastructure.SparseTwinIndex{System.Single})
  langs:
  - csharp
  - vb
  name: ZoneSystemHelper
  nameWithType: ZoneSystemHelper
  fullName: TMG.Functions.ZoneSystemHelper
  type: Class
  source:
    remote:
      path: Code/TMG.Functions/ZoneSystemHelper.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ZoneSystemHelper
    path: ../../../XTMF/XTMF/Code/TMG.Functions/ZoneSystemHelper.cs
    startLine: 24
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  syntax:
    content: public static class ZoneSystemHelper
    content.vb: Public Module ZoneSystemHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TMG.Functions.ZoneSystemHelper.CreatePdArray``1(Datastructure.SparseArray{TMG.IZone})
  commentId: M:TMG.Functions.ZoneSystemHelper.CreatePdArray``1(Datastructure.SparseArray{TMG.IZone})
  id: CreatePdArray``1(Datastructure.SparseArray{TMG.IZone})
  parent: TMG.Functions.ZoneSystemHelper
  langs:
  - csharp
  - vb
  name: CreatePdArray<T>(SparseArray<IZone>)
  nameWithType: ZoneSystemHelper.CreatePdArray<T>(SparseArray<IZone>)
  fullName: TMG.Functions.ZoneSystemHelper.CreatePdArray<T>(Datastructure.SparseArray<TMG.IZone>)
  type: Method
  source:
    remote:
      path: Code/TMG.Functions/ZoneSystemHelper.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: CreatePdArray
    path: ../../../XTMF/XTMF/Code/TMG.Functions/ZoneSystemHelper.cs
    startLine: 26
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  syntax:
    content: public static SparseArray<T> CreatePdArray<T>(SparseArray<IZone> zoneArray)
    parameters:
    - id: zoneArray
      type: Datastructure.SparseArray{TMG.IZone}
    typeParameters:
    - id: T
    return:
      type: Datastructure.SparseArray{{T}}
    content.vb: Public Shared Function CreatePdArray(Of T)(zoneArray As SparseArray(Of IZone)) As SparseArray(Of T)
  overload: TMG.Functions.ZoneSystemHelper.CreatePdArray*
  nameWithType.vb: ZoneSystemHelper.CreatePdArray(Of T)(SparseArray(Of IZone))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.Functions.ZoneSystemHelper.CreatePdArray(Of T)(Datastructure.SparseArray(Of TMG.IZone))
  name.vb: CreatePdArray(Of T)(SparseArray(Of IZone))
- uid: TMG.Functions.ZoneSystemHelper.CreateRegionArray``1(Datastructure.SparseArray{TMG.IZone})
  commentId: M:TMG.Functions.ZoneSystemHelper.CreateRegionArray``1(Datastructure.SparseArray{TMG.IZone})
  id: CreateRegionArray``1(Datastructure.SparseArray{TMG.IZone})
  parent: TMG.Functions.ZoneSystemHelper
  langs:
  - csharp
  - vb
  name: CreateRegionArray<T>(SparseArray<IZone>)
  nameWithType: ZoneSystemHelper.CreateRegionArray<T>(SparseArray<IZone>)
  fullName: TMG.Functions.ZoneSystemHelper.CreateRegionArray<T>(Datastructure.SparseArray<TMG.IZone>)
  type: Method
  source:
    remote:
      path: Code/TMG.Functions/ZoneSystemHelper.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: CreateRegionArray
    path: ../../../XTMF/XTMF/Code/TMG.Functions/ZoneSystemHelper.cs
    startLine: 42
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  syntax:
    content: public static SparseArray<T> CreateRegionArray<T>(SparseArray<IZone> zoneArray)
    parameters:
    - id: zoneArray
      type: Datastructure.SparseArray{TMG.IZone}
    typeParameters:
    - id: T
    return:
      type: Datastructure.SparseArray{{T}}
    content.vb: Public Shared Function CreateRegionArray(Of T)(zoneArray As SparseArray(Of IZone)) As SparseArray(Of T)
  overload: TMG.Functions.ZoneSystemHelper.CreateRegionArray*
  nameWithType.vb: ZoneSystemHelper.CreateRegionArray(Of T)(SparseArray(Of IZone))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.Functions.ZoneSystemHelper.CreateRegionArray(Of T)(Datastructure.SparseArray(Of TMG.IZone))
  name.vb: CreateRegionArray(Of T)(SparseArray(Of IZone))
- uid: TMG.Functions.ZoneSystemHelper.IsSameZoneSystem(Datastructure.SparseTwinIndex{System.Single},Datastructure.SparseTwinIndex{System.Single})
  commentId: M:TMG.Functions.ZoneSystemHelper.IsSameZoneSystem(Datastructure.SparseTwinIndex{System.Single},Datastructure.SparseTwinIndex{System.Single})
  id: IsSameZoneSystem(Datastructure.SparseTwinIndex{System.Single},Datastructure.SparseTwinIndex{System.Single})
  parent: TMG.Functions.ZoneSystemHelper
  langs:
  - csharp
  - vb
  name: IsSameZoneSystem(SparseTwinIndex<Single>, SparseTwinIndex<Single>)
  nameWithType: ZoneSystemHelper.IsSameZoneSystem(SparseTwinIndex<Single>, SparseTwinIndex<Single>)
  fullName: TMG.Functions.ZoneSystemHelper.IsSameZoneSystem(Datastructure.SparseTwinIndex<System.Single>, Datastructure.SparseTwinIndex<System.Single>)
  type: Method
  source:
    remote:
      path: Code/TMG.Functions/ZoneSystemHelper.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IsSameZoneSystem
    path: ../../../XTMF/XTMF/Code/TMG.Functions/ZoneSystemHelper.cs
    startLine: 64
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  summary: "\nCheck to see if two zone systems share the same zone system\n"
  example: []
  syntax:
    content: public static bool IsSameZoneSystem(SparseTwinIndex<float> firstMatrix, SparseTwinIndex<float> secondMatrix)
    parameters:
    - id: firstMatrix
      type: Datastructure.SparseTwinIndex{System.Single}
      description: ''
    - id: secondMatrix
      type: Datastructure.SparseTwinIndex{System.Single}
      description: ''
    return:
      type: System.Boolean
      description: True if they both represent the same indexes, false otherwise.
    content.vb: Public Shared Function IsSameZoneSystem(firstMatrix As SparseTwinIndex(Of Single), secondMatrix As SparseTwinIndex(Of Single)) As Boolean
  overload: TMG.Functions.ZoneSystemHelper.IsSameZoneSystem*
  nameWithType.vb: ZoneSystemHelper.IsSameZoneSystem(SparseTwinIndex(Of Single), SparseTwinIndex(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.Functions.ZoneSystemHelper.IsSameZoneSystem(Datastructure.SparseTwinIndex(Of System.Single), Datastructure.SparseTwinIndex(Of System.Single))
  name.vb: IsSameZoneSystem(SparseTwinIndex(Of Single), SparseTwinIndex(Of Single))
- uid: TMG.Functions.ZoneSystemHelper.CreatePdTwinArray``1(Datastructure.SparseArray{TMG.IZone})
  commentId: M:TMG.Functions.ZoneSystemHelper.CreatePdTwinArray``1(Datastructure.SparseArray{TMG.IZone})
  id: CreatePdTwinArray``1(Datastructure.SparseArray{TMG.IZone})
  parent: TMG.Functions.ZoneSystemHelper
  langs:
  - csharp
  - vb
  name: CreatePdTwinArray<T>(SparseArray<IZone>)
  nameWithType: ZoneSystemHelper.CreatePdTwinArray<T>(SparseArray<IZone>)
  fullName: TMG.Functions.ZoneSystemHelper.CreatePdTwinArray<T>(Datastructure.SparseArray<TMG.IZone>)
  type: Method
  source:
    remote:
      path: Code/TMG.Functions/ZoneSystemHelper.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: CreatePdTwinArray
    path: ../../../XTMF/XTMF/Code/TMG.Functions/ZoneSystemHelper.cs
    startLine: 104
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  syntax:
    content: public static SparseTwinIndex<T> CreatePdTwinArray<T>(SparseArray<IZone> zoneArray)
    parameters:
    - id: zoneArray
      type: Datastructure.SparseArray{TMG.IZone}
    typeParameters:
    - id: T
    return:
      type: Datastructure.SparseTwinIndex{{T}}
    content.vb: Public Shared Function CreatePdTwinArray(Of T)(zoneArray As SparseArray(Of IZone)) As SparseTwinIndex(Of T)
  overload: TMG.Functions.ZoneSystemHelper.CreatePdTwinArray*
  nameWithType.vb: ZoneSystemHelper.CreatePdTwinArray(Of T)(SparseArray(Of IZone))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.Functions.ZoneSystemHelper.CreatePdTwinArray(Of T)(Datastructure.SparseArray(Of TMG.IZone))
  name.vb: CreatePdTwinArray(Of T)(SparseArray(Of IZone))
references:
- uid: TMG.Functions
  commentId: N:TMG.Functions
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TMG.Functions.ZoneSystemHelper.CreatePdArray*
  commentId: Overload:TMG.Functions.ZoneSystemHelper.CreatePdArray
  name: CreatePdArray
  nameWithType: ZoneSystemHelper.CreatePdArray
  fullName: TMG.Functions.ZoneSystemHelper.CreatePdArray
- uid: Datastructure.SparseArray{TMG.IZone}
  commentId: T:Datastructure.SparseArray{TMG.IZone}
  parent: Datastructure
  definition: Datastructure.SparseArray`1
  name: SparseArray<IZone>
  nameWithType: SparseArray<IZone>
  fullName: Datastructure.SparseArray<TMG.IZone>
  nameWithType.vb: SparseArray(Of IZone)
  fullName.vb: Datastructure.SparseArray(Of TMG.IZone)
  name.vb: SparseArray(Of IZone)
  spec.csharp:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure.SparseArray{{T}}
  commentId: T:Datastructure.SparseArray{``0}
  parent: Datastructure
  definition: Datastructure.SparseArray`1
  name: SparseArray<T>
  nameWithType: SparseArray<T>
  fullName: Datastructure.SparseArray<T>
  nameWithType.vb: SparseArray(Of T)
  fullName.vb: Datastructure.SparseArray(Of T)
  name.vb: SparseArray(Of T)
  spec.csharp:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure.SparseArray`1
  commentId: T:Datastructure.SparseArray`1
  name: SparseArray<T>
  nameWithType: SparseArray<T>
  fullName: Datastructure.SparseArray<T>
  nameWithType.vb: SparseArray(Of T)
  fullName.vb: Datastructure.SparseArray(Of T)
  name.vb: SparseArray(Of T)
  spec.csharp:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure
  commentId: N:Datastructure
  name: Datastructure
  nameWithType: Datastructure
  fullName: Datastructure
- uid: TMG.Functions.ZoneSystemHelper.CreateRegionArray*
  commentId: Overload:TMG.Functions.ZoneSystemHelper.CreateRegionArray
  name: CreateRegionArray
  nameWithType: ZoneSystemHelper.CreateRegionArray
  fullName: TMG.Functions.ZoneSystemHelper.CreateRegionArray
- uid: TMG.Functions.ZoneSystemHelper.IsSameZoneSystem*
  commentId: Overload:TMG.Functions.ZoneSystemHelper.IsSameZoneSystem
  name: IsSameZoneSystem
  nameWithType: ZoneSystemHelper.IsSameZoneSystem
  fullName: TMG.Functions.ZoneSystemHelper.IsSameZoneSystem
- uid: Datastructure.SparseTwinIndex{System.Single}
  commentId: T:Datastructure.SparseTwinIndex{System.Single}
  parent: Datastructure
  definition: Datastructure.SparseTwinIndex`1
  name: SparseTwinIndex<Single>
  nameWithType: SparseTwinIndex<Single>
  fullName: Datastructure.SparseTwinIndex<System.Single>
  nameWithType.vb: SparseTwinIndex(Of Single)
  fullName.vb: Datastructure.SparseTwinIndex(Of System.Single)
  name.vb: SparseTwinIndex(Of Single)
  spec.csharp:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Datastructure.SparseTwinIndex`1
  commentId: T:Datastructure.SparseTwinIndex`1
  name: SparseTwinIndex<T>
  nameWithType: SparseTwinIndex<T>
  fullName: Datastructure.SparseTwinIndex<T>
  nameWithType.vb: SparseTwinIndex(Of T)
  fullName.vb: Datastructure.SparseTwinIndex(Of T)
  name.vb: SparseTwinIndex(Of T)
  spec.csharp:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ZoneSystemHelper.CreatePdTwinArray*
  commentId: Overload:TMG.Functions.ZoneSystemHelper.CreatePdTwinArray
  name: CreatePdTwinArray
  nameWithType: ZoneSystemHelper.CreatePdTwinArray
  fullName: TMG.Functions.ZoneSystemHelper.CreatePdTwinArray
- uid: Datastructure.SparseTwinIndex{{T}}
  commentId: T:Datastructure.SparseTwinIndex{`0}
  parent: Datastructure
  definition: Datastructure.SparseTwinIndex`1
  name: SparseTwinIndex<T>
  nameWithType: SparseTwinIndex<T>
  fullName: Datastructure.SparseTwinIndex<T>
  nameWithType.vb: SparseTwinIndex(Of T)
  fullName.vb: Datastructure.SparseTwinIndex(Of T)
  name.vb: SparseTwinIndex(Of T)
  spec.csharp:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
