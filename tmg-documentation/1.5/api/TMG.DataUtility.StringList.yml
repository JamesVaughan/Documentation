### YamlMime:ManagedReference
items:
- uid: TMG.DataUtility.StringList
  commentId: T:TMG.DataUtility.StringList
  id: StringList
  parent: TMG.DataUtility
  children:
  - TMG.DataUtility.StringList.Add(System.String)
  - TMG.DataUtility.StringList.Clear
  - TMG.DataUtility.StringList.Contains(System.String)
  - TMG.DataUtility.StringList.CopyTo(System.String[],System.Int32)
  - TMG.DataUtility.StringList.Count
  - TMG.DataUtility.StringList.GetEnumerator
  - TMG.DataUtility.StringList.IndexOf(System.String)
  - TMG.DataUtility.StringList.Insert(System.Int32,System.String)
  - TMG.DataUtility.StringList.IsReadOnly
  - TMG.DataUtility.StringList.Item(System.Int32)
  - TMG.DataUtility.StringList.Remove(System.String)
  - TMG.DataUtility.StringList.RemoveAt(System.Int32)
  - TMG.DataUtility.StringList.System#Collections#IEnumerable#GetEnumerator
  - TMG.DataUtility.StringList.ToArray
  - TMG.DataUtility.StringList.ToString
  - TMG.DataUtility.StringList.TryParse(System.String,TMG.DataUtility.StringList@)
  - TMG.DataUtility.StringList.TryParse(System.String@,System.String,TMG.DataUtility.StringList@)
  langs:
  - csharp
  - vb
  name: StringList
  nameWithType: StringList
  fullName: TMG.DataUtility.StringList
  type: Class
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: StringList
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 28
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  summary: "\nAllows you to have a parameter that is a list of strings.  Strings are separated by ,&apos;s.  If you have a \\ before it, it will treat the comma as\npart of the current string.\n"
  example: []
  syntax:
    content: 'public sealed class StringList : IList<string>, ICollection<string>, IEnumerable<string>, IEnumerable'
    content.vb: >-
      Public NotInheritable Class StringList
          Implements IList(Of String), ICollection(Of String), IEnumerable(Of String), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{System.String}
  - System.Collections.Generic.ICollection{System.String}
  - System.Collections.Generic.IEnumerable{System.String}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: TMG.DataUtility.StringList.TryParse(System.String,TMG.DataUtility.StringList@)
  commentId: M:TMG.DataUtility.StringList.TryParse(System.String,TMG.DataUtility.StringList@)
  id: TryParse(System.String,TMG.DataUtility.StringList@)
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: TryParse(String, out StringList)
  nameWithType: StringList.TryParse(String, out StringList)
  fullName: TMG.DataUtility.StringList.TryParse(System.String, out TMG.DataUtility.StringList)
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: TryParse
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 37
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public static bool TryParse(string input, out StringList stringList)
    parameters:
    - id: input
      type: System.String
    - id: stringList
      type: TMG.DataUtility.StringList
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(input As String, ByRef stringList As StringList) As Boolean
  overload: TMG.DataUtility.StringList.TryParse*
  nameWithType.vb: StringList.TryParse(String, ByRef StringList)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.DataUtility.StringList.TryParse(System.String, ByRef TMG.DataUtility.StringList)
  name.vb: TryParse(String, ByRef StringList)
- uid: TMG.DataUtility.StringList.TryParse(System.String@,System.String,TMG.DataUtility.StringList@)
  commentId: M:TMG.DataUtility.StringList.TryParse(System.String@,System.String,TMG.DataUtility.StringList@)
  id: TryParse(System.String@,System.String,TMG.DataUtility.StringList@)
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: TryParse(ref String, String, out StringList)
  nameWithType: StringList.TryParse(ref String, String, out StringList)
  fullName: TMG.DataUtility.StringList.TryParse(ref System.String, System.String, out TMG.DataUtility.StringList)
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: TryParse
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 77
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public static bool TryParse(ref string error, string input, out StringList stringList)
    parameters:
    - id: error
      type: System.String
    - id: input
      type: System.String
    - id: stringList
      type: TMG.DataUtility.StringList
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(ByRef error As String, input As String, ByRef stringList As StringList) As Boolean
  overload: TMG.DataUtility.StringList.TryParse*
  nameWithType.vb: StringList.TryParse(ByRef String, String, ByRef StringList)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.DataUtility.StringList.TryParse(ByRef System.String, System.String, ByRef TMG.DataUtility.StringList)
  name.vb: TryParse(ByRef String, String, ByRef StringList)
- uid: TMG.DataUtility.StringList.IndexOf(System.String)
  commentId: M:TMG.DataUtility.StringList.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: IndexOf(String)
  nameWithType: StringList.IndexOf(String)
  fullName: TMG.DataUtility.StringList.IndexOf(System.String)
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IndexOf
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 82
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public int IndexOf(string item)
    parameters:
    - id: item
      type: System.String
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(item As String) As Integer
  overload: TMG.DataUtility.StringList.IndexOf*
  implements:
  - System.Collections.Generic.IList{System.String}.IndexOf(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.DataUtility.StringList.Insert(System.Int32,System.String)
  commentId: M:TMG.DataUtility.StringList.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: Insert(Int32, String)
  nameWithType: StringList.Insert(Int32, String)
  fullName: TMG.DataUtility.StringList.Insert(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Insert
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 95
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public void Insert(int index, string item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: System.String
    content.vb: Public Sub Insert(index As Integer, item As String)
  overload: TMG.DataUtility.StringList.Insert*
  implements:
  - System.Collections.Generic.IList{System.String}.Insert(System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.DataUtility.StringList.RemoveAt(System.Int32)
  commentId: M:TMG.DataUtility.StringList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: StringList.RemoveAt(Int32)
  fullName: TMG.DataUtility.StringList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RemoveAt
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 100
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: TMG.DataUtility.StringList.RemoveAt*
  implements:
  - System.Collections.Generic.IList{System.String}.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.DataUtility.StringList.Item(System.Int32)
  commentId: P:TMG.DataUtility.StringList.Item(System.Int32)
  id: Item(System.Int32)
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: StringList.Item[Int32]
  fullName: TMG.DataUtility.StringList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: this[]
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 105
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public string this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Property Item(index As Integer) As String
  overload: TMG.DataUtility.StringList.Item*
  implements:
  - System.Collections.Generic.IList{System.String}.Item(System.Int32)
  nameWithType.vb: StringList.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: TMG.DataUtility.StringList.Item(System.Int32)
  name.vb: Item(Int32)
- uid: TMG.DataUtility.StringList.Add(System.String)
  commentId: M:TMG.DataUtility.StringList.Add(System.String)
  id: Add(System.String)
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: Add(String)
  nameWithType: StringList.Add(String)
  fullName: TMG.DataUtility.StringList.Add(System.String)
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Add
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 117
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public void Add(string item)
    parameters:
    - id: item
      type: System.String
    content.vb: Public Sub Add(item As String)
  overload: TMG.DataUtility.StringList.Add*
  implements:
  - System.Collections.Generic.ICollection{System.String}.Add(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.DataUtility.StringList.Clear
  commentId: M:TMG.DataUtility.StringList.Clear
  id: Clear
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: StringList.Clear()
  fullName: TMG.DataUtility.StringList.Clear()
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Clear
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 122
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: TMG.DataUtility.StringList.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.String}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.DataUtility.StringList.Contains(System.String)
  commentId: M:TMG.DataUtility.StringList.Contains(System.String)
  id: Contains(System.String)
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: Contains(String)
  nameWithType: StringList.Contains(String)
  fullName: TMG.DataUtility.StringList.Contains(System.String)
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Contains
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 127
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public bool Contains(string item)
    parameters:
    - id: item
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As String) As Boolean
  overload: TMG.DataUtility.StringList.Contains*
  implements:
  - System.Collections.Generic.ICollection{System.String}.Contains(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.DataUtility.StringList.CopyTo(System.String[],System.Int32)
  commentId: M:TMG.DataUtility.StringList.CopyTo(System.String[],System.Int32)
  id: CopyTo(System.String[],System.Int32)
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: CopyTo(String[], Int32)
  nameWithType: StringList.CopyTo(String[], Int32)
  fullName: TMG.DataUtility.StringList.CopyTo(System.String[], System.Int32)
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: CopyTo
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 132
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public void CopyTo(string[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.String[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As String(), arrayIndex As Integer)
  overload: TMG.DataUtility.StringList.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.String}.CopyTo(System.String[],System.Int32)
  nameWithType.vb: StringList.CopyTo(String(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TMG.DataUtility.StringList.CopyTo(System.String(), System.Int32)
  name.vb: CopyTo(String(), Int32)
- uid: TMG.DataUtility.StringList.Count
  commentId: P:TMG.DataUtility.StringList.Count
  id: Count
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: StringList.Count
  fullName: TMG.DataUtility.StringList.Count
  type: Property
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Count
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 137
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: TMG.DataUtility.StringList.Count*
  implements:
  - System.Collections.Generic.ICollection{System.String}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.DataUtility.StringList.IsReadOnly
  commentId: P:TMG.DataUtility.StringList.IsReadOnly
  id: IsReadOnly
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: StringList.IsReadOnly
  fullName: TMG.DataUtility.StringList.IsReadOnly
  type: Property
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IsReadOnly
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 139
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: TMG.DataUtility.StringList.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.String}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.DataUtility.StringList.Remove(System.String)
  commentId: M:TMG.DataUtility.StringList.Remove(System.String)
  id: Remove(System.String)
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: StringList.Remove(String)
  fullName: TMG.DataUtility.StringList.Remove(System.String)
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Remove
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 141
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public bool Remove(string item)
    parameters:
    - id: item
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As String) As Boolean
  overload: TMG.DataUtility.StringList.Remove*
  implements:
  - System.Collections.Generic.ICollection{System.String}.Remove(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.DataUtility.StringList.GetEnumerator
  commentId: M:TMG.DataUtility.StringList.GetEnumerator
  id: GetEnumerator
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: StringList.GetEnumerator()
  fullName: TMG.DataUtility.StringList.GetEnumerator()
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetEnumerator
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 146
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public IEnumerator<string> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.String}
    content.vb: Public Function GetEnumerator As IEnumerator(Of String)
  overload: TMG.DataUtility.StringList.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.String}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.DataUtility.StringList.System#Collections#IEnumerable#GetEnumerator
  commentId: M:TMG.DataUtility.StringList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: StringList.IEnumerable.GetEnumerator()
  fullName: TMG.DataUtility.StringList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 151
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: TMG.DataUtility.StringList.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: StringList.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: TMG.DataUtility.StringList.ToArray
  commentId: M:TMG.DataUtility.StringList.ToArray
  id: ToArray
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: StringList.ToArray()
  fullName: TMG.DataUtility.StringList.ToArray()
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ToArray
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 156
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public string[] ToArray()
    return:
      type: System.String[]
    content.vb: Public Function ToArray As String()
  overload: TMG.DataUtility.StringList.ToArray*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.DataUtility.StringList.ToString
  commentId: M:TMG.DataUtility.StringList.ToString
  id: ToString
  parent: TMG.DataUtility.StringList
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: StringList.ToString()
  fullName: TMG.DataUtility.StringList.ToString()
  type: Method
  source:
    remote:
      path: Code/TMGInterfaces/DataUtility/StringList.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ToString
    path: ../../../XTMF/XTMF/Code/TMGInterfaces/DataUtility/StringList.cs
    startLine: 161
  assemblies:
  - TMGInterfaces
  namespace: TMG.DataUtility
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: TMG.DataUtility.StringList.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: TMG.DataUtility
  commentId: N:TMG.DataUtility
  name: TMG.DataUtility
  nameWithType: TMG.DataUtility
  fullName: TMG.DataUtility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.String}
  commentId: T:System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: TMG.DataUtility.StringList.TryParse*
  commentId: Overload:TMG.DataUtility.StringList.TryParse
  name: TryParse
  nameWithType: StringList.TryParse
  fullName: TMG.DataUtility.StringList.TryParse
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TMG.DataUtility.StringList
  commentId: T:TMG.DataUtility.StringList
  parent: TMG.DataUtility
  name: StringList
  nameWithType: StringList
  fullName: TMG.DataUtility.StringList
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TMG.DataUtility.StringList.IndexOf*
  commentId: Overload:TMG.DataUtility.StringList.IndexOf
  name: IndexOf
  nameWithType: StringList.IndexOf
  fullName: TMG.DataUtility.StringList.IndexOf
- uid: System.Collections.Generic.IList{System.String}.IndexOf(System.String)
  commentId: M:System.Collections.Generic.IList{System.String}.IndexOf(System.String)
  parent: System.Collections.Generic.IList{System.String}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(String)
  nameWithType: IList<String>.IndexOf(String)
  fullName: System.Collections.Generic.IList<System.String>.IndexOf(System.String)
  nameWithType.vb: IList(Of String).IndexOf(String)
  fullName.vb: System.Collections.Generic.IList(Of System.String).IndexOf(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<String>.IndexOf
    fullName: System.Collections.Generic.IList<System.String>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of String).IndexOf
    fullName: System.Collections.Generic.IList(Of System.String).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.Insert*
  commentId: Overload:TMG.DataUtility.StringList.Insert
  name: Insert
  nameWithType: StringList.Insert
  fullName: TMG.DataUtility.StringList.Insert
- uid: System.Collections.Generic.IList{System.String}.Insert(System.Int32,System.String)
  commentId: M:System.Collections.Generic.IList{System.String}.Insert(System.Int32,System.String)
  parent: System.Collections.Generic.IList{System.String}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, String)
  nameWithType: IList<String>.Insert(Int32, String)
  fullName: System.Collections.Generic.IList<System.String>.Insert(System.Int32, System.String)
  nameWithType.vb: IList(Of String).Insert(Int32, String)
  fullName.vb: System.Collections.Generic.IList(Of System.String).Insert(System.Int32, System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<String>.Insert
    fullName: System.Collections.Generic.IList<System.String>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of String).Insert
    fullName: System.Collections.Generic.IList(Of System.String).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.RemoveAt*
  commentId: Overload:TMG.DataUtility.StringList.RemoveAt
  name: RemoveAt
  nameWithType: StringList.RemoveAt
  fullName: TMG.DataUtility.StringList.RemoveAt
- uid: System.Collections.Generic.IList{System.String}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{System.String}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{System.String}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<String>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<System.String>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of String).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of System.String).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<String>.RemoveAt
    fullName: System.Collections.Generic.IList<System.String>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of String).RemoveAt
    fullName: System.Collections.Generic.IList(Of System.String).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.Item*
  commentId: Overload:TMG.DataUtility.StringList.Item
  name: Item
  nameWithType: StringList.Item
  fullName: TMG.DataUtility.StringList.Item
- uid: System.Collections.Generic.IList{System.String}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{System.String}.Item(System.Int32)
  parent: System.Collections.Generic.IList{System.String}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<String>.Item[Int32]
  fullName: System.Collections.Generic.IList<System.String>.Item[System.Int32]
  nameWithType.vb: IList(Of String).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of System.String).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<String>.Item
    fullName: System.Collections.Generic.IList<System.String>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of String).Item
    fullName: System.Collections.Generic.IList(Of System.String).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.Add*
  commentId: Overload:TMG.DataUtility.StringList.Add
  name: Add
  nameWithType: StringList.Add
  fullName: TMG.DataUtility.StringList.Add
- uid: System.Collections.Generic.ICollection{System.String}.Add(System.String)
  commentId: M:System.Collections.Generic.ICollection{System.String}.Add(System.String)
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(String)
  nameWithType: ICollection<String>.Add(String)
  fullName: System.Collections.Generic.ICollection<System.String>.Add(System.String)
  nameWithType.vb: ICollection(Of String).Add(String)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String).Add(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<String>.Add
    fullName: System.Collections.Generic.ICollection<System.String>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of String).Add
    fullName: System.Collections.Generic.ICollection(Of System.String).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.Clear*
  commentId: Overload:TMG.DataUtility.StringList.Clear
  name: Clear
  nameWithType: StringList.Clear
  fullName: TMG.DataUtility.StringList.Clear
- uid: System.Collections.Generic.ICollection{System.String}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.String}.Clear
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<String>.Clear()
  fullName: System.Collections.Generic.ICollection<System.String>.Clear()
  nameWithType.vb: ICollection(Of String).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.String).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<String>.Clear
    fullName: System.Collections.Generic.ICollection<System.String>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of String).Clear
    fullName: System.Collections.Generic.ICollection(Of System.String).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.Contains*
  commentId: Overload:TMG.DataUtility.StringList.Contains
  name: Contains
  nameWithType: StringList.Contains
  fullName: TMG.DataUtility.StringList.Contains
- uid: System.Collections.Generic.ICollection{System.String}.Contains(System.String)
  commentId: M:System.Collections.Generic.ICollection{System.String}.Contains(System.String)
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(String)
  nameWithType: ICollection<String>.Contains(String)
  fullName: System.Collections.Generic.ICollection<System.String>.Contains(System.String)
  nameWithType.vb: ICollection(Of String).Contains(String)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String).Contains(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<String>.Contains
    fullName: System.Collections.Generic.ICollection<System.String>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of String).Contains
    fullName: System.Collections.Generic.ICollection(Of System.String).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.CopyTo*
  commentId: Overload:TMG.DataUtility.StringList.CopyTo
  name: CopyTo
  nameWithType: StringList.CopyTo
  fullName: TMG.DataUtility.StringList.CopyTo
- uid: System.Collections.Generic.ICollection{System.String}.CopyTo(System.String[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.String}.CopyTo(System.String[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(String[], Int32)
  nameWithType: ICollection<String>.CopyTo(String[], Int32)
  fullName: System.Collections.Generic.ICollection<System.String>.CopyTo(System.String[], System.Int32)
  nameWithType.vb: ICollection(Of String).CopyTo(String(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String).CopyTo(System.String(), System.Int32)
  name.vb: CopyTo(String(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<String>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.String>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of String).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.String).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.Count*
  commentId: Overload:TMG.DataUtility.StringList.Count
  name: Count
  nameWithType: StringList.Count
  fullName: TMG.DataUtility.StringList.Count
- uid: System.Collections.Generic.ICollection{System.String}.Count
  commentId: P:System.Collections.Generic.ICollection{System.String}.Count
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<String>.Count
  fullName: System.Collections.Generic.ICollection<System.String>.Count
  nameWithType.vb: ICollection(Of String).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.String).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: TMG.DataUtility.StringList.IsReadOnly*
  commentId: Overload:TMG.DataUtility.StringList.IsReadOnly
  name: IsReadOnly
  nameWithType: StringList.IsReadOnly
  fullName: TMG.DataUtility.StringList.IsReadOnly
- uid: System.Collections.Generic.ICollection{System.String}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.String}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<String>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.String>.IsReadOnly
  nameWithType.vb: ICollection(Of String).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.String).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: TMG.DataUtility.StringList.Remove*
  commentId: Overload:TMG.DataUtility.StringList.Remove
  name: Remove
  nameWithType: StringList.Remove
  fullName: TMG.DataUtility.StringList.Remove
- uid: System.Collections.Generic.ICollection{System.String}.Remove(System.String)
  commentId: M:System.Collections.Generic.ICollection{System.String}.Remove(System.String)
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(String)
  nameWithType: ICollection<String>.Remove(String)
  fullName: System.Collections.Generic.ICollection<System.String>.Remove(System.String)
  nameWithType.vb: ICollection(Of String).Remove(String)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String).Remove(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<String>.Remove
    fullName: System.Collections.Generic.ICollection<System.String>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of String).Remove
    fullName: System.Collections.Generic.ICollection(Of System.String).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.GetEnumerator*
  commentId: Overload:TMG.DataUtility.StringList.GetEnumerator
  name: GetEnumerator
  nameWithType: StringList.GetEnumerator
  fullName: TMG.DataUtility.StringList.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.String}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.String}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.String}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<String>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.String>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of String).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<String>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.String>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of String).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.String).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.String}
  commentId: T:System.Collections.Generic.IEnumerator{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<String>
  nameWithType: IEnumerator<String>
  fullName: System.Collections.Generic.IEnumerator<System.String>
  nameWithType.vb: IEnumerator(Of String)
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.String)
  name.vb: IEnumerator(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:TMG.DataUtility.StringList.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: StringList.IEnumerable.GetEnumerator
  fullName: TMG.DataUtility.StringList.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: StringList.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: TMG.DataUtility.StringList.ToArray*
  commentId: Overload:TMG.DataUtility.StringList.ToArray
  name: ToArray
  nameWithType: StringList.ToArray
  fullName: TMG.DataUtility.StringList.ToArray
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.DataUtility.StringList.ToString*
  commentId: Overload:TMG.DataUtility.StringList.ToString
  name: ToString
  nameWithType: StringList.ToString
  fullName: TMG.DataUtility.StringList.ToString
