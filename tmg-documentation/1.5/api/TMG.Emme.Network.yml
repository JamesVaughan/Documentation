### YamlMime:ManagedReference
items:
- uid: TMG.Emme.Network
  commentId: T:TMG.Emme.Network
  id: Network
  parent: TMG.Emme
  children:
  - TMG.Emme.Network.#ctor
  - TMG.Emme.Network.#ctor(System.String)
  - TMG.Emme.Network.Dispose
  - TMG.Emme.Network.Dispose(System.Boolean)
  - TMG.Emme.Network.GetData(Datastructure.SparseArray{TMG.Emme.Node}@,Datastructure.SparseTwinIndex{TMG.Emme.Link}@)
  - TMG.Emme.Network.GetLinks
  - TMG.Emme.Network.GetNodes
  - TMG.Emme.Network.LoadNetwork(System.String)
  - TMG.Emme.Network.SaveModFile(System.String)
  - TMG.Emme.Network.UpdateLinks(System.Func{TMG.Emme.Link,System.Boolean},System.Func{TMG.Emme.Link,TMG.Emme.Link})
  langs:
  - csharp
  - vb
  name: Network
  nameWithType: Network
  fullName: TMG.Emme.Network
  type: Class
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Network
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 27
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  syntax:
    content: 'public class Network : IDisposable'
    content.vb: >-
      Public Class Network
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TMG.Emme.Network.#ctor
  commentId: M:TMG.Emme.Network.#ctor
  id: '#ctor'
  parent: TMG.Emme.Network
  langs:
  - csharp
  - vb
  name: Network()
  nameWithType: Network.Network()
  fullName: TMG.Emme.Network.Network()
  type: Constructor
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: .ctor
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 36
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  summary: "\nCreate a blank network\n"
  example: []
  syntax:
    content: public Network()
    content.vb: Public Sub New
  overload: TMG.Emme.Network.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Network.#ctor(System.String)
  commentId: M:TMG.Emme.Network.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: TMG.Emme.Network
  langs:
  - csharp
  - vb
  name: Network(String)
  nameWithType: Network.Network(String)
  fullName: TMG.Emme.Network.Network(System.String)
  type: Constructor
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: .ctor
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 44
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  summary: "\nCreate a new network from a 211 file\n"
  example: []
  syntax:
    content: public Network(string fileName211)
    parameters:
    - id: fileName211
      type: System.String
      description: The 211 file to create the network from
    content.vb: Public Sub New(fileName211 As String)
  overload: TMG.Emme.Network.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Network.Dispose
  commentId: M:TMG.Emme.Network.Dispose
  id: Dispose
  parent: TMG.Emme.Network
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Network.Dispose()
  fullName: TMG.Emme.Network.Dispose()
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Dispose
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 50
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: TMG.Emme.Network.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Network.Dispose(System.Boolean)
  commentId: M:TMG.Emme.Network.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: TMG.Emme.Network
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: Network.Dispose(Boolean)
  fullName: TMG.Emme.Network.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Dispose
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 56
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  syntax:
    content: protected virtual void Dispose(bool all)
    parameters:
    - id: all
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(all As Boolean)
  overload: TMG.Emme.Network.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TMG.Emme.Network.GetData(Datastructure.SparseArray{TMG.Emme.Node}@,Datastructure.SparseTwinIndex{TMG.Emme.Link}@)
  commentId: M:TMG.Emme.Network.GetData(Datastructure.SparseArray{TMG.Emme.Node}@,Datastructure.SparseTwinIndex{TMG.Emme.Link}@)
  id: GetData(Datastructure.SparseArray{TMG.Emme.Node}@,Datastructure.SparseTwinIndex{TMG.Emme.Link}@)
  parent: TMG.Emme.Network
  langs:
  - csharp
  - vb
  name: GetData(out SparseArray<Node>, out SparseTwinIndex<Link>)
  nameWithType: Network.GetData(out SparseArray<Node>, out SparseTwinIndex<Link>)
  fullName: TMG.Emme.Network.GetData(out Datastructure.SparseArray<TMG.Emme.Node>, out Datastructure.SparseTwinIndex<TMG.Emme.Link>)
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetData
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 62
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  syntax:
    content: public bool GetData(out SparseArray<Node> nodes, out SparseTwinIndex<Link> links)
    parameters:
    - id: nodes
      type: Datastructure.SparseArray{TMG.Emme.Node}
    - id: links
      type: Datastructure.SparseTwinIndex{TMG.Emme.Link}
    return:
      type: System.Boolean
    content.vb: Public Function GetData(ByRef nodes As SparseArray(Of Node), ByRef links As SparseTwinIndex(Of Link)) As Boolean
  overload: TMG.Emme.Network.GetData*
  nameWithType.vb: Network.GetData(ByRef SparseArray(Of Node), ByRef SparseTwinIndex(Of Link))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TMG.Emme.Network.GetData(ByRef Datastructure.SparseArray(Of TMG.Emme.Node), ByRef Datastructure.SparseTwinIndex(Of TMG.Emme.Link))
  name.vb: GetData(ByRef SparseArray(Of Node), ByRef SparseTwinIndex(Of Link))
- uid: TMG.Emme.Network.GetLinks
  commentId: M:TMG.Emme.Network.GetLinks
  id: GetLinks
  parent: TMG.Emme.Network
  langs:
  - csharp
  - vb
  name: GetLinks()
  nameWithType: Network.GetLinks()
  fullName: TMG.Emme.Network.GetLinks()
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetLinks
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 69
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  syntax:
    content: public SparseTwinIndex<Link> GetLinks()
    return:
      type: Datastructure.SparseTwinIndex{TMG.Emme.Link}
    content.vb: Public Function GetLinks As SparseTwinIndex(Of Link)
  overload: TMG.Emme.Network.GetLinks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Network.GetNodes
  commentId: M:TMG.Emme.Network.GetNodes
  id: GetNodes
  parent: TMG.Emme.Network
  langs:
  - csharp
  - vb
  name: GetNodes()
  nameWithType: Network.GetNodes()
  fullName: TMG.Emme.Network.GetNodes()
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetNodes
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 74
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  syntax:
    content: public SparseArray<Node> GetNodes()
    return:
      type: Datastructure.SparseArray{TMG.Emme.Node}
    content.vb: Public Function GetNodes As SparseArray(Of Node)
  overload: TMG.Emme.Network.GetNodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Network.LoadNetwork(System.String)
  commentId: M:TMG.Emme.Network.LoadNetwork(System.String)
  id: LoadNetwork(System.String)
  parent: TMG.Emme.Network
  langs:
  - csharp
  - vb
  name: LoadNetwork(String)
  nameWithType: Network.LoadNetwork(String)
  fullName: TMG.Emme.Network.LoadNetwork(System.String)
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: LoadNetwork
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 83
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  summary: "\nLoad the network from a 211 file\n"
  example: []
  syntax:
    content: public void LoadNetwork(string fileName211)
    parameters:
    - id: fileName211
      type: System.String
      description: ''
    content.vb: Public Sub LoadNetwork(fileName211 As String)
  overload: TMG.Emme.Network.LoadNetwork*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Network.SaveModFile(System.String)
  commentId: M:TMG.Emme.Network.SaveModFile(System.String)
  id: SaveModFile(System.String)
  parent: TMG.Emme.Network
  langs:
  - csharp
  - vb
  name: SaveModFile(String)
  nameWithType: Network.SaveModFile(String)
  fullName: TMG.Emme.Network.SaveModFile(System.String)
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: SaveModFile
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 201
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  syntax:
    content: public void SaveModFile(string fileName)
    parameters:
    - id: fileName
      type: System.String
    content.vb: Public Sub SaveModFile(fileName As String)
  overload: TMG.Emme.Network.SaveModFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Network.UpdateLinks(System.Func{TMG.Emme.Link,System.Boolean},System.Func{TMG.Emme.Link,TMG.Emme.Link})
  commentId: M:TMG.Emme.Network.UpdateLinks(System.Func{TMG.Emme.Link,System.Boolean},System.Func{TMG.Emme.Link,TMG.Emme.Link})
  id: UpdateLinks(System.Func{TMG.Emme.Link,System.Boolean},System.Func{TMG.Emme.Link,TMG.Emme.Link})
  parent: TMG.Emme.Network
  langs:
  - csharp
  - vb
  name: UpdateLinks(Func<Link, Boolean>, Func<Link, Link>)
  nameWithType: Network.UpdateLinks(Func<Link, Boolean>, Func<Link, Link>)
  fullName: TMG.Emme.Network.UpdateLinks(System.Func<TMG.Emme.Link, System.Boolean>, System.Func<TMG.Emme.Link, TMG.Emme.Link>)
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Network.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: UpdateLinks
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Network.cs
    startLine: 229
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme
  syntax:
    content: public void UpdateLinks(Func<Link, bool> condition, Func<Link, Link> updateFunction)
    parameters:
    - id: condition
      type: System.Func{TMG.Emme.Link,System.Boolean}
    - id: updateFunction
      type: System.Func{TMG.Emme.Link,TMG.Emme.Link}
    content.vb: Public Sub UpdateLinks(condition As Func(Of Link, Boolean), updateFunction As Func(Of Link, Link))
  overload: TMG.Emme.Network.UpdateLinks*
  nameWithType.vb: Network.UpdateLinks(Func(Of Link, Boolean), Func(Of Link, Link))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TMG.Emme.Network.UpdateLinks(System.Func(Of TMG.Emme.Link, System.Boolean), System.Func(Of TMG.Emme.Link, TMG.Emme.Link))
  name.vb: UpdateLinks(Func(Of Link, Boolean), Func(Of Link, Link))
references:
- uid: TMG.Emme
  commentId: N:TMG.Emme
  name: TMG.Emme
  nameWithType: TMG.Emme
  fullName: TMG.Emme
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TMG.Emme.Network.#ctor*
  commentId: Overload:TMG.Emme.Network.#ctor
  name: Network
  nameWithType: Network.Network
  fullName: TMG.Emme.Network.Network
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TMG.Emme.Network.Dispose*
  commentId: Overload:TMG.Emme.Network.Dispose
  name: Dispose
  nameWithType: Network.Dispose
  fullName: TMG.Emme.Network.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TMG.Emme.Network.GetData*
  commentId: Overload:TMG.Emme.Network.GetData
  name: GetData
  nameWithType: Network.GetData
  fullName: TMG.Emme.Network.GetData
- uid: Datastructure.SparseArray{TMG.Emme.Node}
  commentId: T:Datastructure.SparseArray{TMG.Emme.Node}
  parent: Datastructure
  definition: Datastructure.SparseArray`1
  name: SparseArray<Node>
  nameWithType: SparseArray<Node>
  fullName: Datastructure.SparseArray<TMG.Emme.Node>
  nameWithType.vb: SparseArray(Of Node)
  fullName.vb: Datastructure.SparseArray(Of TMG.Emme.Node)
  name.vb: SparseArray(Of Node)
  spec.csharp:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.Emme.Node
    name: Node
    nameWithType: Node
    fullName: TMG.Emme.Node
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.Emme.Node
    name: Node
    nameWithType: Node
    fullName: TMG.Emme.Node
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure.SparseTwinIndex{TMG.Emme.Link}
  commentId: T:Datastructure.SparseTwinIndex{TMG.Emme.Link}
  parent: Datastructure
  definition: Datastructure.SparseTwinIndex`1
  name: SparseTwinIndex<Link>
  nameWithType: SparseTwinIndex<Link>
  fullName: Datastructure.SparseTwinIndex<TMG.Emme.Link>
  nameWithType.vb: SparseTwinIndex(Of Link)
  fullName.vb: Datastructure.SparseTwinIndex(Of TMG.Emme.Link)
  name.vb: SparseTwinIndex(Of Link)
  spec.csharp:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.Emme.Link
    name: Link
    nameWithType: Link
    fullName: TMG.Emme.Link
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.Emme.Link
    name: Link
    nameWithType: Link
    fullName: TMG.Emme.Link
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure.SparseArray`1
  commentId: T:Datastructure.SparseArray`1
  name: SparseArray<T>
  nameWithType: SparseArray<T>
  fullName: Datastructure.SparseArray<T>
  nameWithType.vb: SparseArray(Of T)
  fullName.vb: Datastructure.SparseArray(Of T)
  name.vb: SparseArray(Of T)
  spec.csharp:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure
  commentId: N:Datastructure
  name: Datastructure
  nameWithType: Datastructure
  fullName: Datastructure
- uid: Datastructure.SparseTwinIndex`1
  commentId: T:Datastructure.SparseTwinIndex`1
  name: SparseTwinIndex<T>
  nameWithType: SparseTwinIndex<T>
  fullName: Datastructure.SparseTwinIndex<T>
  nameWithType.vb: SparseTwinIndex(Of T)
  fullName.vb: Datastructure.SparseTwinIndex(Of T)
  name.vb: SparseTwinIndex(Of T)
  spec.csharp:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Emme.Network.GetLinks*
  commentId: Overload:TMG.Emme.Network.GetLinks
  name: GetLinks
  nameWithType: Network.GetLinks
  fullName: TMG.Emme.Network.GetLinks
- uid: TMG.Emme.Network.GetNodes*
  commentId: Overload:TMG.Emme.Network.GetNodes
  name: GetNodes
  nameWithType: Network.GetNodes
  fullName: TMG.Emme.Network.GetNodes
- uid: TMG.Emme.Network.LoadNetwork*
  commentId: Overload:TMG.Emme.Network.LoadNetwork
  name: LoadNetwork
  nameWithType: Network.LoadNetwork
  fullName: TMG.Emme.Network.LoadNetwork
- uid: TMG.Emme.Network.SaveModFile*
  commentId: Overload:TMG.Emme.Network.SaveModFile
  name: SaveModFile
  nameWithType: Network.SaveModFile
  fullName: TMG.Emme.Network.SaveModFile
- uid: TMG.Emme.Network.UpdateLinks*
  commentId: Overload:TMG.Emme.Network.UpdateLinks
  name: UpdateLinks
  nameWithType: Network.UpdateLinks
  fullName: TMG.Emme.Network.UpdateLinks
- uid: System.Func{TMG.Emme.Link,System.Boolean}
  commentId: T:System.Func{TMG.Emme.Link,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Link, Boolean>
  nameWithType: Func<Link, Boolean>
  fullName: System.Func<TMG.Emme.Link, System.Boolean>
  nameWithType.vb: Func(Of Link, Boolean)
  fullName.vb: System.Func(Of TMG.Emme.Link, System.Boolean)
  name.vb: Func(Of Link, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.Emme.Link
    name: Link
    nameWithType: Link
    fullName: TMG.Emme.Link
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.Emme.Link
    name: Link
    nameWithType: Link
    fullName: TMG.Emme.Link
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{TMG.Emme.Link,TMG.Emme.Link}
  commentId: T:System.Func{TMG.Emme.Link,TMG.Emme.Link}
  parent: System
  definition: System.Func`2
  name: Func<Link, Link>
  nameWithType: Func<Link, Link>
  fullName: System.Func<TMG.Emme.Link, TMG.Emme.Link>
  nameWithType.vb: Func(Of Link, Link)
  fullName.vb: System.Func(Of TMG.Emme.Link, TMG.Emme.Link)
  name.vb: Func(Of Link, Link)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.Emme.Link
    name: Link
    nameWithType: Link
    fullName: TMG.Emme.Link
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.Emme.Link
    name: Link
    nameWithType: Link
    fullName: TMG.Emme.Link
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.Emme.Link
    name: Link
    nameWithType: Link
    fullName: TMG.Emme.Link
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.Emme.Link
    name: Link
    nameWithType: Link
    fullName: TMG.Emme.Link
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
