### YamlMime:ManagedReference
items:
- uid: XTMF.IProgressReport
  commentId: T:XTMF.IProgressReport
  id: IProgressReport
  parent: XTMF
  children:
  - XTMF.IProgressReport.Colour
  - XTMF.IProgressReport.GetProgress
  - XTMF.IProgressReport.Name
  langs:
  - csharp
  - vb
  name: IProgressReport
  nameWithType: IProgressReport
  fullName: XTMF.IProgressReport
  type: Interface
  source:
    remote:
      path: Code/XTMFInterfaces/Interfaces/IProgressReport.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IProgressReport
    path: ../../../XTMF/XTMF/Code/XTMFInterfaces/Interfaces/IProgressReport.cs
    startLine: 26
  assemblies:
  - XTMFInterfaces
  namespace: XTMF
  summary: "\nAn IProgressReport helps provide information\nto the user about how the system is\n"
  example: []
  syntax:
    content: public interface IProgressReport
    content.vb: Public Interface IProgressReport
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: XTMF.IProgressReport.Colour
  commentId: P:XTMF.IProgressReport.Colour
  id: Colour
  parent: XTMF.IProgressReport
  langs:
  - csharp
  - vb
  name: Colour
  nameWithType: IProgressReport.Colour
  fullName: XTMF.IProgressReport.Colour
  type: Property
  source:
    remote:
      path: Code/XTMFInterfaces/Interfaces/IProgressReport.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Colour
    path: ../../../XTMF/XTMF/Code/XTMFInterfaces/Interfaces/IProgressReport.cs
    startLine: 33
  assemblies:
  - XTMFInterfaces
  namespace: XTMF
  summary: "\nA colour attribute for this progress report.\nIn R,G,B format.\n"
  remarks: Typically this is for the colour of a client&apos;s progress bar
  example: []
  syntax:
    content: Tuple<byte, byte, byte> Colour { get; set; }
    parameters: []
    return:
      type: System.Tuple{System.Byte,System.Byte,System.Byte}
    content.vb: Property Colour As Tuple(Of Byte, Byte, Byte)
  overload: XTMF.IProgressReport.Colour*
  modifiers.csharp:
  - get
  - set
- uid: XTMF.IProgressReport.GetProgress
  commentId: P:XTMF.IProgressReport.GetProgress
  id: GetProgress
  parent: XTMF.IProgressReport
  langs:
  - csharp
  - vb
  name: GetProgress
  nameWithType: IProgressReport.GetProgress
  fullName: XTMF.IProgressReport.GetProgress
  type: Property
  source:
    remote:
      path: Code/XTMFInterfaces/Interfaces/IProgressReport.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetProgress
    path: ../../../XTMF/XTMF/Code/XTMFInterfaces/Interfaces/IProgressReport.cs
    startLine: 38
  assemblies:
  - XTMFInterfaces
  namespace: XTMF
  summary: "\nA function that provides the current progress to report.\n"
  example: []
  syntax:
    content: Func<float> GetProgress { get; }
    parameters: []
    return:
      type: System.Func{System.Single}
    content.vb: ReadOnly Property GetProgress As Func(Of Single)
  overload: XTMF.IProgressReport.GetProgress*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: XTMF.IProgressReport.Name
  commentId: P:XTMF.IProgressReport.Name
  id: Name
  parent: XTMF.IProgressReport
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IProgressReport.Name
  fullName: XTMF.IProgressReport.Name
  type: Property
  source:
    remote:
      path: Code/XTMFInterfaces/Interfaces/IProgressReport.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Name
    path: ../../../XTMF/XTMF/Code/XTMFInterfaces/Interfaces/IProgressReport.cs
    startLine: 43
  assemblies:
  - XTMFInterfaces
  namespace: XTMF
  summary: "\nThe name of this progress report.\n"
  example: []
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Name As String
  overload: XTMF.IProgressReport.Name*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: XTMF
  commentId: N:XTMF
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: XTMF.IProgressReport.Colour*
  commentId: Overload:XTMF.IProgressReport.Colour
  name: Colour
  nameWithType: IProgressReport.Colour
  fullName: XTMF.IProgressReport.Colour
- uid: System.Tuple{System.Byte,System.Byte,System.Byte}
  commentId: T:System.Tuple{System.Byte,System.Byte,System.Byte}
  parent: System
  definition: System.Tuple`3
  name: Tuple<Byte, Byte, Byte>
  nameWithType: Tuple<Byte, Byte, Byte>
  fullName: System.Tuple<System.Byte, System.Byte, System.Byte>
  nameWithType.vb: Tuple(Of Byte, Byte, Byte)
  fullName.vb: System.Tuple(Of System.Byte, System.Byte, System.Byte)
  name.vb: Tuple(Of Byte, Byte, Byte)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: XTMF.IProgressReport.GetProgress*
  commentId: Overload:XTMF.IProgressReport.GetProgress
  name: GetProgress
  nameWithType: IProgressReport.GetProgress
  fullName: XTMF.IProgressReport.GetProgress
- uid: System.Func{System.Single}
  commentId: T:System.Func{System.Single}
  parent: System
  definition: System.Func`1
  name: Func<Single>
  nameWithType: Func<Single>
  fullName: System.Func<System.Single>
  nameWithType.vb: Func(Of Single)
  fullName.vb: System.Func(Of System.Single)
  name.vb: Func(Of Single)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IProgressReport.Name*
  commentId: Overload:XTMF.IProgressReport.Name
  name: Name
  nameWithType: IProgressReport.Name
  fullName: XTMF.IProgressReport.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
