### YamlMime:ManagedReference
items:
- uid: XTMF.ModelSystemController
  commentId: T:XTMF.ModelSystemController
  id: ModelSystemController
  parent: XTMF
  children:
  - XTMF.ModelSystemController.#ctor(XTMF.XTMFRuntime)
  - XTMF.ModelSystemController.CloneModelSystem(XTMF.ModelSystem,System.String,System.String@)
  - XTMF.ModelSystemController.CreateModelSystem(System.String)
  - XTMF.ModelSystemController.Delete(System.String)
  - XTMF.ModelSystemController.Delete(XTMF.ModelSystem,System.String@)
  - XTMF.ModelSystemController.EditModelSystem(XTMF.ModelSystem)
  - XTMF.ModelSystemController.ExportModelSystem(XTMF.IModelSystem,System.String,System.String@)
  - XTMF.ModelSystemController.ExportModelSystemAsString(XTMF.ModelSystem,System.String@,System.String@)
  - XTMF.ModelSystemController.GetModelSystems
  - XTMF.ModelSystemController.ImportModelSystem(System.String,System.Boolean,System.String@)
  - XTMF.ModelSystemController.Load(System.String)
  - XTMF.ModelSystemController.LoadDetachedModelSystemFromFile(System.String,XTMF.ModelSystem@,System.String@)
  - XTMF.ModelSystemController.LoadDetachedModelSystemFromString(System.String,XTMF.ModelSystem@,System.String@)
  - XTMF.ModelSystemController.LoadFromRunFile(System.String)
  - XTMF.ModelSystemController.LoadOrCreate(System.String)
  - XTMF.ModelSystemController.Rename(XTMF.ModelSystem,System.String,System.String@)
  - XTMF.ModelSystemController.ValidateModelSystemName(System.String,System.String@)
  langs:
  - csharp
  - vb
  name: ModelSystemController
  nameWithType: ModelSystemController
  fullName: XTMF.ModelSystemController
  type: Class
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ModelSystemController
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 26
  assemblies:
  - XTMF
  namespace: XTMF
  syntax:
    content: public class ModelSystemController
    content.vb: Public Class ModelSystemController
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: XTMF.ModelSystemController.#ctor(XTMF.XTMFRuntime)
  commentId: M:XTMF.ModelSystemController.#ctor(XTMF.XTMFRuntime)
  id: '#ctor(XTMF.XTMFRuntime)'
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: ModelSystemController(XTMFRuntime)
  nameWithType: ModelSystemController.ModelSystemController(XTMFRuntime)
  fullName: XTMF.ModelSystemController.ModelSystemController(XTMF.XTMFRuntime)
  type: Constructor
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: .ctor
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 30
  assemblies:
  - XTMF
  namespace: XTMF
  syntax:
    content: public ModelSystemController(XTMFRuntime runtime)
    parameters:
    - id: runtime
      type: XTMF.XTMFRuntime
    content.vb: Public Sub New(runtime As XTMFRuntime)
  overload: XTMF.ModelSystemController.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: XTMF.ModelSystemController.CreateModelSystem(System.String)
  commentId: M:XTMF.ModelSystemController.CreateModelSystem(System.String)
  id: CreateModelSystem(System.String)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: CreateModelSystem(String)
  nameWithType: ModelSystemController.CreateModelSystem(String)
  fullName: XTMF.ModelSystemController.CreateModelSystem(System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: CreateModelSystem
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 60
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nCreate a new model system\n"
  example: []
  syntax:
    content: public ModelSystem CreateModelSystem(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the model system, must not be empty
    return:
      type: XTMF.ModelSystem
      description: The model system, null if it failed.
    content.vb: Public Function CreateModelSystem(name As String) As ModelSystem
  overload: XTMF.ModelSystemController.CreateModelSystem*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: XTMF.ModelSystemController.LoadDetachedModelSystemFromString(System.String,XTMF.ModelSystem@,System.String@)
  commentId: M:XTMF.ModelSystemController.LoadDetachedModelSystemFromString(System.String,XTMF.ModelSystem@,System.String@)
  id: LoadDetachedModelSystemFromString(System.String,XTMF.ModelSystem@,System.String@)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: LoadDetachedModelSystemFromString(String, out ModelSystem, ref String)
  nameWithType: ModelSystemController.LoadDetachedModelSystemFromString(String, out ModelSystem, ref String)
  fullName: XTMF.ModelSystemController.LoadDetachedModelSystemFromString(System.String, out XTMF.ModelSystem, ref System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: LoadDetachedModelSystemFromString
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 92
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nLoad a model system that has been saved into a string\n"
  example: []
  syntax:
    content: public bool LoadDetachedModelSystemFromString(string modelSystemAsText, out ModelSystem modelSystem, ref string error)
    parameters:
    - id: modelSystemAsText
      type: System.String
      description: The model system stored as a string.
    - id: modelSystem
      type: XTMF.ModelSystem
      description: The model system loaded
    - id: error
      type: System.String
      description: A description of the error if the operation fails.
    return:
      type: System.Boolean
      description: True if the model system was loaded, false otherwise with a description of the failure in error.
    content.vb: Public Function LoadDetachedModelSystemFromString(modelSystemAsText As String, ByRef modelSystem As ModelSystem, ByRef error As String) As Boolean
  overload: XTMF.ModelSystemController.LoadDetachedModelSystemFromString*
  nameWithType.vb: ModelSystemController.LoadDetachedModelSystemFromString(String, ByRef ModelSystem, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.ModelSystemController.LoadDetachedModelSystemFromString(System.String, ByRef XTMF.ModelSystem, ByRef System.String)
  name.vb: LoadDetachedModelSystemFromString(String, ByRef ModelSystem, ByRef String)
- uid: XTMF.ModelSystemController.LoadDetachedModelSystemFromFile(System.String,XTMF.ModelSystem@,System.String@)
  commentId: M:XTMF.ModelSystemController.LoadDetachedModelSystemFromFile(System.String,XTMF.ModelSystem@,System.String@)
  id: LoadDetachedModelSystemFromFile(System.String,XTMF.ModelSystem@,System.String@)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: LoadDetachedModelSystemFromFile(String, out ModelSystem, ref String)
  nameWithType: ModelSystemController.LoadDetachedModelSystemFromFile(String, out ModelSystem, ref String)
  fullName: XTMF.ModelSystemController.LoadDetachedModelSystemFromFile(System.String, out XTMF.ModelSystem, ref System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: LoadDetachedModelSystemFromFile
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 109
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nLoad a model system that has been saved in a file\n"
  example: []
  syntax:
    content: public bool LoadDetachedModelSystemFromFile(string fileName, out ModelSystem modelSystem, ref string error)
    parameters:
    - id: fileName
      type: System.String
      description: The path of the file to load.
    - id: modelSystem
      type: XTMF.ModelSystem
      description: The resulting model system if successful.
    - id: error
      type: System.String
      description: A description of the error if the operation fails.
    return:
      type: System.Boolean
      description: True if the model system was loaded, false otherwise with a description of the failure in error.
    content.vb: Public Function LoadDetachedModelSystemFromFile(fileName As String, ByRef modelSystem As ModelSystem, ByRef error As String) As Boolean
  overload: XTMF.ModelSystemController.LoadDetachedModelSystemFromFile*
  nameWithType.vb: ModelSystemController.LoadDetachedModelSystemFromFile(String, ByRef ModelSystem, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.ModelSystemController.LoadDetachedModelSystemFromFile(System.String, ByRef XTMF.ModelSystem, ByRef System.String)
  name.vb: LoadDetachedModelSystemFromFile(String, ByRef ModelSystem, ByRef String)
- uid: XTMF.ModelSystemController.ImportModelSystem(System.String,System.Boolean,System.String@)
  commentId: M:XTMF.ModelSystemController.ImportModelSystem(System.String,System.Boolean,System.String@)
  id: ImportModelSystem(System.String,System.Boolean,System.String@)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: ImportModelSystem(String, Boolean, ref String)
  nameWithType: ModelSystemController.ImportModelSystem(String, Boolean, ref String)
  fullName: XTMF.ModelSystemController.ImportModelSystem(System.String, System.Boolean, ref System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ImportModelSystem
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 141
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nImport a model system into XTMF\n"
  example: []
  syntax:
    content: public bool ImportModelSystem(string fileLocation, bool overwrite, ref string error)
    parameters:
    - id: fileLocation
      type: System.String
      description: The location of the file to import
    - id: overwrite
      type: System.Boolean
      description: Should we overwrite a model system if it already exists?
    - id: error
      type: System.String
      description: A message in case of failure
    return:
      type: System.Boolean
      description: True if it was added successfully, false otherwise
    content.vb: Public Function ImportModelSystem(fileLocation As String, overwrite As Boolean, ByRef error As String) As Boolean
  overload: XTMF.ModelSystemController.ImportModelSystem*
  nameWithType.vb: ModelSystemController.ImportModelSystem(String, Boolean, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.ModelSystemController.ImportModelSystem(System.String, System.Boolean, ByRef System.String)
  name.vb: ImportModelSystem(String, Boolean, ByRef String)
- uid: XTMF.ModelSystemController.LoadOrCreate(System.String)
  commentId: M:XTMF.ModelSystemController.LoadOrCreate(System.String)
  id: LoadOrCreate(System.String)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: LoadOrCreate(String)
  nameWithType: ModelSystemController.LoadOrCreate(String)
  fullName: XTMF.ModelSystemController.LoadOrCreate(System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: LoadOrCreate
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 209
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nLoads a model system given its name.  It will create a new blank model system if it doesn&apos;t exist.\n"
  example: []
  syntax:
    content: public ModelSystem LoadOrCreate(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the model system to get.
    return:
      type: XTMF.ModelSystem
      description: The model system with the given name.
    content.vb: Public Function LoadOrCreate(name As String) As ModelSystem
  overload: XTMF.ModelSystemController.LoadOrCreate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: XTMF.ModelSystemController.LoadFromRunFile(System.String)
  commentId: M:XTMF.ModelSystemController.LoadFromRunFile(System.String)
  id: LoadFromRunFile(System.String)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: LoadFromRunFile(String)
  nameWithType: ModelSystemController.LoadFromRunFile(String)
  fullName: XTMF.ModelSystemController.LoadFromRunFile(System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: LoadFromRunFile
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 233
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nLoad a model system structure from file.\n"
  example: []
  syntax:
    content: public ModelSystemStructure LoadFromRunFile(string runFile)
    parameters:
    - id: runFile
      type: System.String
      description: The file to load from.
    return:
      type: XTMF.ModelSystemStructure
      description: The model system structure located at that file.
    content.vb: Public Function LoadFromRunFile(runFile As String) As ModelSystemStructure
  overload: XTMF.ModelSystemController.LoadFromRunFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: XTMF.ModelSystemController.ValidateModelSystemName(System.String,System.String@)
  commentId: M:XTMF.ModelSystemController.ValidateModelSystemName(System.String,System.String@)
  id: ValidateModelSystemName(System.String,System.String@)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: ValidateModelSystemName(String, ref String)
  nameWithType: ModelSystemController.ValidateModelSystemName(String, ref String)
  fullName: XTMF.ModelSystemController.ValidateModelSystemName(System.String, ref System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ValidateModelSystemName
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 266
  assemblies:
  - XTMF
  namespace: XTMF
  syntax:
    content: public bool ValidateModelSystemName(string newName, ref string error)
    parameters:
    - id: newName
      type: System.String
    - id: error
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function ValidateModelSystemName(newName As String, ByRef error As String) As Boolean
  overload: XTMF.ModelSystemController.ValidateModelSystemName*
  nameWithType.vb: ModelSystemController.ValidateModelSystemName(String, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.ModelSystemController.ValidateModelSystemName(System.String, ByRef System.String)
  name.vb: ValidateModelSystemName(String, ByRef String)
- uid: XTMF.ModelSystemController.Load(System.String)
  commentId: M:XTMF.ModelSystemController.Load(System.String)
  id: Load(System.String)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: Load(String)
  nameWithType: ModelSystemController.Load(String)
  fullName: XTMF.ModelSystemController.Load(System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Load
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 282
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nLoads a model system given its name.  If it doesn&apos;t exist a null will be returned.\n"
  example: []
  syntax:
    content: public ModelSystem Load(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the model system to get.
    return:
      type: XTMF.ModelSystem
      description: The model system with the given name, or a null if it doesn&apos;t exist.
    content.vb: Public Function Load(name As String) As ModelSystem
  overload: XTMF.ModelSystemController.Load*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: XTMF.ModelSystemController.Delete(System.String)
  commentId: M:XTMF.ModelSystemController.Delete(System.String)
  id: Delete(System.String)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: Delete(String)
  nameWithType: ModelSystemController.Delete(String)
  fullName: XTMF.ModelSystemController.Delete(System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Delete
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 306
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nDelete a model system given its name\n"
  example: []
  syntax:
    content: public bool Delete(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the model system to delete
    return:
      type: System.Boolean
      description: If the delete succeeded or not.
    content.vb: Public Function Delete(name As String) As Boolean
  overload: XTMF.ModelSystemController.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: XTMF.ModelSystemController.CloneModelSystem(XTMF.ModelSystem,System.String,System.String@)
  commentId: M:XTMF.ModelSystemController.CloneModelSystem(XTMF.ModelSystem,System.String,System.String@)
  id: CloneModelSystem(XTMF.ModelSystem,System.String,System.String@)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: CloneModelSystem(ModelSystem, String, ref String)
  nameWithType: ModelSystemController.CloneModelSystem(ModelSystem, String, ref String)
  fullName: XTMF.ModelSystemController.CloneModelSystem(XTMF.ModelSystem, System.String, ref System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: CloneModelSystem
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 341
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nMakes a copy of the model system with the given new name\n"
  example: []
  syntax:
    content: public bool CloneModelSystem(ModelSystem modelSystem, string newName, ref string error)
    parameters:
    - id: modelSystem
      type: XTMF.ModelSystem
      description: The model system to create a clone of
    - id: newName
      type: System.String
      description: The name to give the model system
    - id: error
      type: System.String
      description: An error message if the operation fails
    return:
      type: System.Boolean
      description: True if successful, false otherwise with an error message.
    content.vb: Public Function CloneModelSystem(modelSystem As ModelSystem, newName As String, ByRef error As String) As Boolean
  overload: XTMF.ModelSystemController.CloneModelSystem*
  nameWithType.vb: ModelSystemController.CloneModelSystem(ModelSystem, String, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.ModelSystemController.CloneModelSystem(XTMF.ModelSystem, System.String, ByRef System.String)
  name.vb: CloneModelSystem(ModelSystem, String, ByRef String)
- uid: XTMF.ModelSystemController.Rename(XTMF.ModelSystem,System.String,System.String@)
  commentId: M:XTMF.ModelSystemController.Rename(XTMF.ModelSystem,System.String,System.String@)
  id: Rename(XTMF.ModelSystem,System.String,System.String@)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: Rename(ModelSystem, String, ref String)
  nameWithType: ModelSystemController.Rename(ModelSystem, String, ref String)
  fullName: XTMF.ModelSystemController.Rename(XTMF.ModelSystem, System.String, ref System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Rename
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 371
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nRenames the model system if possible\n"
  example: []
  syntax:
    content: public bool Rename(ModelSystem modelSystem, string newName, ref string error)
    parameters:
    - id: modelSystem
      type: XTMF.ModelSystem
      description: The model system to rename
    - id: newName
      type: System.String
      description: The name to save it as
    - id: error
      type: System.String
      description: An error message if the operation fails
    return:
      type: System.Boolean
      description: True if the operation succeeds, false otherwise with a message.
    content.vb: Public Function Rename(modelSystem As ModelSystem, newName As String, ByRef error As String) As Boolean
  overload: XTMF.ModelSystemController.Rename*
  nameWithType.vb: ModelSystemController.Rename(ModelSystem, String, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.ModelSystemController.Rename(XTMF.ModelSystem, System.String, ByRef System.String)
  name.vb: Rename(ModelSystem, String, ByRef String)
- uid: XTMF.ModelSystemController.Delete(XTMF.ModelSystem,System.String@)
  commentId: M:XTMF.ModelSystemController.Delete(XTMF.ModelSystem,System.String@)
  id: Delete(XTMF.ModelSystem,System.String@)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: Delete(ModelSystem, ref String)
  nameWithType: ModelSystemController.Delete(ModelSystem, ref String)
  fullName: XTMF.ModelSystemController.Delete(XTMF.ModelSystem, ref System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Delete
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 400
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\n\n"
  example: []
  syntax:
    content: public bool Delete(ModelSystem modelSystem, ref string error)
    parameters:
    - id: modelSystem
      type: XTMF.ModelSystem
      description: ''
    - id: error
      type: System.String
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Delete(modelSystem As ModelSystem, ByRef error As String) As Boolean
  overload: XTMF.ModelSystemController.Delete*
  nameWithType.vb: ModelSystemController.Delete(ModelSystem, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.ModelSystemController.Delete(XTMF.ModelSystem, ByRef System.String)
  name.vb: Delete(ModelSystem, ByRef String)
- uid: XTMF.ModelSystemController.ExportModelSystem(XTMF.IModelSystem,System.String,System.String@)
  commentId: M:XTMF.ModelSystemController.ExportModelSystem(XTMF.IModelSystem,System.String,System.String@)
  id: ExportModelSystem(XTMF.IModelSystem,System.String,System.String@)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: ExportModelSystem(IModelSystem, String, ref String)
  nameWithType: ModelSystemController.ExportModelSystem(IModelSystem, String, ref String)
  fullName: XTMF.ModelSystemController.ExportModelSystem(XTMF.IModelSystem, System.String, ref System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ExportModelSystem
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 425
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nExport the model system to the given file path\n"
  example: []
  syntax:
    content: public bool ExportModelSystem(IModelSystem modelSystem, string filePath, ref string error)
    parameters:
    - id: modelSystem
      type: XTMF.IModelSystem
      description: The model system to export
    - id: filePath
      type: System.String
      description: The path to save to.
    - id: error
      type: System.String
      description: A description of the error if one occurs.
    return:
      type: System.Boolean
      description: True if successful, false otherwise.  An error will be reported if it fails.
    content.vb: Public Function ExportModelSystem(modelSystem As IModelSystem, filePath As String, ByRef error As String) As Boolean
  overload: XTMF.ModelSystemController.ExportModelSystem*
  nameWithType.vb: ModelSystemController.ExportModelSystem(IModelSystem, String, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.ModelSystemController.ExportModelSystem(XTMF.IModelSystem, System.String, ByRef System.String)
  name.vb: ExportModelSystem(IModelSystem, String, ByRef String)
- uid: XTMF.ModelSystemController.ExportModelSystemAsString(XTMF.ModelSystem,System.String@,System.String@)
  commentId: M:XTMF.ModelSystemController.ExportModelSystemAsString(XTMF.ModelSystem,System.String@,System.String@)
  id: ExportModelSystemAsString(XTMF.ModelSystem,System.String@,System.String@)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: ExportModelSystemAsString(ModelSystem, out String, ref String)
  nameWithType: ModelSystemController.ExportModelSystemAsString(ModelSystem, out String, ref String)
  fullName: XTMF.ModelSystemController.ExportModelSystemAsString(XTMF.ModelSystem, out System.String, ref System.String)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ExportModelSystemAsString
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 445
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nExport a model system to a string\n"
  example: []
  syntax:
    content: public bool ExportModelSystemAsString(ModelSystem ms, out string modelSystemAsString, ref string error)
    parameters:
    - id: ms
      type: XTMF.ModelSystem
      description: The model system to export
    - id: modelSystemAsString
      type: System.String
      description: The string to save the model system into
    - id: error
      type: System.String
      description: A description of the error if one occurs
    return:
      type: System.Boolean
      description: True if the export was successful, false with description otherwise
    content.vb: Public Function ExportModelSystemAsString(ms As ModelSystem, ByRef modelSystemAsString As String, ByRef error As String) As Boolean
  overload: XTMF.ModelSystemController.ExportModelSystemAsString*
  nameWithType.vb: ModelSystemController.ExportModelSystemAsString(ModelSystem, ByRef String, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.ModelSystemController.ExportModelSystemAsString(XTMF.ModelSystem, ByRef System.String, ByRef System.String)
  name.vb: ExportModelSystemAsString(ModelSystem, ByRef String, ByRef String)
- uid: XTMF.ModelSystemController.EditModelSystem(XTMF.ModelSystem)
  commentId: M:XTMF.ModelSystemController.EditModelSystem(XTMF.ModelSystem)
  id: EditModelSystem(XTMF.ModelSystem)
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: EditModelSystem(ModelSystem)
  nameWithType: ModelSystemController.EditModelSystem(ModelSystem)
  fullName: XTMF.ModelSystemController.EditModelSystem(XTMF.ModelSystem)
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: EditModelSystem
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 464
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nStart a new editing session for the given model system\n"
  example: []
  syntax:
    content: public ModelSystemEditingSession EditModelSystem(ModelSystem modelSystem)
    parameters:
    - id: modelSystem
      type: XTMF.ModelSystem
    return:
      type: XTMF.ModelSystemEditingSession
    content.vb: Public Function EditModelSystem(modelSystem As ModelSystem) As ModelSystemEditingSession
  overload: XTMF.ModelSystemController.EditModelSystem*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: XTMF.ModelSystemController.GetModelSystems
  commentId: M:XTMF.ModelSystemController.GetModelSystems
  id: GetModelSystems
  parent: XTMF.ModelSystemController
  langs:
  - csharp
  - vb
  name: GetModelSystems()
  nameWithType: ModelSystemController.GetModelSystems()
  fullName: XTMF.ModelSystemController.GetModelSystems()
  type: Method
  source:
    remote:
      path: Code/XTMF/Controller/ModelSystemController.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetModelSystems
    path: ../../../XTMF/XTMF/Code/XTMF/Controller/ModelSystemController.cs
    startLine: 556
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nGet a list of currently active model systems\n"
  example: []
  syntax:
    content: public List<IModelSystem> GetModelSystems()
    return:
      type: System.Collections.Generic.List{XTMF.IModelSystem}
      description: ''
    content.vb: Public Function GetModelSystems As List(Of IModelSystem)
  overload: XTMF.ModelSystemController.GetModelSystems*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: XTMF
  commentId: N:XTMF
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: XTMF.ModelSystemController.#ctor*
  commentId: Overload:XTMF.ModelSystemController.#ctor
  name: ModelSystemController
  nameWithType: ModelSystemController.ModelSystemController
  fullName: XTMF.ModelSystemController.ModelSystemController
- uid: XTMF.XTMFRuntime
  commentId: T:XTMF.XTMFRuntime
  parent: XTMF
  name: XTMFRuntime
  nameWithType: XTMFRuntime
  fullName: XTMF.XTMFRuntime
- uid: XTMF.ModelSystemController.CreateModelSystem*
  commentId: Overload:XTMF.ModelSystemController.CreateModelSystem
  name: CreateModelSystem
  nameWithType: ModelSystemController.CreateModelSystem
  fullName: XTMF.ModelSystemController.CreateModelSystem
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: XTMF.ModelSystem
  commentId: T:XTMF.ModelSystem
  parent: XTMF
  name: ModelSystem
  nameWithType: ModelSystem
  fullName: XTMF.ModelSystem
- uid: XTMF.ModelSystemController.LoadDetachedModelSystemFromString*
  commentId: Overload:XTMF.ModelSystemController.LoadDetachedModelSystemFromString
  name: LoadDetachedModelSystemFromString
  nameWithType: ModelSystemController.LoadDetachedModelSystemFromString
  fullName: XTMF.ModelSystemController.LoadDetachedModelSystemFromString
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: XTMF.ModelSystemController.LoadDetachedModelSystemFromFile*
  commentId: Overload:XTMF.ModelSystemController.LoadDetachedModelSystemFromFile
  name: LoadDetachedModelSystemFromFile
  nameWithType: ModelSystemController.LoadDetachedModelSystemFromFile
  fullName: XTMF.ModelSystemController.LoadDetachedModelSystemFromFile
- uid: XTMF.ModelSystemController.ImportModelSystem*
  commentId: Overload:XTMF.ModelSystemController.ImportModelSystem
  name: ImportModelSystem
  nameWithType: ModelSystemController.ImportModelSystem
  fullName: XTMF.ModelSystemController.ImportModelSystem
- uid: XTMF.ModelSystemController.LoadOrCreate*
  commentId: Overload:XTMF.ModelSystemController.LoadOrCreate
  name: LoadOrCreate
  nameWithType: ModelSystemController.LoadOrCreate
  fullName: XTMF.ModelSystemController.LoadOrCreate
- uid: XTMF.ModelSystemController.LoadFromRunFile*
  commentId: Overload:XTMF.ModelSystemController.LoadFromRunFile
  name: LoadFromRunFile
  nameWithType: ModelSystemController.LoadFromRunFile
  fullName: XTMF.ModelSystemController.LoadFromRunFile
- uid: XTMF.ModelSystemStructure
  commentId: T:XTMF.ModelSystemStructure
  parent: XTMF
  name: ModelSystemStructure
  nameWithType: ModelSystemStructure
  fullName: XTMF.ModelSystemStructure
- uid: XTMF.ModelSystemController.ValidateModelSystemName*
  commentId: Overload:XTMF.ModelSystemController.ValidateModelSystemName
  name: ValidateModelSystemName
  nameWithType: ModelSystemController.ValidateModelSystemName
  fullName: XTMF.ModelSystemController.ValidateModelSystemName
- uid: XTMF.ModelSystemController.Load*
  commentId: Overload:XTMF.ModelSystemController.Load
  name: Load
  nameWithType: ModelSystemController.Load
  fullName: XTMF.ModelSystemController.Load
- uid: XTMF.ModelSystemController.Delete*
  commentId: Overload:XTMF.ModelSystemController.Delete
  name: Delete
  nameWithType: ModelSystemController.Delete
  fullName: XTMF.ModelSystemController.Delete
- uid: XTMF.ModelSystemController.CloneModelSystem*
  commentId: Overload:XTMF.ModelSystemController.CloneModelSystem
  name: CloneModelSystem
  nameWithType: ModelSystemController.CloneModelSystem
  fullName: XTMF.ModelSystemController.CloneModelSystem
- uid: XTMF.ModelSystemController.Rename*
  commentId: Overload:XTMF.ModelSystemController.Rename
  name: Rename
  nameWithType: ModelSystemController.Rename
  fullName: XTMF.ModelSystemController.Rename
- uid: XTMF.ModelSystemController.ExportModelSystem*
  commentId: Overload:XTMF.ModelSystemController.ExportModelSystem
  name: ExportModelSystem
  nameWithType: ModelSystemController.ExportModelSystem
  fullName: XTMF.ModelSystemController.ExportModelSystem
- uid: XTMF.IModelSystem
  commentId: T:XTMF.IModelSystem
  parent: XTMF
  name: IModelSystem
  nameWithType: IModelSystem
  fullName: XTMF.IModelSystem
- uid: XTMF.ModelSystemController.ExportModelSystemAsString*
  commentId: Overload:XTMF.ModelSystemController.ExportModelSystemAsString
  name: ExportModelSystemAsString
  nameWithType: ModelSystemController.ExportModelSystemAsString
  fullName: XTMF.ModelSystemController.ExportModelSystemAsString
- uid: XTMF.ModelSystemController.EditModelSystem*
  commentId: Overload:XTMF.ModelSystemController.EditModelSystem
  name: EditModelSystem
  nameWithType: ModelSystemController.EditModelSystem
  fullName: XTMF.ModelSystemController.EditModelSystem
- uid: XTMF.ModelSystemEditingSession
  commentId: T:XTMF.ModelSystemEditingSession
  parent: XTMF
  name: ModelSystemEditingSession
  nameWithType: ModelSystemEditingSession
  fullName: XTMF.ModelSystemEditingSession
- uid: XTMF.ModelSystemController.GetModelSystems*
  commentId: Overload:XTMF.ModelSystemController.GetModelSystems
  name: GetModelSystems
  nameWithType: ModelSystemController.GetModelSystems
  fullName: XTMF.ModelSystemController.GetModelSystems
- uid: System.Collections.Generic.List{XTMF.IModelSystem}
  commentId: T:System.Collections.Generic.List{XTMF.IModelSystem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IModelSystem>
  nameWithType: List<IModelSystem>
  fullName: System.Collections.Generic.List<XTMF.IModelSystem>
  nameWithType.vb: List(Of IModelSystem)
  fullName.vb: System.Collections.Generic.List(Of XTMF.IModelSystem)
  name.vb: List(Of IModelSystem)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: XTMF.IModelSystem
    name: IModelSystem
    nameWithType: IModelSystem
    fullName: XTMF.IModelSystem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: XTMF.IModelSystem
    name: IModelSystem
    nameWithType: IModelSystem
    fullName: XTMF.IModelSystem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
