### YamlMime:ManagedReference
items:
- uid: TMG.GTAModel.Purpose.ExternalPurpose
  commentId: T:TMG.GTAModel.Purpose.ExternalPurpose
  id: ExternalPurpose
  parent: TMG.GTAModel.Purpose
  children:
  - TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearDistribution
  - TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearEmployment
  - TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearPopulation
  - TMG.GTAModel.Purpose.ExternalPurpose.NewLeafNumbers
  - TMG.GTAModel.Purpose.ExternalPurpose.OriginalModeNumbers
  - TMG.GTAModel.Purpose.ExternalPurpose.Progress
  - TMG.GTAModel.Purpose.ExternalPurpose.Run
  - TMG.GTAModel.Purpose.ExternalPurpose.RuntimeValidation(System.String@)
  langs:
  - csharp
  - vb
  name: ExternalPurpose
  nameWithType: ExternalPurpose
  fullName: TMG.GTAModel.Purpose.ExternalPurpose
  type: Class
  source:
    remote:
      path: Code/GTAModel/Purpose/ExternalPurpose.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ExternalPurpose
    path: ../../../XTMF/XTMF/Code/GTAModel/Purpose/ExternalPurpose.cs
    startLine: 28
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: 'public class ExternalPurpose : PurposeBase, IPurpose, IModule'
    content.vb: >-
      Public Class ExternalPurpose
          Inherits PurposeBase
          Implements IPurpose, IModule
  inheritance:
  - System.Object
  - TMG.GTAModel.PurposeBase
  implements:
  - TMG.IPurpose
  - XTMF.IModule
  inheritedMembers:
  - TMG.GTAModel.PurposeBase.Root
  - TMG.GTAModel.PurposeBase.CachesFlows
  - TMG.GTAModel.PurposeBase.Flows
  - TMG.GTAModel.PurposeBase.ModeSplit
  - TMG.GTAModel.PurposeBase.Name
  - TMG.GTAModel.PurposeBase.ProgressColour
  - TMG.GTAModel.PurposeBase.PurposeName
  - TMG.GTAModel.PurposeBase.ResultCacheFile
  - TMG.GTAModel.PurposeBase.WriteModeSplit(TMG.TreeData{System.Single[][]},TMG.IModeChoiceNode,System.String)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearDistribution
  commentId: F:TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearDistribution
  id: ExternalBaseYearDistribution
  parent: TMG.GTAModel.Purpose.ExternalPurpose
  langs:
  - csharp
  - vb
  name: ExternalBaseYearDistribution
  nameWithType: ExternalPurpose.ExternalBaseYearDistribution
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearDistribution
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/ExternalPurpose.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ExternalBaseYearDistribution
    path: ../../../XTMF/XTMF/Code/GTAModel/Purpose/ExternalPurpose.cs
    startLine: 31
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "The base Year's distribution.(Origin,Destination,Mode,Data)")]

      public IDataSource<SparseTriIndex<float>> ExternalBaseYearDistribution
    return:
      type: XTMF.IDataSource{Datastructure.SparseTriIndex{System.Single}}
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="The base Year's distribution.(Origin,Destination,Mode,Data)")>

      Public ExternalBaseYearDistribution As IDataSource(Of SparseTriIndex(Of Single))
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: The base Year's distribution.(Origin,Destination,Mode,Data)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearPopulation
  commentId: F:TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearPopulation
  id: ExternalBaseYearPopulation
  parent: TMG.GTAModel.Purpose.ExternalPurpose
  langs:
  - csharp
  - vb
  name: ExternalBaseYearPopulation
  nameWithType: ExternalPurpose.ExternalBaseYearPopulation
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearPopulation
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/ExternalPurpose.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ExternalBaseYearPopulation
    path: ../../../XTMF/XTMF/Code/GTAModel/Purpose/ExternalPurpose.cs
    startLine: 34
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "The base year's population for external zones.")]

      public IDataSource<SparseArray<float>> ExternalBaseYearPopulation
    return:
      type: XTMF.IDataSource{Datastructure.SparseArray{System.Single}}
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="The base year's population for external zones.")>

      Public ExternalBaseYearPopulation As IDataSource(Of SparseArray(Of Single))
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: The base year's population for external zones.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearEmployment
  commentId: F:TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearEmployment
  id: ExternalBaseYearEmployment
  parent: TMG.GTAModel.Purpose.ExternalPurpose
  langs:
  - csharp
  - vb
  name: ExternalBaseYearEmployment
  nameWithType: ExternalPurpose.ExternalBaseYearEmployment
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.ExternalBaseYearEmployment
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/ExternalPurpose.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ExternalBaseYearEmployment
    path: ../../../XTMF/XTMF/Code/GTAModel/Purpose/ExternalPurpose.cs
    startLine: 37
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "The base year's employment for external zones.")]

      public IDataSource<SparseArray<float>> ExternalBaseYearEmployment
    return:
      type: XTMF.IDataSource{Datastructure.SparseArray{System.Single}}
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="The base year's employment for external zones.")>

      Public ExternalBaseYearEmployment As IDataSource(Of SparseArray(Of Single))
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: The base year's employment for external zones.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.ExternalPurpose.OriginalModeNumbers
  commentId: F:TMG.GTAModel.Purpose.ExternalPurpose.OriginalModeNumbers
  id: OriginalModeNumbers
  parent: TMG.GTAModel.Purpose.ExternalPurpose
  langs:
  - csharp
  - vb
  name: OriginalModeNumbers
  nameWithType: ExternalPurpose.OriginalModeNumbers
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.OriginalModeNumbers
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/ExternalPurpose.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: OriginalModeNumbers
    path: ../../../XTMF/XTMF/Code/GTAModel/Purpose/ExternalPurpose.cs
    startLine: 40
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [Parameter("OriginalModeNumbers", "1,2,3,6,7", typeof(NumberList), "The mode indexes from the original model.")]

      public NumberList OriginalModeNumbers
    return:
      type: TMG.GTAModel.DataUtility.NumberList
    content.vb: >-
      <Parameter("OriginalModeNumbers", "1,2,3,6,7", GetType(NumberList), "The mode indexes from the original model.")>

      Public OriginalModeNumbers As NumberList
  attributes:
  - type: XTMF.ParameterAttribute
    ctor: XTMF.ParameterAttribute.#ctor(System.String,System.String,System.Type,System.String)
    arguments:
    - type: System.String
      value: OriginalModeNumbers
    - type: System.String
      value: 1,2,3,6,7
    - type: System.Type
      value: TMG.GTAModel.DataUtility.NumberList
    - type: System.String
      value: The mode indexes from the original model.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.ExternalPurpose.NewLeafNumbers
  commentId: F:TMG.GTAModel.Purpose.ExternalPurpose.NewLeafNumbers
  id: NewLeafNumbers
  parent: TMG.GTAModel.Purpose.ExternalPurpose
  langs:
  - csharp
  - vb
  name: NewLeafNumbers
  nameWithType: ExternalPurpose.NewLeafNumbers
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.NewLeafNumbers
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/ExternalPurpose.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: NewLeafNumbers
    path: ../../../XTMF/XTMF/Code/GTAModel/Purpose/ExternalPurpose.cs
    startLine: 43
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [Parameter("NewLeafNumbers", "1,2,4,8,7", typeof(NumberList), "The mode's leaf indexes (1 based) for the new model's.")]

      public NumberList NewLeafNumbers
    return:
      type: TMG.GTAModel.DataUtility.NumberList
    content.vb: >-
      <Parameter("NewLeafNumbers", "1,2,4,8,7", GetType(NumberList), "The mode's leaf indexes (1 based) for the new model's.")>

      Public NewLeafNumbers As NumberList
  attributes:
  - type: XTMF.ParameterAttribute
    ctor: XTMF.ParameterAttribute.#ctor(System.String,System.String,System.Type,System.String)
    arguments:
    - type: System.String
      value: NewLeafNumbers
    - type: System.String
      value: 1,2,4,8,7
    - type: System.Type
      value: TMG.GTAModel.DataUtility.NumberList
    - type: System.String
      value: The mode's leaf indexes (1 based) for the new model's.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.ExternalPurpose.Progress
  commentId: P:TMG.GTAModel.Purpose.ExternalPurpose.Progress
  id: Progress
  parent: TMG.GTAModel.Purpose.ExternalPurpose
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: ExternalPurpose.Progress
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.Progress
  type: Property
  source:
    remote:
      path: Code/GTAModel/Purpose/ExternalPurpose.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Progress
    path: ../../../XTMF/XTMF/Code/GTAModel/Purpose/ExternalPurpose.cs
    startLine: 46
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public override float Progress { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Overrides ReadOnly Property Progress As Single
  overridden: TMG.GTAModel.PurposeBase.Progress
  overload: TMG.GTAModel.Purpose.ExternalPurpose.Progress*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: TMG.GTAModel.Purpose.ExternalPurpose.Run
  commentId: M:TMG.GTAModel.Purpose.ExternalPurpose.Run
  id: Run
  parent: TMG.GTAModel.Purpose.ExternalPurpose
  langs:
  - csharp
  - vb
  name: Run()
  nameWithType: ExternalPurpose.Run()
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.Run()
  type: Method
  source:
    remote:
      path: Code/GTAModel/Purpose/ExternalPurpose.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Run
    path: ../../../XTMF/XTMF/Code/GTAModel/Purpose/ExternalPurpose.cs
    startLine: 48
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public override void Run()
    content.vb: Public Overrides Sub Run
  overridden: TMG.GTAModel.PurposeBase.Run
  overload: TMG.GTAModel.Purpose.ExternalPurpose.Run*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TMG.GTAModel.Purpose.ExternalPurpose.RuntimeValidation(System.String@)
  commentId: M:TMG.GTAModel.Purpose.ExternalPurpose.RuntimeValidation(System.String@)
  id: RuntimeValidation(System.String@)
  parent: TMG.GTAModel.Purpose.ExternalPurpose
  langs:
  - csharp
  - vb
  name: RuntimeValidation(ref String)
  nameWithType: ExternalPurpose.RuntimeValidation(ref String)
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.RuntimeValidation(ref System.String)
  type: Method
  source:
    remote:
      path: Code/GTAModel/Purpose/ExternalPurpose.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RuntimeValidation
    path: ../../../XTMF/XTMF/Code/GTAModel/Purpose/ExternalPurpose.cs
    startLine: 221
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public override bool RuntimeValidation(ref string error)
    parameters:
    - id: error
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Overrides Function RuntimeValidation(ByRef error As String) As Boolean
  overridden: TMG.GTAModel.PurposeBase.RuntimeValidation(System.String@)
  overload: TMG.GTAModel.Purpose.ExternalPurpose.RuntimeValidation*
  nameWithType.vb: ExternalPurpose.RuntimeValidation(ByRef String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: TMG.GTAModel.Purpose.ExternalPurpose.RuntimeValidation(ByRef System.String)
  name.vb: RuntimeValidation(ByRef String)
references:
- uid: TMG.GTAModel.Purpose
  commentId: N:TMG.GTAModel.Purpose
  name: TMG.GTAModel.Purpose
  nameWithType: TMG.GTAModel.Purpose
  fullName: TMG.GTAModel.Purpose
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TMG.GTAModel.PurposeBase
  commentId: T:TMG.GTAModel.PurposeBase
  parent: TMG.GTAModel
  name: PurposeBase
  nameWithType: PurposeBase
  fullName: TMG.GTAModel.PurposeBase
- uid: TMG.IPurpose
  commentId: T:TMG.IPurpose
  parent: TMG
  name: IPurpose
  nameWithType: IPurpose
  fullName: TMG.IPurpose
- uid: XTMF.IModule
  commentId: T:XTMF.IModule
  parent: XTMF
  name: IModule
  nameWithType: IModule
  fullName: XTMF.IModule
- uid: TMG.GTAModel.PurposeBase.Root
  commentId: F:TMG.GTAModel.PurposeBase.Root
  parent: TMG.GTAModel.PurposeBase
  name: Root
  nameWithType: PurposeBase.Root
  fullName: TMG.GTAModel.PurposeBase.Root
- uid: TMG.GTAModel.PurposeBase.CachesFlows
  commentId: F:TMG.GTAModel.PurposeBase.CachesFlows
  parent: TMG.GTAModel.PurposeBase
  name: CachesFlows
  nameWithType: PurposeBase.CachesFlows
  fullName: TMG.GTAModel.PurposeBase.CachesFlows
- uid: TMG.GTAModel.PurposeBase.Flows
  commentId: P:TMG.GTAModel.PurposeBase.Flows
  parent: TMG.GTAModel.PurposeBase
  name: Flows
  nameWithType: PurposeBase.Flows
  fullName: TMG.GTAModel.PurposeBase.Flows
- uid: TMG.GTAModel.PurposeBase.ModeSplit
  commentId: P:TMG.GTAModel.PurposeBase.ModeSplit
  parent: TMG.GTAModel.PurposeBase
  name: ModeSplit
  nameWithType: PurposeBase.ModeSplit
  fullName: TMG.GTAModel.PurposeBase.ModeSplit
- uid: TMG.GTAModel.PurposeBase.Name
  commentId: P:TMG.GTAModel.PurposeBase.Name
  parent: TMG.GTAModel.PurposeBase
  name: Name
  nameWithType: PurposeBase.Name
  fullName: TMG.GTAModel.PurposeBase.Name
- uid: TMG.GTAModel.PurposeBase.ProgressColour
  commentId: P:TMG.GTAModel.PurposeBase.ProgressColour
  parent: TMG.GTAModel.PurposeBase
  name: ProgressColour
  nameWithType: PurposeBase.ProgressColour
  fullName: TMG.GTAModel.PurposeBase.ProgressColour
- uid: TMG.GTAModel.PurposeBase.PurposeName
  commentId: P:TMG.GTAModel.PurposeBase.PurposeName
  parent: TMG.GTAModel.PurposeBase
  name: PurposeName
  nameWithType: PurposeBase.PurposeName
  fullName: TMG.GTAModel.PurposeBase.PurposeName
- uid: TMG.GTAModel.PurposeBase.ResultCacheFile
  commentId: P:TMG.GTAModel.PurposeBase.ResultCacheFile
  parent: TMG.GTAModel.PurposeBase
  name: ResultCacheFile
  nameWithType: PurposeBase.ResultCacheFile
  fullName: TMG.GTAModel.PurposeBase.ResultCacheFile
- uid: TMG.GTAModel.PurposeBase.WriteModeSplit(TMG.TreeData{System.Single[][]},TMG.IModeChoiceNode,System.String)
  commentId: M:TMG.GTAModel.PurposeBase.WriteModeSplit(TMG.TreeData{System.Single[][]},TMG.IModeChoiceNode,System.String)
  parent: TMG.GTAModel.PurposeBase
  isExternal: true
  name: WriteModeSplit(TreeData<Single[][]>, IModeChoiceNode, String)
  nameWithType: PurposeBase.WriteModeSplit(TreeData<Single[][]>, IModeChoiceNode, String)
  fullName: TMG.GTAModel.PurposeBase.WriteModeSplit(TMG.TreeData<System.Single[][]>, TMG.IModeChoiceNode, System.String)
  nameWithType.vb: PurposeBase.WriteModeSplit(TreeData(Of Single()()), IModeChoiceNode, String)
  fullName.vb: TMG.GTAModel.PurposeBase.WriteModeSplit(TMG.TreeData(Of System.Single()()), TMG.IModeChoiceNode, System.String)
  name.vb: WriteModeSplit(TreeData(Of Single()()), IModeChoiceNode, String)
  spec.csharp:
  - uid: TMG.GTAModel.PurposeBase.WriteModeSplit(TMG.TreeData{System.Single[][]},TMG.IModeChoiceNode,System.String)
    name: WriteModeSplit
    nameWithType: PurposeBase.WriteModeSplit
    fullName: TMG.GTAModel.PurposeBase.WriteModeSplit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.IModeChoiceNode
    name: IModeChoiceNode
    nameWithType: IModeChoiceNode
    fullName: TMG.IModeChoiceNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.GTAModel.PurposeBase.WriteModeSplit(TMG.TreeData{System.Single[][]},TMG.IModeChoiceNode,System.String)
    name: WriteModeSplit
    nameWithType: PurposeBase.WriteModeSplit
    fullName: TMG.GTAModel.PurposeBase.WriteModeSplit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.IModeChoiceNode
    name: IModeChoiceNode
    nameWithType: IModeChoiceNode
    fullName: TMG.IModeChoiceNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  name: EnsureExactlyOne(IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TMG.GTAModel
  commentId: N:TMG.GTAModel
  name: TMG.GTAModel
  nameWithType: TMG.GTAModel
  fullName: TMG.GTAModel
- uid: TMG
  commentId: N:TMG
  name: TMG
  nameWithType: TMG
  fullName: TMG
- uid: XTMF
  commentId: N:XTMF
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper
  commentId: T:TMG.Functions.ModuleHelper
  parent: TMG.Functions
  name: ModuleHelper
  nameWithType: ModuleHelper
  fullName: TMG.Functions.ModuleHelper
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  isExternal: true
  name: EnsureExactlyOne(IModule, IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions
  commentId: N:TMG.Functions
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: XTMF.IDataSource{Datastructure.SparseTriIndex{System.Single}}
  commentId: T:XTMF.IDataSource{Datastructure.SparseTriIndex{System.Single}}
  parent: XTMF
  definition: XTMF.IDataSource`1
  name: IDataSource<SparseTriIndex<Single>>
  nameWithType: IDataSource<SparseTriIndex<Single>>
  fullName: XTMF.IDataSource<Datastructure.SparseTriIndex<System.Single>>
  nameWithType.vb: IDataSource(Of SparseTriIndex(Of Single))
  fullName.vb: XTMF.IDataSource(Of Datastructure.SparseTriIndex(Of System.Single))
  name.vb: IDataSource(Of SparseTriIndex(Of Single))
  spec.csharp:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - uid: Datastructure.SparseTriIndex`1
    name: SparseTriIndex
    nameWithType: SparseTriIndex
    fullName: Datastructure.SparseTriIndex
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Datastructure.SparseTriIndex`1
    name: SparseTriIndex
    nameWithType: SparseTriIndex
    fullName: Datastructure.SparseTriIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IDataSource`1
  commentId: T:XTMF.IDataSource`1
  name: IDataSource<T>
  nameWithType: IDataSource<T>
  fullName: XTMF.IDataSource<T>
  nameWithType.vb: IDataSource(Of T)
  fullName.vb: XTMF.IDataSource(Of T)
  name.vb: IDataSource(Of T)
  spec.csharp:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IDataSource{Datastructure.SparseArray{System.Single}}
  commentId: T:XTMF.IDataSource{Datastructure.SparseArray{System.Single}}
  parent: XTMF
  definition: XTMF.IDataSource`1
  name: IDataSource<SparseArray<Single>>
  nameWithType: IDataSource<SparseArray<Single>>
  fullName: XTMF.IDataSource<Datastructure.SparseArray<System.Single>>
  nameWithType.vb: IDataSource(Of SparseArray(Of Single))
  fullName.vb: XTMF.IDataSource(Of Datastructure.SparseArray(Of System.Single))
  name.vb: IDataSource(Of SparseArray(Of Single))
  spec.csharp:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.GTAModel.DataUtility.NumberList
  commentId: T:TMG.GTAModel.DataUtility.NumberList
  parent: TMG.GTAModel.DataUtility
  name: NumberList
  nameWithType: NumberList
  fullName: TMG.GTAModel.DataUtility.NumberList
- uid: TMG.GTAModel.DataUtility
  commentId: N:TMG.GTAModel.DataUtility
  name: TMG.GTAModel.DataUtility
  nameWithType: TMG.GTAModel.DataUtility
  fullName: TMG.GTAModel.DataUtility
- uid: TMG.GTAModel.PurposeBase.Progress
  commentId: P:TMG.GTAModel.PurposeBase.Progress
  parent: TMG.GTAModel.PurposeBase
  name: Progress
  nameWithType: PurposeBase.Progress
  fullName: TMG.GTAModel.PurposeBase.Progress
- uid: TMG.GTAModel.Purpose.ExternalPurpose.Progress*
  commentId: Overload:TMG.GTAModel.Purpose.ExternalPurpose.Progress
  name: Progress
  nameWithType: ExternalPurpose.Progress
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.Progress
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TMG.GTAModel.PurposeBase.Run
  commentId: M:TMG.GTAModel.PurposeBase.Run
  parent: TMG.GTAModel.PurposeBase
  name: Run()
  nameWithType: PurposeBase.Run()
  fullName: TMG.GTAModel.PurposeBase.Run()
  spec.csharp:
  - uid: TMG.GTAModel.PurposeBase.Run
    name: Run
    nameWithType: PurposeBase.Run
    fullName: TMG.GTAModel.PurposeBase.Run
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.GTAModel.PurposeBase.Run
    name: Run
    nameWithType: PurposeBase.Run
    fullName: TMG.GTAModel.PurposeBase.Run
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.GTAModel.Purpose.ExternalPurpose.Run*
  commentId: Overload:TMG.GTAModel.Purpose.ExternalPurpose.Run
  name: Run
  nameWithType: ExternalPurpose.Run
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.Run
- uid: TMG.GTAModel.PurposeBase.RuntimeValidation(System.String@)
  commentId: M:TMG.GTAModel.PurposeBase.RuntimeValidation(System.String@)
  parent: TMG.GTAModel.PurposeBase
  isExternal: true
  name: RuntimeValidation(String)
  nameWithType: PurposeBase.RuntimeValidation(String)
  fullName: TMG.GTAModel.PurposeBase.RuntimeValidation(System.String)
  spec.csharp:
  - uid: TMG.GTAModel.PurposeBase.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: PurposeBase.RuntimeValidation
    fullName: TMG.GTAModel.PurposeBase.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.GTAModel.PurposeBase.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: PurposeBase.RuntimeValidation
    fullName: TMG.GTAModel.PurposeBase.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.GTAModel.Purpose.ExternalPurpose.RuntimeValidation*
  commentId: Overload:TMG.GTAModel.Purpose.ExternalPurpose.RuntimeValidation
  name: RuntimeValidation
  nameWithType: ExternalPurpose.RuntimeValidation
  fullName: TMG.GTAModel.Purpose.ExternalPurpose.RuntimeValidation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
