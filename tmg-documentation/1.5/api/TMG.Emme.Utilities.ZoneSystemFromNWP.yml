### YamlMime:ManagedReference
items:
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP
  commentId: T:TMG.Emme.Utilities.ZoneSystemFromNWP
  id: ZoneSystemFromNWP
  parent: TMG.Emme.Utilities
  children:
  - TMG.Emme.Utilities.ZoneSystemFromNWP.Dispose
  - TMG.Emme.Utilities.ZoneSystemFromNWP.DistanceMatrix
  - TMG.Emme.Utilities.ZoneSystemFromNWP.Distances
  - TMG.Emme.Utilities.ZoneSystemFromNWP.Finalize
  - TMG.Emme.Utilities.ZoneSystemFromNWP.Get(System.Int32)
  - TMG.Emme.Utilities.ZoneSystemFromNWP.GiveData
  - TMG.Emme.Utilities.ZoneSystemFromNWP.IntrazonalDistanceFile
  - TMG.Emme.Utilities.ZoneSystemFromNWP.LoadData
  - TMG.Emme.Utilities.ZoneSystemFromNWP.Loaded
  - TMG.Emme.Utilities.ZoneSystemFromNWP.LoadOnce
  - TMG.Emme.Utilities.ZoneSystemFromNWP.Name
  - TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfExternalZones
  - TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfInternalZones
  - TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfZones
  - TMG.Emme.Utilities.ZoneSystemFromNWP.NWPLocation
  - TMG.Emme.Utilities.ZoneSystemFromNWP.PDFile
  - TMG.Emme.Utilities.ZoneSystemFromNWP.PopulationFile
  - TMG.Emme.Utilities.ZoneSystemFromNWP.Progress
  - TMG.Emme.Utilities.ZoneSystemFromNWP.ProgressColour
  - TMG.Emme.Utilities.ZoneSystemFromNWP.RegionFile
  - TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZone
  - TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZoneNumber
  - TMG.Emme.Utilities.ZoneSystemFromNWP.RuntimeValidation(System.String@)
  - TMG.Emme.Utilities.ZoneSystemFromNWP.SetInternalDistances
  - TMG.Emme.Utilities.ZoneSystemFromNWP.UnloadData
  - TMG.Emme.Utilities.ZoneSystemFromNWP.ZoneArray
  langs:
  - csharp
  - vb
  name: ZoneSystemFromNWP
  nameWithType: ZoneSystemFromNWP
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP
  type: Class
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ZoneSystemFromNWP
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 31
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: 'public sealed class ZoneSystemFromNWP : IZoneSystem, IDataSource<IZoneSystem>, IDataSource, IModule, IDisposable'
    content.vb: >-
      Public NotInheritable Class ZoneSystemFromNWP
          Implements IZoneSystem, IDataSource(Of IZoneSystem), IDataSource, IModule, IDisposable
  inheritance:
  - System.Object
  implements:
  - TMG.IZoneSystem
  - XTMF.IDataSource{TMG.IZoneSystem}
  - XTMF.IDataSource
  - XTMF.IModule
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.LoadOnce
  commentId: F:TMG.Emme.Utilities.ZoneSystemFromNWP.LoadOnce
  id: LoadOnce
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: LoadOnce
  nameWithType: ZoneSystemFromNWP.LoadOnce
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.LoadOnce
  type: Field
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: LoadOnce
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 35
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: >-
      [RunParameter("Load Once", true, "Only load the zone system once.")]

      public bool LoadOnce
    return:
      type: System.Boolean
    content.vb: >-
      <RunParameter("Load Once", True, "Only load the zone system once.")>

      Public LoadOnce As Boolean
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Load Once
    - type: System.Boolean
      value: true
    - type: System.String
      value: Only load the zone system once.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.SetInternalDistances
  commentId: F:TMG.Emme.Utilities.ZoneSystemFromNWP.SetInternalDistances
  id: SetInternalDistances
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: SetInternalDistances
  nameWithType: ZoneSystemFromNWP.SetInternalDistances
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.SetInternalDistances
  type: Field
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: SetInternalDistances
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 38
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: >-
      [RunParameter("Set Internal Distances", true, "Set the distances in the distance matrix to the values from the zones file.")]

      public bool SetInternalDistances
    return:
      type: System.Boolean
    content.vb: >-
      <RunParameter("Set Internal Distances", True, "Set the distances in the distance matrix to the values from the zones file.")>

      Public SetInternalDistances As Boolean
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Set Internal Distances
    - type: System.Boolean
      value: true
    - type: System.String
      value: Set the distances in the distance matrix to the values from the zones file.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZoneNumber
  commentId: P:TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZoneNumber
  id: RoamingZoneNumber
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: RoamingZoneNumber
  nameWithType: ZoneSystemFromNWP.RoamingZoneNumber
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZoneNumber
  type: Property
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RoamingZoneNumber
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 40
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: >-
      [RunParameter("Roaming Zone", 8888, "The zone number of people who have a roaming place of work.")]

      public int RoamingZoneNumber { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <RunParameter("Roaming Zone", 8888, "The zone number of people who have a roaming place of work.")>

      Public Property RoamingZoneNumber As Integer
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZoneNumber*
  implements:
  - TMG.IZoneSystem.RoamingZoneNumber
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Roaming Zone
    - type: System.Int32
      value: 8888
    - type: System.String
      value: The zone number of people who have a roaming place of work.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.NWPLocation
  commentId: F:TMG.Emme.Utilities.ZoneSystemFromNWP.NWPLocation
  id: NWPLocation
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: NWPLocation
  nameWithType: ZoneSystemFromNWP.NWPLocation
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.NWPLocation
  type: Field
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: NWPLocation
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 44
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "The network package to use to build the zone system.")]

      public FileLocation NWPLocation
    return:
      type: TMG.Input.FileLocation
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="The network package to use to build the zone system.")>

      Public NWPLocation As FileLocation
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: The network package to use to build the zone system.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZone
  commentId: F:TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZone
  id: RoamingZone
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: RoamingZone
  nameWithType: ZoneSystemFromNWP.RoamingZone
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZone
  type: Field
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RoamingZone
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 46
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public IZone RoamingZone
    return:
      type: TMG.IZone
    content.vb: Public RoamingZone As IZone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfExternalZones
  commentId: P:TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfExternalZones
  id: NumberOfExternalZones
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: NumberOfExternalZones
  nameWithType: ZoneSystemFromNWP.NumberOfExternalZones
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfExternalZones
  type: Property
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: NumberOfExternalZones
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 48
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public int NumberOfExternalZones { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumberOfExternalZones As Integer
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfExternalZones*
  implements:
  - TMG.IZoneSystem.NumberOfExternalZones
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfInternalZones
  commentId: P:TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfInternalZones
  id: NumberOfInternalZones
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: NumberOfInternalZones
  nameWithType: ZoneSystemFromNWP.NumberOfInternalZones
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfInternalZones
  type: Property
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: NumberOfInternalZones
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 50
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public int NumberOfInternalZones { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumberOfInternalZones As Integer
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfInternalZones*
  implements:
  - TMG.IZoneSystem.NumberOfInternalZones
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfZones
  commentId: P:TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfZones
  id: NumberOfZones
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: NumberOfZones
  nameWithType: ZoneSystemFromNWP.NumberOfZones
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfZones
  type: Property
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: NumberOfZones
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 52
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public int NumberOfZones { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumberOfZones As Integer
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfZones*
  implements:
  - TMG.IZoneSystem.NumberOfZones
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.ZoneArray
  commentId: P:TMG.Emme.Utilities.ZoneSystemFromNWP.ZoneArray
  id: ZoneArray
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: ZoneArray
  nameWithType: ZoneSystemFromNWP.ZoneArray
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.ZoneArray
  type: Property
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ZoneArray
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 56
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public SparseArray<IZone> ZoneArray { get; }
    parameters: []
    return:
      type: Datastructure.SparseArray{TMG.IZone}
    content.vb: Public ReadOnly Property ZoneArray As SparseArray(Of IZone)
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.ZoneArray*
  implements:
  - TMG.IZoneSystem.ZoneArray
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Distances
  commentId: P:TMG.Emme.Utilities.ZoneSystemFromNWP.Distances
  id: Distances
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: Distances
  nameWithType: ZoneSystemFromNWP.Distances
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Distances
  type: Property
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Distances
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 58
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public SparseTwinIndex<float> Distances { get; }
    parameters: []
    return:
      type: Datastructure.SparseTwinIndex{System.Single}
    content.vb: Public ReadOnly Property Distances As SparseTwinIndex(Of Single)
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.Distances*
  implements:
  - TMG.IZoneSystem.Distances
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Name
  commentId: P:TMG.Emme.Utilities.ZoneSystemFromNWP.Name
  id: Name
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ZoneSystemFromNWP.Name
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Name
  type: Property
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Name
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 60
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.Name*
  implements:
  - XTMF.IModule.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Get(System.Int32)
  commentId: M:TMG.Emme.Utilities.ZoneSystemFromNWP.Get(System.Int32)
  id: Get(System.Int32)
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: Get(Int32)
  nameWithType: ZoneSystemFromNWP.Get(Int32)
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Get(System.Int32)
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Get
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 62
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public IZone Get(int zoneNumber)
    parameters:
    - id: zoneNumber
      type: System.Int32
    return:
      type: TMG.IZone
    content.vb: Public Function Get(zoneNumber As Integer) As IZone
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.Get*
  implements:
  - TMG.IZoneSystem.Get(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.GiveData
  commentId: M:TMG.Emme.Utilities.ZoneSystemFromNWP.GiveData
  id: GiveData
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: GiveData()
  nameWithType: ZoneSystemFromNWP.GiveData()
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.GiveData()
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GiveData
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 83
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public IZoneSystem GiveData()
    return:
      type: TMG.IZoneSystem
    content.vb: Public Function GiveData As IZoneSystem
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.GiveData*
  implements:
  - XTMF.IDataSource{TMG.IZoneSystem}.GiveData
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Loaded
  commentId: P:TMG.Emme.Utilities.ZoneSystemFromNWP.Loaded
  id: Loaded
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: Loaded
  nameWithType: ZoneSystemFromNWP.Loaded
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Loaded
  type: Property
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Loaded
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 85
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public bool Loaded { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Loaded As Boolean
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.Loaded*
  implements:
  - XTMF.IDataSource.Loaded
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Progress
  commentId: P:TMG.Emme.Utilities.ZoneSystemFromNWP.Progress
  id: Progress
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: ZoneSystemFromNWP.Progress
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Progress
  type: Property
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Progress
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 87
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public float Progress { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Progress As Single
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.Progress*
  implements:
  - XTMF.IModule.Progress
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.ProgressColour
  commentId: P:TMG.Emme.Utilities.ZoneSystemFromNWP.ProgressColour
  id: ProgressColour
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: ProgressColour
  nameWithType: ZoneSystemFromNWP.ProgressColour
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.ProgressColour
  type: Property
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ProgressColour
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 89
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public Tuple<byte, byte, byte> ProgressColour { get; }
    parameters: []
    return:
      type: System.Tuple{System.Byte,System.Byte,System.Byte}
    content.vb: Public ReadOnly Property ProgressColour As Tuple(Of Byte, Byte, Byte)
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.ProgressColour*
  implements:
  - XTMF.IModule.ProgressColour
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.LoadData
  commentId: M:TMG.Emme.Utilities.ZoneSystemFromNWP.LoadData
  id: LoadData
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: LoadData()
  nameWithType: ZoneSystemFromNWP.LoadData()
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.LoadData()
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: LoadData
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 91
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public void LoadData()
    content.vb: Public Sub LoadData
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.LoadData*
  implements:
  - XTMF.IDataSource.LoadData
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.DistanceMatrix
  commentId: F:TMG.Emme.Utilities.ZoneSystemFromNWP.DistanceMatrix
  id: DistanceMatrix
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: DistanceMatrix
  nameWithType: ZoneSystemFromNWP.DistanceMatrix
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.DistanceMatrix
  type: Field
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: DistanceMatrix
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 165
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: >-
      [SubModelInformation(Required = false, Description = "Optional source to use for specifying the distances between zones.")]

      public IDataSource<SparseTwinIndex<float>> DistanceMatrix
    return:
      type: XTMF.IDataSource{Datastructure.SparseTwinIndex{System.Single}}
    content.vb: >-
      <SubModelInformation(Required:=False, Description:="Optional source to use for specifying the distances between zones.")>

      Public DistanceMatrix As IDataSource(Of SparseTwinIndex(Of Single))
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: false
    - name: Description
      type: System.String
      value: Optional source to use for specifying the distances between zones.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.RegionFile
  commentId: F:TMG.Emme.Utilities.ZoneSystemFromNWP.RegionFile
  id: RegionFile
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: RegionFile
  nameWithType: ZoneSystemFromNWP.RegionFile
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.RegionFile
  type: Field
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegionFile
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 234
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: >-
      [SubModelInformation(Required = false, Description = "A CSV File with Zone,Region.")]

      public FileLocation RegionFile
    return:
      type: TMG.Input.FileLocation
    content.vb: >-
      <SubModelInformation(Required:=False, Description:="A CSV File with Zone,Region.")>

      Public RegionFile As FileLocation
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: false
    - name: Description
      type: System.String
      value: A CSV File with Zone,Region.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.PDFile
  commentId: F:TMG.Emme.Utilities.ZoneSystemFromNWP.PDFile
  id: PDFile
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: PDFile
  nameWithType: ZoneSystemFromNWP.PDFile
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.PDFile
  type: Field
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: PDFile
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 272
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: >-
      [SubModelInformation(Required = false, Description = "A CSV File with Zone,Region.")]

      public FileLocation PDFile
    return:
      type: TMG.Input.FileLocation
    content.vb: >-
      <SubModelInformation(Required:=False, Description:="A CSV File with Zone,Region.")>

      Public PDFile As FileLocation
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: false
    - name: Description
      type: System.String
      value: A CSV File with Zone,Region.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.PopulationFile
  commentId: F:TMG.Emme.Utilities.ZoneSystemFromNWP.PopulationFile
  id: PopulationFile
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: PopulationFile
  nameWithType: ZoneSystemFromNWP.PopulationFile
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.PopulationFile
  type: Field
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: PopulationFile
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 309
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: >-
      [SubModelInformation(Required = false, Description = "A CSV File with Zone,Region.")]

      public FileLocation PopulationFile
    return:
      type: TMG.Input.FileLocation
    content.vb: >-
      <SubModelInformation(Required:=False, Description:="A CSV File with Zone,Region.")>

      Public PopulationFile As FileLocation
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: false
    - name: Description
      type: System.String
      value: A CSV File with Zone,Region.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.IntrazonalDistanceFile
  commentId: F:TMG.Emme.Utilities.ZoneSystemFromNWP.IntrazonalDistanceFile
  id: IntrazonalDistanceFile
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: IntrazonalDistanceFile
  nameWithType: ZoneSystemFromNWP.IntrazonalDistanceFile
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.IntrazonalDistanceFile
  type: Field
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IntrazonalDistanceFile
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 346
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: >-
      [SubModelInformation(Required = false, Description = "A CSV File with Zone,Region.")]

      public FileLocation IntrazonalDistanceFile
    return:
      type: TMG.Input.FileLocation
    content.vb: >-
      <SubModelInformation(Required:=False, Description:="A CSV File with Zone,Region.")>

      Public IntrazonalDistanceFile As FileLocation
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: false
    - name: Description
      type: System.String
      value: A CSV File with Zone,Region.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.UnloadData
  commentId: M:TMG.Emme.Utilities.ZoneSystemFromNWP.UnloadData
  id: UnloadData
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: UnloadData()
  nameWithType: ZoneSystemFromNWP.UnloadData()
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.UnloadData()
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: UnloadData
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 382
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public void UnloadData()
    content.vb: Public Sub UnloadData
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.UnloadData*
  implements:
  - XTMF.IDataSource.UnloadData
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Finalize
  commentId: M:TMG.Emme.Utilities.ZoneSystemFromNWP.Finalize
  id: Finalize
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: ZoneSystemFromNWP.Finalize()
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Finalize()
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Finalize
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 387
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Dispose
  commentId: M:TMG.Emme.Utilities.ZoneSystemFromNWP.Dispose
  id: Dispose
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ZoneSystemFromNWP.Dispose()
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Dispose()
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Dispose
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 392
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.RuntimeValidation(System.String@)
  commentId: M:TMG.Emme.Utilities.ZoneSystemFromNWP.RuntimeValidation(System.String@)
  id: RuntimeValidation(System.String@)
  parent: TMG.Emme.Utilities.ZoneSystemFromNWP
  langs:
  - csharp
  - vb
  name: RuntimeValidation(ref String)
  nameWithType: ZoneSystemFromNWP.RuntimeValidation(ref String)
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.RuntimeValidation(ref System.String)
  type: Method
  source:
    remote:
      path: Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
      branch: dev-1.5
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RuntimeValidation
    path: ../../../XTMF/XTMF/Code/TMG.Emme/Utilities/ZoneSystemFromNWP.cs
    startLine: 406
  assemblies:
  - TMG.Emme
  namespace: TMG.Emme.Utilities
  syntax:
    content: public bool RuntimeValidation(ref string error)
    parameters:
    - id: error
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function RuntimeValidation(ByRef error As String) As Boolean
  overload: TMG.Emme.Utilities.ZoneSystemFromNWP.RuntimeValidation*
  implements:
  - XTMF.IModule.RuntimeValidation(System.String@)
  nameWithType.vb: ZoneSystemFromNWP.RuntimeValidation(ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TMG.Emme.Utilities.ZoneSystemFromNWP.RuntimeValidation(ByRef System.String)
  name.vb: RuntimeValidation(ByRef String)
references:
- uid: TMG.Emme.Utilities
  commentId: N:TMG.Emme.Utilities
  name: TMG.Emme.Utilities
  nameWithType: TMG.Emme.Utilities
  fullName: TMG.Emme.Utilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TMG.IZoneSystem
  commentId: T:TMG.IZoneSystem
  parent: TMG
  name: IZoneSystem
  nameWithType: IZoneSystem
  fullName: TMG.IZoneSystem
- uid: XTMF.IDataSource{TMG.IZoneSystem}
  commentId: T:XTMF.IDataSource{TMG.IZoneSystem}
  parent: XTMF
  definition: XTMF.IDataSource`1
  name: IDataSource<IZoneSystem>
  nameWithType: IDataSource<IZoneSystem>
  fullName: XTMF.IDataSource<TMG.IZoneSystem>
  nameWithType.vb: IDataSource(Of IZoneSystem)
  fullName.vb: XTMF.IDataSource(Of TMG.IZoneSystem)
  name.vb: IDataSource(Of IZoneSystem)
  spec.csharp:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.IZoneSystem
    name: IZoneSystem
    nameWithType: IZoneSystem
    fullName: TMG.IZoneSystem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.IZoneSystem
    name: IZoneSystem
    nameWithType: IZoneSystem
    fullName: TMG.IZoneSystem
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IDataSource
  commentId: T:XTMF.IDataSource
  parent: XTMF
  name: IDataSource
  nameWithType: IDataSource
  fullName: XTMF.IDataSource
- uid: XTMF.IModule
  commentId: T:XTMF.IModule
  parent: XTMF
  name: IModule
  nameWithType: IModule
  fullName: XTMF.IModule
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  name: EnsureExactlyOne(IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TMG
  commentId: N:TMG
  name: TMG
  nameWithType: TMG
  fullName: TMG
- uid: XTMF.IDataSource`1
  commentId: T:XTMF.IDataSource`1
  name: IDataSource<T>
  nameWithType: IDataSource<T>
  fullName: XTMF.IDataSource<T>
  nameWithType.vb: IDataSource(Of T)
  fullName.vb: XTMF.IDataSource(Of T)
  name.vb: IDataSource(Of T)
  spec.csharp:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF
  commentId: N:XTMF
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper
  commentId: T:TMG.Functions.ModuleHelper
  parent: TMG.Functions
  name: ModuleHelper
  nameWithType: ModuleHelper
  fullName: TMG.Functions.ModuleHelper
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  isExternal: true
  name: EnsureExactlyOne(IModule, IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions
  commentId: N:TMG.Functions
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZoneNumber*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZoneNumber
  name: RoamingZoneNumber
  nameWithType: ZoneSystemFromNWP.RoamingZoneNumber
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.RoamingZoneNumber
- uid: TMG.IZoneSystem.RoamingZoneNumber
  commentId: P:TMG.IZoneSystem.RoamingZoneNumber
  parent: TMG.IZoneSystem
  name: RoamingZoneNumber
  nameWithType: IZoneSystem.RoamingZoneNumber
  fullName: TMG.IZoneSystem.RoamingZoneNumber
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TMG.Input.FileLocation
  commentId: T:TMG.Input.FileLocation
  parent: TMG.Input
  name: FileLocation
  nameWithType: FileLocation
  fullName: TMG.Input.FileLocation
- uid: TMG.Input
  commentId: N:TMG.Input
  name: TMG.Input
  nameWithType: TMG.Input
  fullName: TMG.Input
- uid: TMG.IZone
  commentId: T:TMG.IZone
  parent: TMG
  name: IZone
  nameWithType: IZone
  fullName: TMG.IZone
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfExternalZones*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfExternalZones
  name: NumberOfExternalZones
  nameWithType: ZoneSystemFromNWP.NumberOfExternalZones
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfExternalZones
- uid: TMG.IZoneSystem.NumberOfExternalZones
  commentId: P:TMG.IZoneSystem.NumberOfExternalZones
  parent: TMG.IZoneSystem
  name: NumberOfExternalZones
  nameWithType: IZoneSystem.NumberOfExternalZones
  fullName: TMG.IZoneSystem.NumberOfExternalZones
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfInternalZones*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfInternalZones
  name: NumberOfInternalZones
  nameWithType: ZoneSystemFromNWP.NumberOfInternalZones
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfInternalZones
- uid: TMG.IZoneSystem.NumberOfInternalZones
  commentId: P:TMG.IZoneSystem.NumberOfInternalZones
  parent: TMG.IZoneSystem
  name: NumberOfInternalZones
  nameWithType: IZoneSystem.NumberOfInternalZones
  fullName: TMG.IZoneSystem.NumberOfInternalZones
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfZones*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfZones
  name: NumberOfZones
  nameWithType: ZoneSystemFromNWP.NumberOfZones
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.NumberOfZones
- uid: TMG.IZoneSystem.NumberOfZones
  commentId: P:TMG.IZoneSystem.NumberOfZones
  parent: TMG.IZoneSystem
  name: NumberOfZones
  nameWithType: IZoneSystem.NumberOfZones
  fullName: TMG.IZoneSystem.NumberOfZones
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.ZoneArray*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.ZoneArray
  name: ZoneArray
  nameWithType: ZoneSystemFromNWP.ZoneArray
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.ZoneArray
- uid: TMG.IZoneSystem.ZoneArray
  commentId: P:TMG.IZoneSystem.ZoneArray
  parent: TMG.IZoneSystem
  name: ZoneArray
  nameWithType: IZoneSystem.ZoneArray
  fullName: TMG.IZoneSystem.ZoneArray
- uid: Datastructure.SparseArray{TMG.IZone}
  commentId: T:Datastructure.SparseArray{TMG.IZone}
  parent: Datastructure
  definition: Datastructure.SparseArray`1
  name: SparseArray<IZone>
  nameWithType: SparseArray<IZone>
  fullName: Datastructure.SparseArray<TMG.IZone>
  nameWithType.vb: SparseArray(Of IZone)
  fullName.vb: Datastructure.SparseArray(Of TMG.IZone)
  name.vb: SparseArray(Of IZone)
  spec.csharp:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.IZone
    name: IZone
    nameWithType: IZone
    fullName: TMG.IZone
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure.SparseArray`1
  commentId: T:Datastructure.SparseArray`1
  name: SparseArray<T>
  nameWithType: SparseArray<T>
  fullName: Datastructure.SparseArray<T>
  nameWithType.vb: SparseArray(Of T)
  fullName.vb: Datastructure.SparseArray(Of T)
  name.vb: SparseArray(Of T)
  spec.csharp:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseArray`1
    name: SparseArray
    nameWithType: SparseArray
    fullName: Datastructure.SparseArray
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure
  commentId: N:Datastructure
  name: Datastructure
  nameWithType: Datastructure
  fullName: Datastructure
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Distances*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.Distances
  name: Distances
  nameWithType: ZoneSystemFromNWP.Distances
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Distances
- uid: TMG.IZoneSystem.Distances
  commentId: P:TMG.IZoneSystem.Distances
  parent: TMG.IZoneSystem
  name: Distances
  nameWithType: IZoneSystem.Distances
  fullName: TMG.IZoneSystem.Distances
- uid: Datastructure.SparseTwinIndex{System.Single}
  commentId: T:Datastructure.SparseTwinIndex{System.Single}
  parent: Datastructure
  definition: Datastructure.SparseTwinIndex`1
  name: SparseTwinIndex<Single>
  nameWithType: SparseTwinIndex<Single>
  fullName: Datastructure.SparseTwinIndex<System.Single>
  nameWithType.vb: SparseTwinIndex(Of Single)
  fullName.vb: Datastructure.SparseTwinIndex(Of System.Single)
  name.vb: SparseTwinIndex(Of Single)
  spec.csharp:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Datastructure.SparseTwinIndex`1
  commentId: T:Datastructure.SparseTwinIndex`1
  name: SparseTwinIndex<T>
  nameWithType: SparseTwinIndex<T>
  fullName: Datastructure.SparseTwinIndex<T>
  nameWithType.vb: SparseTwinIndex(Of T)
  fullName.vb: Datastructure.SparseTwinIndex(Of T)
  name.vb: SparseTwinIndex(Of T)
  spec.csharp:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Name*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.Name
  name: Name
  nameWithType: ZoneSystemFromNWP.Name
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Name
- uid: XTMF.IModule.Name
  commentId: P:XTMF.IModule.Name
  parent: XTMF.IModule
  name: Name
  nameWithType: IModule.Name
  fullName: XTMF.IModule.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Get*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.Get
  name: Get
  nameWithType: ZoneSystemFromNWP.Get
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Get
- uid: TMG.IZoneSystem.Get(System.Int32)
  commentId: M:TMG.IZoneSystem.Get(System.Int32)
  parent: TMG.IZoneSystem
  isExternal: true
  name: Get(Int32)
  nameWithType: IZoneSystem.Get(Int32)
  fullName: TMG.IZoneSystem.Get(System.Int32)
  spec.csharp:
  - uid: TMG.IZoneSystem.Get(System.Int32)
    name: Get
    nameWithType: IZoneSystem.Get
    fullName: TMG.IZoneSystem.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.IZoneSystem.Get(System.Int32)
    name: Get
    nameWithType: IZoneSystem.Get
    fullName: TMG.IZoneSystem.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.GiveData*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.GiveData
  name: GiveData
  nameWithType: ZoneSystemFromNWP.GiveData
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.GiveData
- uid: XTMF.IDataSource{TMG.IZoneSystem}.GiveData
  commentId: M:XTMF.IDataSource{TMG.IZoneSystem}.GiveData
  parent: XTMF.IDataSource{TMG.IZoneSystem}
  definition: XTMF.IDataSource`1.GiveData
  name: GiveData()
  nameWithType: IDataSource<IZoneSystem>.GiveData()
  fullName: XTMF.IDataSource<TMG.IZoneSystem>.GiveData()
  nameWithType.vb: IDataSource(Of IZoneSystem).GiveData()
  fullName.vb: XTMF.IDataSource(Of TMG.IZoneSystem).GiveData()
  spec.csharp:
  - uid: XTMF.IDataSource`1.GiveData
    name: GiveData
    nameWithType: IDataSource<IZoneSystem>.GiveData
    fullName: XTMF.IDataSource<TMG.IZoneSystem>.GiveData
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IDataSource`1.GiveData
    name: GiveData
    nameWithType: IDataSource(Of IZoneSystem).GiveData
    fullName: XTMF.IDataSource(Of TMG.IZoneSystem).GiveData
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IDataSource`1.GiveData
  commentId: M:XTMF.IDataSource`1.GiveData
  name: GiveData()
  nameWithType: IDataSource<T>.GiveData()
  fullName: XTMF.IDataSource<T>.GiveData()
  nameWithType.vb: IDataSource(Of T).GiveData()
  fullName.vb: XTMF.IDataSource(Of T).GiveData()
  spec.csharp:
  - uid: XTMF.IDataSource`1.GiveData
    name: GiveData
    nameWithType: IDataSource<T>.GiveData
    fullName: XTMF.IDataSource<T>.GiveData
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IDataSource`1.GiveData
    name: GiveData
    nameWithType: IDataSource(Of T).GiveData
    fullName: XTMF.IDataSource(Of T).GiveData
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Loaded*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.Loaded
  name: Loaded
  nameWithType: ZoneSystemFromNWP.Loaded
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Loaded
- uid: XTMF.IDataSource.Loaded
  commentId: P:XTMF.IDataSource.Loaded
  parent: XTMF.IDataSource
  name: Loaded
  nameWithType: IDataSource.Loaded
  fullName: XTMF.IDataSource.Loaded
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Progress*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.Progress
  name: Progress
  nameWithType: ZoneSystemFromNWP.Progress
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Progress
- uid: XTMF.IModule.Progress
  commentId: P:XTMF.IModule.Progress
  parent: XTMF.IModule
  name: Progress
  nameWithType: IModule.Progress
  fullName: XTMF.IModule.Progress
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.ProgressColour*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.ProgressColour
  name: ProgressColour
  nameWithType: ZoneSystemFromNWP.ProgressColour
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.ProgressColour
- uid: XTMF.IModule.ProgressColour
  commentId: P:XTMF.IModule.ProgressColour
  parent: XTMF.IModule
  name: ProgressColour
  nameWithType: IModule.ProgressColour
  fullName: XTMF.IModule.ProgressColour
- uid: System.Tuple{System.Byte,System.Byte,System.Byte}
  commentId: T:System.Tuple{System.Byte,System.Byte,System.Byte}
  parent: System
  definition: System.Tuple`3
  name: Tuple<Byte, Byte, Byte>
  nameWithType: Tuple<Byte, Byte, Byte>
  fullName: System.Tuple<System.Byte, System.Byte, System.Byte>
  nameWithType.vb: Tuple(Of Byte, Byte, Byte)
  fullName.vb: System.Tuple(Of System.Byte, System.Byte, System.Byte)
  name.vb: Tuple(Of Byte, Byte, Byte)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.LoadData*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.LoadData
  name: LoadData
  nameWithType: ZoneSystemFromNWP.LoadData
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.LoadData
- uid: XTMF.IDataSource.LoadData
  commentId: M:XTMF.IDataSource.LoadData
  parent: XTMF.IDataSource
  name: LoadData()
  nameWithType: IDataSource.LoadData()
  fullName: XTMF.IDataSource.LoadData()
  spec.csharp:
  - uid: XTMF.IDataSource.LoadData
    name: LoadData
    nameWithType: IDataSource.LoadData
    fullName: XTMF.IDataSource.LoadData
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IDataSource.LoadData
    name: LoadData
    nameWithType: IDataSource.LoadData
    fullName: XTMF.IDataSource.LoadData
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IDataSource{Datastructure.SparseTwinIndex{System.Single}}
  commentId: T:XTMF.IDataSource{Datastructure.SparseTwinIndex{System.Single}}
  parent: XTMF
  definition: XTMF.IDataSource`1
  name: IDataSource<SparseTwinIndex<Single>>
  nameWithType: IDataSource<SparseTwinIndex<Single>>
  fullName: XTMF.IDataSource<Datastructure.SparseTwinIndex<System.Single>>
  nameWithType.vb: IDataSource(Of SparseTwinIndex(Of Single))
  fullName.vb: XTMF.IDataSource(Of Datastructure.SparseTwinIndex(Of System.Single))
  name.vb: IDataSource(Of SparseTwinIndex(Of Single))
  spec.csharp:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Datastructure.SparseTwinIndex`1
    name: SparseTwinIndex
    nameWithType: SparseTwinIndex
    fullName: Datastructure.SparseTwinIndex
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.UnloadData*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.UnloadData
  name: UnloadData
  nameWithType: ZoneSystemFromNWP.UnloadData
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.UnloadData
- uid: XTMF.IDataSource.UnloadData
  commentId: M:XTMF.IDataSource.UnloadData
  parent: XTMF.IDataSource
  name: UnloadData()
  nameWithType: IDataSource.UnloadData()
  fullName: XTMF.IDataSource.UnloadData()
  spec.csharp:
  - uid: XTMF.IDataSource.UnloadData
    name: UnloadData
    nameWithType: IDataSource.UnloadData
    fullName: XTMF.IDataSource.UnloadData
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IDataSource.UnloadData
    name: UnloadData
    nameWithType: IDataSource.UnloadData
    fullName: XTMF.IDataSource.UnloadData
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Finalize*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.Finalize
  name: Finalize
  nameWithType: ZoneSystemFromNWP.Finalize
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Finalize
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.Dispose*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.Dispose
  name: Dispose
  nameWithType: ZoneSystemFromNWP.Dispose
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Emme.Utilities.ZoneSystemFromNWP.RuntimeValidation*
  commentId: Overload:TMG.Emme.Utilities.ZoneSystemFromNWP.RuntimeValidation
  name: RuntimeValidation
  nameWithType: ZoneSystemFromNWP.RuntimeValidation
  fullName: TMG.Emme.Utilities.ZoneSystemFromNWP.RuntimeValidation
- uid: XTMF.IModule.RuntimeValidation(System.String@)
  commentId: M:XTMF.IModule.RuntimeValidation(System.String@)
  parent: XTMF.IModule
  isExternal: true
  name: RuntimeValidation(String)
  nameWithType: IModule.RuntimeValidation(String)
  fullName: XTMF.IModule.RuntimeValidation(System.String)
  spec.csharp:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
