### YamlMime:ManagedReference
items:
- uid: XTMF.Testing.Modules.Editing
  commentId: N:XTMF.Testing.Modules.Editing
  id: XTMF.Testing.Modules.Editing
  children:
  - XTMF.Testing.Modules.Editing.IGenericInterface`4
  - XTMF.Testing.Modules.Editing.NonGenericBase`3
  - XTMF.Testing.Modules.Editing.TestGenericModule`2
  - XTMF.Testing.Modules.Editing.TestModelSystemTemplate
  - XTMF.Testing.Modules.Editing.TestSpecificGenericModuleMST
  langs:
  - csharp
  - vb
  name: XTMF.Testing.Modules.Editing
  nameWithType: XTMF.Testing.Modules.Editing
  fullName: XTMF.Testing.Modules.Editing
  type: Namespace
  assemblies:
  - XTMFCoreTesting
references:
- uid: XTMF.Testing.Modules.Editing.IGenericInterface`4
  commentId: T:XTMF.Testing.Modules.Editing.IGenericInterface`4
  isExternal: false
  name: IGenericInterface<A, B, C, D>
  nameWithType: IGenericInterface<A, B, C, D>
  fullName: XTMF.Testing.Modules.Editing.IGenericInterface<A, B, C, D>
  nameWithType.vb: IGenericInterface(Of A, B, C, D)
  fullName.vb: XTMF.Testing.Modules.Editing.IGenericInterface(Of A, B, C, D)
  name.vb: IGenericInterface(Of A, B, C, D)
  spec.csharp:
  - uid: XTMF.Testing.Modules.Editing.IGenericInterface`4
    name: IGenericInterface
    nameWithType: IGenericInterface
    fullName: XTMF.Testing.Modules.Editing.IGenericInterface
  - name: <
    nameWithType: <
    fullName: <
  - name: A
    nameWithType: A
    fullName: A
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: B
    nameWithType: B
    fullName: B
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.Testing.Modules.Editing.IGenericInterface`4
    name: IGenericInterface
    nameWithType: IGenericInterface
    fullName: XTMF.Testing.Modules.Editing.IGenericInterface
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: A
    nameWithType: A
    fullName: A
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: B
    nameWithType: B
    fullName: B
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.Testing.Modules.Editing.NonGenericBase`3
  commentId: T:XTMF.Testing.Modules.Editing.NonGenericBase`3
  isExternal: false
  name: NonGenericBase<E, F, G>
  nameWithType: NonGenericBase<E, F, G>
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<E, F, G>
  nameWithType.vb: NonGenericBase(Of E, F, G)
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of E, F, G)
  name.vb: NonGenericBase(Of E, F, G)
  spec.csharp:
  - uid: XTMF.Testing.Modules.Editing.NonGenericBase`3
    name: NonGenericBase
    nameWithType: NonGenericBase
    fullName: XTMF.Testing.Modules.Editing.NonGenericBase
  - name: <
    nameWithType: <
    fullName: <
  - name: E
    nameWithType: E
    fullName: E
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: F
    nameWithType: F
    fullName: F
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: G
    nameWithType: G
    fullName: G
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.Testing.Modules.Editing.NonGenericBase`3
    name: NonGenericBase
    nameWithType: NonGenericBase
    fullName: XTMF.Testing.Modules.Editing.NonGenericBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: E
    nameWithType: E
    fullName: E
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: F
    nameWithType: F
    fullName: F
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: G
    nameWithType: G
    fullName: G
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.Testing.Modules.Editing.TestGenericModule`2
  commentId: T:XTMF.Testing.Modules.Editing.TestGenericModule`2
  isExternal: false
  name: TestGenericModule<H, I>
  nameWithType: TestGenericModule<H, I>
  fullName: XTMF.Testing.Modules.Editing.TestGenericModule<H, I>
  nameWithType.vb: TestGenericModule(Of H, I)
  fullName.vb: XTMF.Testing.Modules.Editing.TestGenericModule(Of H, I)
  name.vb: TestGenericModule(Of H, I)
  spec.csharp:
  - uid: XTMF.Testing.Modules.Editing.TestGenericModule`2
    name: TestGenericModule
    nameWithType: TestGenericModule
    fullName: XTMF.Testing.Modules.Editing.TestGenericModule
  - name: <
    nameWithType: <
    fullName: <
  - name: H
    nameWithType: H
    fullName: H
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: I
    nameWithType: I
    fullName: I
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.Testing.Modules.Editing.TestGenericModule`2
    name: TestGenericModule
    nameWithType: TestGenericModule
    fullName: XTMF.Testing.Modules.Editing.TestGenericModule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: H
    nameWithType: H
    fullName: H
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: I
    nameWithType: I
    fullName: I
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.Testing.Modules.Editing.TestModelSystemTemplate
  commentId: T:XTMF.Testing.Modules.Editing.TestModelSystemTemplate
  isExternal: false
  name: TestModelSystemTemplate
  nameWithType: TestModelSystemTemplate
  fullName: XTMF.Testing.Modules.Editing.TestModelSystemTemplate
- uid: XTMF.Testing.Modules.Editing.TestSpecificGenericModuleMST
  commentId: T:XTMF.Testing.Modules.Editing.TestSpecificGenericModuleMST
  isExternal: false
  name: TestSpecificGenericModuleMST
  nameWithType: TestSpecificGenericModuleMST
  fullName: XTMF.Testing.Modules.Editing.TestSpecificGenericModuleMST
