### YamlMime:ManagedReference
items:
- uid: XTMF.Controller.RunController
  commentId: T:XTMF.Controller.RunController
  id: RunController
  parent: XTMF.Controller
  children:
  - XTMF.Controller.RunController.CancelRun(XTMF.XTMFRun)
  - XTMF.Controller.RunController.CurrentlyExecuting
  - XTMF.Controller.RunController.ExecuteRun(XTMF.XTMFRun,System.Boolean)
  - XTMF.Controller.RunController.RunPipeline
  langs:
  - csharp
  - vb
  name: RunController
  nameWithType: RunController
  fullName: XTMF.Controller.RunController
  type: Class
  source:
    remote:
      path: Code/XTMF1.1/Controller/RunController.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RunController
    path: ../../../XTMF/Code/XTMF1.1/Controller/RunController.cs
    startLine: 31
  assemblies:
  - XTMF
  namespace: XTMF.Controller
  summary: "\nThis controller is responsible for the organization of the runs currently executing or\nthat are scheduled to run.\n"
  example: []
  syntax:
    content: public sealed class RunController
    content.vb: Public NotInheritable Class RunController
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: XTMF.Controller.RunController.RunPipeline
  commentId: P:XTMF.Controller.RunController.RunPipeline
  id: RunPipeline
  parent: XTMF.Controller.RunController
  langs:
  - csharp
  - vb
  name: RunPipeline
  nameWithType: RunController.RunPipeline
  fullName: XTMF.Controller.RunController.RunPipeline
  type: Property
  source:
    remote:
      path: Code/XTMF1.1/Controller/RunController.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RunPipeline
    path: ../../../XTMF/Code/XTMF1.1/Controller/RunController.cs
    startLine: 42
  assemblies:
  - XTMF
  namespace: XTMF.Controller
  summary: "\nGet a reference to all of the runs that are waiting to execute\n"
  example: []
  syntax:
    content: public ReadOnlyObservableCollection<XTMFRun> RunPipeline { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyObservableCollection{XTMF.XTMFRun}
    content.vb: Public ReadOnly Property RunPipeline As ReadOnlyObservableCollection(Of XTMFRun)
  overload: XTMF.Controller.RunController.RunPipeline*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: XTMF.Controller.RunController.CurrentlyExecuting
  commentId: P:XTMF.Controller.RunController.CurrentlyExecuting
  id: CurrentlyExecuting
  parent: XTMF.Controller.RunController
  langs:
  - csharp
  - vb
  name: CurrentlyExecuting
  nameWithType: RunController.CurrentlyExecuting
  fullName: XTMF.Controller.RunController.CurrentlyExecuting
  type: Property
  source:
    remote:
      path: Code/XTMF1.1/Controller/RunController.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: CurrentlyExecuting
    path: ../../../XTMF/Code/XTMF1.1/Controller/RunController.cs
    startLine: 53
  assemblies:
  - XTMF
  namespace: XTMF.Controller
  summary: "\nGet a reference to all of the runs that are waiting to execute\n"
  example: []
  syntax:
    content: public ReadOnlyObservableCollection<XTMFRun> CurrentlyExecuting { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyObservableCollection{XTMF.XTMFRun}
    content.vb: Public ReadOnly Property CurrentlyExecuting As ReadOnlyObservableCollection(Of XTMFRun)
  overload: XTMF.Controller.RunController.CurrentlyExecuting*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: XTMF.Controller.RunController.ExecuteRun(XTMF.XTMFRun,System.Boolean)
  commentId: M:XTMF.Controller.RunController.ExecuteRun(XTMF.XTMFRun,System.Boolean)
  id: ExecuteRun(XTMF.XTMFRun,System.Boolean)
  parent: XTMF.Controller.RunController
  langs:
  - csharp
  - vb
  name: ExecuteRun(XTMFRun, Boolean)
  nameWithType: RunController.ExecuteRun(XTMFRun, Boolean)
  fullName: XTMF.Controller.RunController.ExecuteRun(XTMF.XTMFRun, System.Boolean)
  type: Method
  source:
    remote:
      path: Code/XTMF1.1/Controller/RunController.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ExecuteRun
    path: ../../../XTMF/Code/XTMF1.1/Controller/RunController.cs
    startLine: 66
  assemblies:
  - XTMF
  namespace: XTMF.Controller
  summary: "\nSetup a run for management by XTMF.\n"
  example: []
  syntax:
    content: public void ExecuteRun(XTMFRun run, bool executeNow)
    parameters:
    - id: run
      type: XTMF.XTMFRun
      description: The run to work with.
    - id: executeNow
      type: System.Boolean
      description: Should the run be added to the back of the queue or executed right now?
    content.vb: Public Sub ExecuteRun(run As XTMFRun, executeNow As Boolean)
  overload: XTMF.Controller.RunController.ExecuteRun*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: XTMF.Controller.RunController.CancelRun(XTMF.XTMFRun)
  commentId: M:XTMF.Controller.RunController.CancelRun(XTMF.XTMFRun)
  id: CancelRun(XTMF.XTMFRun)
  parent: XTMF.Controller.RunController
  langs:
  - csharp
  - vb
  name: CancelRun(XTMFRun)
  nameWithType: RunController.CancelRun(XTMFRun)
  fullName: XTMF.Controller.RunController.CancelRun(XTMF.XTMFRun)
  type: Method
  source:
    remote:
      path: Code/XTMF1.1/Controller/RunController.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: CancelRun
    path: ../../../XTMF/Code/XTMF1.1/Controller/RunController.cs
    startLine: 90
  assemblies:
  - XTMF
  namespace: XTMF.Controller
  syntax:
    content: public void CancelRun(XTMFRun run)
    parameters:
    - id: run
      type: XTMF.XTMFRun
    content.vb: Public Sub CancelRun(run As XTMFRun)
  overload: XTMF.Controller.RunController.CancelRun*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: XTMF.Controller
  commentId: N:XTMF.Controller
  isExternal: false
  name: XTMF.Controller
  nameWithType: XTMF.Controller
  fullName: XTMF.Controller
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: XTMF.Controller.RunController.RunPipeline*
  commentId: Overload:XTMF.Controller.RunController.RunPipeline
  isExternal: false
  name: RunPipeline
  nameWithType: RunController.RunPipeline
  fullName: XTMF.Controller.RunController.RunPipeline
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection{XTMF.XTMFRun}
  commentId: T:System.Collections.ObjectModel.ReadOnlyObservableCollection{XTMF.XTMFRun}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  name: ReadOnlyObservableCollection<XTMFRun>
  nameWithType: ReadOnlyObservableCollection<XTMFRun>
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<XTMF.XTMFRun>
  nameWithType.vb: ReadOnlyObservableCollection(Of XTMFRun)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of XTMF.XTMFRun)
  name.vb: ReadOnlyObservableCollection(Of XTMFRun)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: XTMF.XTMFRun
    name: XTMFRun
    nameWithType: XTMFRun
    fullName: XTMF.XTMFRun
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: XTMF.XTMFRun
    name: XTMFRun
    nameWithType: XTMFRun
    fullName: XTMF.XTMFRun
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  isExternal: true
  name: ReadOnlyObservableCollection<T>
  nameWithType: ReadOnlyObservableCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>
  nameWithType.vb: ReadOnlyObservableCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T)
  name.vb: ReadOnlyObservableCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: XTMF.Controller.RunController.CurrentlyExecuting*
  commentId: Overload:XTMF.Controller.RunController.CurrentlyExecuting
  isExternal: false
  name: CurrentlyExecuting
  nameWithType: RunController.CurrentlyExecuting
  fullName: XTMF.Controller.RunController.CurrentlyExecuting
- uid: XTMF.Controller.RunController.ExecuteRun*
  commentId: Overload:XTMF.Controller.RunController.ExecuteRun
  isExternal: false
  name: ExecuteRun
  nameWithType: RunController.ExecuteRun
  fullName: XTMF.Controller.RunController.ExecuteRun
- uid: XTMF.XTMFRun
  commentId: T:XTMF.XTMFRun
  parent: XTMF
  isExternal: false
  name: XTMFRun
  nameWithType: XTMFRun
  fullName: XTMF.XTMFRun
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: XTMF
  commentId: N:XTMF
  isExternal: false
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: XTMF.Controller.RunController.CancelRun*
  commentId: Overload:XTMF.Controller.RunController.CancelRun
  isExternal: false
  name: CancelRun
  nameWithType: RunController.CancelRun
  fullName: XTMF.Controller.RunController.CancelRun
