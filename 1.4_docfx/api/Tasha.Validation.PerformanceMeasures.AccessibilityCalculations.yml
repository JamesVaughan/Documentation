### YamlMime:ManagedReference
items:
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  commentId: T:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  id: AccessibilityCalculations
  parent: Tasha.Validation.PerformanceMeasures
  children:
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AccessibilityTimes
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AddToResults(System.Single,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Single})
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AutoTimeMatrix
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.EmploymentData
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.EmpZoneRange
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Name
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.NIAData
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.PopZoneRange
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Progress
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ProgressColour
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ResultsFile
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Root
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.RuntimeValidation(System.String@)
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Start
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.TotalTransitTimeMatrix
  - Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.TransitIVTTMatrix
  langs:
  - csharp
  - vb
  name: AccessibilityCalculations
  nameWithType: AccessibilityCalculations
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  type: Class
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: AccessibilityCalculations
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 32
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: 'public class AccessibilityCalculations : ISelfContainedModule, IModule'
    content.vb: >-
      Public Class AccessibilityCalculations

          Implements ISelfContainedModule, IModule
  inheritance:
  - System.Object
  implements:
  - XTMF.ISelfContainedModule
  - XTMF.IModule
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Root
  commentId: F:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Root
  id: Root
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: AccessibilityCalculations.Root
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Root
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Root
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 35
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public ITashaRuntime Root
    return:
      type: Tasha.Common.ITashaRuntime
    content.vb: Public Root As ITashaRuntime
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.PopZoneRange
  commentId: F:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.PopZoneRange
  id: PopZoneRange
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: PopZoneRange
  nameWithType: AccessibilityCalculations.PopZoneRange
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.PopZoneRange
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: PopZoneRange
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 38
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [RunParameter("Population Zones to Analyze", "1-1000", typeof (RangeSet), "The zones that you want to do the accessibility calculations for")]

      public RangeSet PopZoneRange
    return:
      type: Datastructure.RangeSet
    content.vb: >-
      <RunParameter("Population Zones to Analyze", "1-1000", GetType(RangeSet), "The zones that you want to do the accessibility calculations for")>

      Public PopZoneRange As RangeSet
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.String,System.Type,System.String)
    arguments:
    - type: System.String
      value: Population Zones to Analyze
    - type: System.String
      value: 1-1000
    - type: System.Type
      value: Datastructure.RangeSet
    - type: System.String
      value: The zones that you want to do the accessibility calculations for
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.EmpZoneRange
  commentId: F:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.EmpZoneRange
  id: EmpZoneRange
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: EmpZoneRange
  nameWithType: AccessibilityCalculations.EmpZoneRange
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.EmpZoneRange
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: EmpZoneRange
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 41
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [RunParameter("Employment Zones to Analyze", "1-9999", typeof (RangeSet), "Which employment zones do you want to do accessibility calculations for")]

      public RangeSet EmpZoneRange
    return:
      type: Datastructure.RangeSet
    content.vb: >-
      <RunParameter("Employment Zones to Analyze", "1-9999", GetType(RangeSet), "Which employment zones do you want to do accessibility calculations for")>

      Public EmpZoneRange As RangeSet
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.String,System.Type,System.String)
    arguments:
    - type: System.String
      value: Employment Zones to Analyze
    - type: System.String
      value: 1-9999
    - type: System.Type
      value: Datastructure.RangeSet
    - type: System.String
      value: Which employment zones do you want to do accessibility calculations for
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.NIAData
  commentId: F:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.NIAData
  id: NIAData
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: NIAData
  nameWithType: AccessibilityCalculations.NIAData
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.NIAData
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: NIAData
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 44
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "File containing the NIA data")]

      public IResource NIAData
    return:
      type: XTMF.IResource
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="File containing the NIA data")>

      Public NIAData As IResource
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: File containing the NIA data
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.EmploymentData
  commentId: F:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.EmploymentData
  id: EmploymentData
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: EmploymentData
  nameWithType: AccessibilityCalculations.EmploymentData
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.EmploymentData
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: EmploymentData
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 47
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "File containing the employment data")]

      public IResource EmploymentData
    return:
      type: XTMF.IResource
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="File containing the employment data")>

      Public EmploymentData As IResource
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: File containing the employment data
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AutoTimeMatrix
  commentId: F:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AutoTimeMatrix
  id: AutoTimeMatrix
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: AutoTimeMatrix
  nameWithType: AccessibilityCalculations.AutoTimeMatrix
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AutoTimeMatrix
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: AutoTimeMatrix
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 50
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "The auto time matrix")]

      public IResource AutoTimeMatrix
    return:
      type: XTMF.IResource
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="The auto time matrix")>

      Public AutoTimeMatrix As IResource
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: The auto time matrix
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.TransitIVTTMatrix
  commentId: F:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.TransitIVTTMatrix
  id: TransitIVTTMatrix
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: TransitIVTTMatrix
  nameWithType: AccessibilityCalculations.TransitIVTTMatrix
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.TransitIVTTMatrix
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: TransitIVTTMatrix
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 53
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "The transit IVTT matrix")]

      public IResource TransitIVTTMatrix
    return:
      type: XTMF.IResource
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="The transit IVTT matrix")>

      Public TransitIVTTMatrix As IResource
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: The transit IVTT matrix
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.TotalTransitTimeMatrix
  commentId: F:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.TotalTransitTimeMatrix
  id: TotalTransitTimeMatrix
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: TotalTransitTimeMatrix
  nameWithType: AccessibilityCalculations.TotalTransitTimeMatrix
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.TotalTransitTimeMatrix
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: TotalTransitTimeMatrix
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 56
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "The resource that will add all three transit time matrices")]

      public IResource TotalTransitTimeMatrix
    return:
      type: XTMF.IResource
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="The resource that will add all three transit time matrices")>

      Public TotalTransitTimeMatrix As IResource
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: The resource that will add all three transit time matrices
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AccessibilityTimes
  commentId: F:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AccessibilityTimes
  id: AccessibilityTimes
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: AccessibilityTimes
  nameWithType: AccessibilityCalculations.AccessibilityTimes
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AccessibilityTimes
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: AccessibilityTimes
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 59
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [RunParameter("Accessibility Times to Analyze", "10,15,20,30,45,60,90", typeof (NumberList), "A comma separated list of accessibility times to execute this against.")]

      public NumberList AccessibilityTimes
    return:
      type: TMG.DataUtility.NumberList
    content.vb: >-
      <RunParameter("Accessibility Times to Analyze", "10,15,20,30,45,60,90", GetType(NumberList), "A comma separated list of accessibility times to execute this against.")>

      Public AccessibilityTimes As NumberList
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.String,System.Type,System.String)
    arguments:
    - type: System.String
      value: Accessibility Times to Analyze
    - type: System.String
      value: 10,15,20,30,45,60,90
    - type: System.Type
      value: TMG.DataUtility.NumberList
    - type: System.String
      value: A comma separated list of accessibility times to execute this against.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ResultsFile
  commentId: F:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ResultsFile
  id: ResultsFile
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: ResultsFile
  nameWithType: AccessibilityCalculations.ResultsFile
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ResultsFile
  type: Field
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ResultsFile
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 62
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: >-
      [SubModelInformation(Required = true, Description = "Results file in .CSV format ")]

      public FileLocation ResultsFile
    return:
      type: TMG.Input.FileLocation
    content.vb: >-
      <SubModelInformation(Required:=True, Description:="Results file in .CSV format ")>

      Public ResultsFile As FileLocation
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Required
      type: System.Boolean
      value: true
    - name: Description
      type: System.String
      value: 'Results file in .CSV format '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Start
  commentId: M:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Start
  id: Start
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: AccessibilityCalculations.Start()
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Start()
  type: Method
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Start
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 68
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  overload: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Start*
  implements:
  - XTMF.ISelfContainedModule.Start
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AddToResults(System.Single,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Single})
  commentId: M:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AddToResults(System.Single,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Single})
  id: AddToResults(System.Single,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Single})
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: AddToResults(Single, Int32, Dictionary<Int32, Single>)
  nameWithType: AccessibilityCalculations.AddToResults(Single, Int32, Dictionary<Int32, Single>)
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AddToResults(System.Single, System.Int32, System.Collections.Generic.Dictionary<System.Int32, System.Single>)
  type: Method
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: AddToResults
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 183
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public void AddToResults(float population, int accessTime, Dictionary<int, float> results)
    parameters:
    - id: population
      type: System.Single
    - id: accessTime
      type: System.Int32
    - id: results
      type: System.Collections.Generic.Dictionary{System.Int32,System.Single}
    content.vb: Public Sub AddToResults(population As Single, accessTime As Integer, results As Dictionary(Of Integer, Single))
  overload: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AddToResults*
  nameWithType.vb: AccessibilityCalculations.AddToResults(Single, Int32, Dictionary(Of Int32, Single))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AddToResults(System.Single, System.Int32, System.Collections.Generic.Dictionary(Of System.Int32, System.Single))
  name.vb: AddToResults(Single, Int32, Dictionary(Of Int32, Single))
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Name
  commentId: P:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Name
  id: Name
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: AccessibilityCalculations.Name
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Name
  type: Property
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Name
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 195
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Name*
  implements:
  - XTMF.IModule.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Progress
  commentId: P:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Progress
  id: Progress
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: AccessibilityCalculations.Progress
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Progress
  type: Property
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Progress
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 201
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public float Progress { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Progress As Single
  overload: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Progress*
  implements:
  - XTMF.IModule.Progress
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ProgressColour
  commentId: P:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ProgressColour
  id: ProgressColour
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: ProgressColour
  nameWithType: AccessibilityCalculations.ProgressColour
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ProgressColour
  type: Property
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ProgressColour
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 207
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public Tuple<byte, byte, byte> ProgressColour { get; }
    parameters: []
    return:
      type: System.Tuple{System.Byte,System.Byte,System.Byte}
    content.vb: Public ReadOnly Property ProgressColour As Tuple(Of Byte, Byte, Byte)
  overload: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ProgressColour*
  implements:
  - XTMF.IModule.ProgressColour
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.RuntimeValidation(System.String@)
  commentId: M:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.RuntimeValidation(System.String@)
  id: RuntimeValidation(System.String@)
  parent: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations
  langs:
  - csharp
  - vb
  name: RuntimeValidation(ref String)
  nameWithType: AccessibilityCalculations.RuntimeValidation(ref String)
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.RuntimeValidation(ref System.String)
  type: Method
  source:
    remote:
      path: Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RuntimeValidation
    path: ../../../XTMF/Code/Tasha.Validation/PerformanceMeasures/AccessibilityCalculations.cs
    startLine: 212
  assemblies:
  - Tasha.Validation
  namespace: Tasha.Validation.PerformanceMeasures
  syntax:
    content: public bool RuntimeValidation(ref string error)
    parameters:
    - id: error
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function RuntimeValidation(ByRef error As String) As Boolean
  overload: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.RuntimeValidation*
  implements:
  - XTMF.IModule.RuntimeValidation(System.String@)
  nameWithType.vb: AccessibilityCalculations.RuntimeValidation(ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.RuntimeValidation(ByRef System.String)
  name.vb: RuntimeValidation(ByRef String)
references:
- uid: Tasha.Validation.PerformanceMeasures
  commentId: N:Tasha.Validation.PerformanceMeasures
  isExternal: false
  name: Tasha.Validation.PerformanceMeasures
  nameWithType: Tasha.Validation.PerformanceMeasures
  fullName: Tasha.Validation.PerformanceMeasures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: XTMF.ISelfContainedModule
  commentId: T:XTMF.ISelfContainedModule
  parent: XTMF
  isExternal: false
  name: ISelfContainedModule
  nameWithType: ISelfContainedModule
  fullName: XTMF.ISelfContainedModule
- uid: XTMF.IModule
  commentId: T:XTMF.IModule
  parent: XTMF
  isExternal: false
  name: IModule
  nameWithType: IModule
  fullName: XTMF.IModule
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  name: EnsureExactlyOne(IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: XTMF
  commentId: N:XTMF
  isExternal: false
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper
  commentId: T:TMG.Functions.ModuleHelper
  parent: TMG.Functions
  isExternal: false
  name: ModuleHelper
  nameWithType: ModuleHelper
  fullName: TMG.Functions.ModuleHelper
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  isExternal: true
  name: EnsureExactlyOne(IModule, IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions
  commentId: N:TMG.Functions
  isExternal: false
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: Tasha.Common.ITashaRuntime
  commentId: T:Tasha.Common.ITashaRuntime
  parent: Tasha.Common
  isExternal: false
  name: ITashaRuntime
  nameWithType: ITashaRuntime
  fullName: Tasha.Common.ITashaRuntime
- uid: Tasha.Common
  commentId: N:Tasha.Common
  isExternal: false
  name: Tasha.Common
  nameWithType: Tasha.Common
  fullName: Tasha.Common
- uid: Datastructure.RangeSet
  commentId: T:Datastructure.RangeSet
  parent: Datastructure
  isExternal: false
  name: RangeSet
  nameWithType: RangeSet
  fullName: Datastructure.RangeSet
- uid: Datastructure
  commentId: N:Datastructure
  isExternal: false
  name: Datastructure
  nameWithType: Datastructure
  fullName: Datastructure
- uid: XTMF.IResource
  commentId: T:XTMF.IResource
  parent: XTMF
  isExternal: false
  name: IResource
  nameWithType: IResource
  fullName: XTMF.IResource
- uid: TMG.DataUtility.NumberList
  commentId: T:TMG.DataUtility.NumberList
  parent: TMG.DataUtility
  isExternal: false
  name: NumberList
  nameWithType: NumberList
  fullName: TMG.DataUtility.NumberList
- uid: TMG.DataUtility
  commentId: N:TMG.DataUtility
  isExternal: false
  name: TMG.DataUtility
  nameWithType: TMG.DataUtility
  fullName: TMG.DataUtility
- uid: TMG.Input.FileLocation
  commentId: T:TMG.Input.FileLocation
  parent: TMG.Input
  isExternal: false
  name: FileLocation
  nameWithType: FileLocation
  fullName: TMG.Input.FileLocation
- uid: TMG.Input
  commentId: N:TMG.Input
  isExternal: false
  name: TMG.Input
  nameWithType: TMG.Input
  fullName: TMG.Input
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Start*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Start
  isExternal: false
  name: Start
  nameWithType: AccessibilityCalculations.Start
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Start
- uid: XTMF.ISelfContainedModule.Start
  commentId: M:XTMF.ISelfContainedModule.Start
  parent: XTMF.ISelfContainedModule
  isExternal: false
  name: Start()
  nameWithType: ISelfContainedModule.Start()
  fullName: XTMF.ISelfContainedModule.Start()
  spec.csharp:
  - uid: XTMF.ISelfContainedModule.Start
    name: Start
    nameWithType: ISelfContainedModule.Start
    fullName: XTMF.ISelfContainedModule.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.ISelfContainedModule.Start
    name: Start
    nameWithType: ISelfContainedModule.Start
    fullName: XTMF.ISelfContainedModule.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AddToResults*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AddToResults
  isExternal: false
  name: AddToResults
  nameWithType: AccessibilityCalculations.AddToResults
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.AddToResults
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.Dictionary{System.Int32,System.Single}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.Single}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Int32, Single>
  nameWithType: Dictionary<Int32, Single>
  fullName: System.Collections.Generic.Dictionary<System.Int32, System.Single>
  nameWithType.vb: Dictionary(Of Int32, Single)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Int32, System.Single)
  name.vb: Dictionary(Of Int32, Single)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Name*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Name
  isExternal: false
  name: Name
  nameWithType: AccessibilityCalculations.Name
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Name
- uid: XTMF.IModule.Name
  commentId: P:XTMF.IModule.Name
  parent: XTMF.IModule
  isExternal: false
  name: Name
  nameWithType: IModule.Name
  fullName: XTMF.IModule.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Progress*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Progress
  isExternal: false
  name: Progress
  nameWithType: AccessibilityCalculations.Progress
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.Progress
- uid: XTMF.IModule.Progress
  commentId: P:XTMF.IModule.Progress
  parent: XTMF.IModule
  isExternal: false
  name: Progress
  nameWithType: IModule.Progress
  fullName: XTMF.IModule.Progress
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ProgressColour*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ProgressColour
  isExternal: false
  name: ProgressColour
  nameWithType: AccessibilityCalculations.ProgressColour
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.ProgressColour
- uid: XTMF.IModule.ProgressColour
  commentId: P:XTMF.IModule.ProgressColour
  parent: XTMF.IModule
  isExternal: false
  name: ProgressColour
  nameWithType: IModule.ProgressColour
  fullName: XTMF.IModule.ProgressColour
- uid: System.Tuple{System.Byte,System.Byte,System.Byte}
  commentId: T:System.Tuple{System.Byte,System.Byte,System.Byte}
  parent: System
  definition: System.Tuple`3
  name: Tuple<Byte, Byte, Byte>
  nameWithType: Tuple<Byte, Byte, Byte>
  fullName: System.Tuple<System.Byte, System.Byte, System.Byte>
  nameWithType.vb: Tuple(Of Byte, Byte, Byte)
  fullName.vb: System.Tuple(Of System.Byte, System.Byte, System.Byte)
  name.vb: Tuple(Of Byte, Byte, Byte)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.RuntimeValidation*
  commentId: Overload:Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.RuntimeValidation
  isExternal: false
  name: RuntimeValidation
  nameWithType: AccessibilityCalculations.RuntimeValidation
  fullName: Tasha.Validation.PerformanceMeasures.AccessibilityCalculations.RuntimeValidation
- uid: XTMF.IModule.RuntimeValidation(System.String@)
  commentId: M:XTMF.IModule.RuntimeValidation(System.String@)
  parent: XTMF.IModule
  isExternal: true
  name: RuntimeValidation(String)
  nameWithType: IModule.RuntimeValidation(String)
  fullName: XTMF.IModule.RuntimeValidation(System.String)
  spec.csharp:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
