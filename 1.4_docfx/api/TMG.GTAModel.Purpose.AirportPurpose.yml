### YamlMime:ManagedReference
items:
- uid: TMG.GTAModel.Purpose.AirportPurpose
  commentId: T:TMG.GTAModel.Purpose.AirportPurpose
  id: AirportPurpose
  parent: TMG.GTAModel.Purpose
  children:
  - TMG.GTAModel.Purpose.AirportPurpose.AutoModeName
  - TMG.GTAModel.Purpose.AirportPurpose.Beta
  - TMG.GTAModel.Purpose.AirportPurpose.Constant
  - TMG.GTAModel.Purpose.AirportPurpose.Flows
  - TMG.GTAModel.Purpose.AirportPurpose.MaxSecondaryDistance
  - TMG.GTAModel.Purpose.AirportPurpose.ModeSplit
  - TMG.GTAModel.Purpose.AirportPurpose.Name
  - TMG.GTAModel.Purpose.AirportPurpose.PrimaryAirport
  - TMG.GTAModel.Purpose.AirportPurpose.Progress
  - TMG.GTAModel.Purpose.AirportPurpose.ProgressColour
  - TMG.GTAModel.Purpose.AirportPurpose.PurposeName
  - TMG.GTAModel.Purpose.AirportPurpose.RegionConstants
  - TMG.GTAModel.Purpose.AirportPurpose.RegionEmploymentFactor
  - TMG.GTAModel.Purpose.AirportPurpose.RegionNumbers
  - TMG.GTAModel.Purpose.AirportPurpose.RegionResidenceFactor
  - TMG.GTAModel.Purpose.AirportPurpose.ReturnFactor
  - TMG.GTAModel.Purpose.AirportPurpose.Root
  - TMG.GTAModel.Purpose.AirportPurpose.Run
  - TMG.GTAModel.Purpose.AirportPurpose.RuntimeValidation(System.String@)
  - TMG.GTAModel.Purpose.AirportPurpose.SaveMatrix
  - TMG.GTAModel.Purpose.AirportPurpose.SecondaryAirports
  langs:
  - csharp
  - vb
  name: AirportPurpose
  nameWithType: AirportPurpose
  fullName: TMG.GTAModel.Purpose.AirportPurpose
  type: Class
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: AirportPurpose
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 30
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: 'public class AirportPurpose : IPurpose, IModule'
    content.vb: >-
      Public Class AirportPurpose
          Implements IPurpose, IModule
  inheritance:
  - System.Object
  implements:
  - TMG.IPurpose
  - XTMF.IModule
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TMG.GTAModel.Purpose.AirportPurpose.AutoModeName
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.AutoModeName
  id: AutoModeName
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: AutoModeName
  nameWithType: AirportPurpose.AutoModeName
  fullName: TMG.GTAModel.Purpose.AirportPurpose.AutoModeName
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: AutoModeName
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 33
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Attach To Mode", "ADrive", "The name of the mode to attach the data to.")]

      public string AutoModeName
    return:
      type: System.String
    content.vb: >-
      <RunParameter("Attach To Mode", "ADrive", "The name of the mode to attach the data to.")>

      Public AutoModeName As String
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Attach To Mode
    - type: System.String
      value: ADrive
    - type: System.String
      value: The name of the mode to attach the data to.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.Beta
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.Beta
  id: Beta
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: Beta
  nameWithType: AirportPurpose.Beta
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Beta
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Beta
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 36
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Beta", -0.1F, "The beta parameter applied to the distance utility calculation for secondary airports.")]

      public float Beta
    return:
      type: System.Single
    content.vb: >-
      <RunParameter("Beta", -0.1F, "The beta parameter applied to the distance utility calculation for secondary airports.")>

      Public Beta As Single
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Beta
    - type: System.Single
      value: -0.100000001
    - type: System.String
      value: The beta parameter applied to the distance utility calculation for secondary airports.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.Constant
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.Constant
  id: Constant
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: Constant
  nameWithType: AirportPurpose.Constant
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Constant
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Constant
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 39
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Region Level Constant", -27.7274F, "A constant applied across all regions.")]

      public float Constant
    return:
      type: System.Single
    content.vb: >-
      <RunParameter("Region Level Constant", -27.7274F, "A constant applied across all regions.")>

      Public Constant As Single
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Region Level Constant
    - type: System.Single
      value: -27.7273998
    - type: System.String
      value: A constant applied across all regions.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.MaxSecondaryDistance
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.MaxSecondaryDistance
  id: MaxSecondaryDistance
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: MaxSecondaryDistance
  nameWithType: AirportPurpose.MaxSecondaryDistance
  fullName: TMG.GTAModel.Purpose.AirportPurpose.MaxSecondaryDistance
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: MaxSecondaryDistance
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 42
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Max Secondary Distance", 60F, "The maximum distance that a secondary airport can be accessed from, 0 if any.")]

      public float MaxSecondaryDistance
    return:
      type: System.Single
    content.vb: >-
      <RunParameter("Max Secondary Distance", 60F, "The maximum distance that a secondary airport can be accessed from, 0 if any.")>

      Public MaxSecondaryDistance As Single
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Max Secondary Distance
    - type: System.Single
      value: 60
    - type: System.String
      value: The maximum distance that a secondary airport can be accessed from, 0 if any.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.PrimaryAirport
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.PrimaryAirport
  id: PrimaryAirport
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: PrimaryAirport
  nameWithType: AirportPurpose.PrimaryAirport
  fullName: TMG.GTAModel.Purpose.AirportPurpose.PrimaryAirport
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: PrimaryAirport
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 45
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [SubModelInformation(Description = "The primary airport in the study area.", Required = true)]

      public Airport PrimaryAirport
    return:
      type: TMG.GTAModel.Purpose.Airport
    content.vb: >-
      <SubModelInformation(Description:="The primary airport in the study area.", Required:=True)>

      Public PrimaryAirport As Airport
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Description
      type: System.String
      value: The primary airport in the study area.
    - name: Required
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.RegionConstants
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.RegionConstants
  id: RegionConstants
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: RegionConstants
  nameWithType: AirportPurpose.RegionConstants
  fullName: TMG.GTAModel.Purpose.AirportPurpose.RegionConstants
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegionConstants
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 48
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Region Constants", "53.79565,-226.373,0,0", typeof (FloatList), "Constant parameters for each specified region.")]

      public FloatList RegionConstants
    return:
      type: TMG.GTAModel.DataUtility.FloatList
    content.vb: >-
      <RunParameter("Region Constants", "53.79565,-226.373,0,0", GetType(FloatList), "Constant parameters for each specified region.")>

      Public RegionConstants As FloatList
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.String,System.Type,System.String)
    arguments:
    - type: System.String
      value: Region Constants
    - type: System.String
      value: 53.79565,-226.373,0,0
    - type: System.Type
      value: TMG.GTAModel.DataUtility.FloatList
    - type: System.String
      value: Constant parameters for each specified region.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.RegionEmploymentFactor
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.RegionEmploymentFactor
  id: RegionEmploymentFactor
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: RegionEmploymentFactor
  nameWithType: AirportPurpose.RegionEmploymentFactor
  fullName: TMG.GTAModel.Purpose.AirportPurpose.RegionEmploymentFactor
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegionEmploymentFactor
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 51
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Region Employment Factor", 0.000876F, "The factor applied against the region's professional employment.")]

      public float RegionEmploymentFactor
    return:
      type: System.Single
    content.vb: >-
      <RunParameter("Region Employment Factor", 0.000876F, "The factor applied against the region's professional employment.")>

      Public RegionEmploymentFactor As Single
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Region Employment Factor
    - type: System.Single
      value: 0.000875999976
    - type: System.String
      value: The factor applied against the region's professional employment.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.RegionNumbers
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.RegionNumbers
  id: RegionNumbers
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: RegionNumbers
  nameWithType: AirportPurpose.RegionNumbers
  fullName: TMG.GTAModel.Purpose.AirportPurpose.RegionNumbers
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegionNumbers
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 54
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Region Numbers", "1,2,3,4", typeof (NumberList), "The numbers for the regions that we will be processing.")]

      public NumberList RegionNumbers
    return:
      type: TMG.GTAModel.DataUtility.NumberList
    content.vb: >-
      <RunParameter("Region Numbers", "1,2,3,4", GetType(NumberList), "The numbers for the regions that we will be processing.")>

      Public RegionNumbers As NumberList
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.String,System.Type,System.String)
    arguments:
    - type: System.String
      value: Region Numbers
    - type: System.String
      value: 1,2,3,4
    - type: System.Type
      value: TMG.GTAModel.DataUtility.NumberList
    - type: System.String
      value: The numbers for the regions that we will be processing.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.RegionResidenceFactor
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.RegionResidenceFactor
  id: RegionResidenceFactor
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: RegionResidenceFactor
  nameWithType: AirportPurpose.RegionResidenceFactor
  fullName: TMG.GTAModel.Purpose.AirportPurpose.RegionResidenceFactor
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegionResidenceFactor
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 57
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Region Residence Factor", 0.004993F, "The factor applied against the region's professional residence.")]

      public float RegionResidenceFactor
    return:
      type: System.Single
    content.vb: >-
      <RunParameter("Region Residence Factor", 0.004993F, "The factor applied against the region's professional residence.")>

      Public RegionResidenceFactor As Single
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Region Residence Factor
    - type: System.Single
      value: 0.00499300007
    - type: System.String
      value: The factor applied against the region's professional residence.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.ReturnFactor
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.ReturnFactor
  id: ReturnFactor
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: ReturnFactor
  nameWithType: AirportPurpose.ReturnFactor
  fullName: TMG.GTAModel.Purpose.AirportPurpose.ReturnFactor
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ReturnFactor
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 60
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Return Factor", 0.9757F, "The factor to compute return trips, referred to as dfac in previous documentation.")]

      public float ReturnFactor
    return:
      type: System.Single
    content.vb: >-
      <RunParameter("Return Factor", 0.9757F, "The factor to compute return trips, referred to as dfac in previous documentation.")>

      Public ReturnFactor As Single
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Return Factor
    - type: System.Single
      value: 0.975700021
    - type: System.String
      value: The factor to compute return trips, referred to as dfac in previous documentation.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.Root
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.Root
  id: Root
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: AirportPurpose.Root
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Root
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Root
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 63
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public I4StepModel Root
    return:
      type: TMG.I4StepModel
    content.vb: Public Root As I4StepModel
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.SaveMatrix
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.SaveMatrix
  id: SaveMatrix
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: SaveMatrix
  nameWithType: AirportPurpose.SaveMatrix
  fullName: TMG.GTAModel.Purpose.AirportPurpose.SaveMatrix
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: SaveMatrix
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 66
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Save Data", false, "Should we save the airport matrix?")]

      public bool SaveMatrix
    return:
      type: System.Boolean
    content.vb: >-
      <RunParameter("Save Data", False, "Should we save the airport matrix?")>

      Public SaveMatrix As Boolean
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Save Data
    - type: System.Boolean
      value: false
    - type: System.String
      value: Should we save the airport matrix?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.SecondaryAirports
  commentId: F:TMG.GTAModel.Purpose.AirportPurpose.SecondaryAirports
  id: SecondaryAirports
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: SecondaryAirports
  nameWithType: AirportPurpose.SecondaryAirports
  fullName: TMG.GTAModel.Purpose.AirportPurpose.SecondaryAirports
  type: Field
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: SecondaryAirports
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 69
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [SubModelInformation(Description = "A list of airports to process.", Required = true)]

      public List<Airport> SecondaryAirports
    return:
      type: System.Collections.Generic.List{TMG.GTAModel.Purpose.Airport}
    content.vb: >-
      <SubModelInformation(Description:="A list of airports to process.", Required:=True)>

      Public SecondaryAirports As List(Of Airport)
  attributes:
  - type: XTMF.SubModelInformation
    ctor: XTMF.SubModelInformation.#ctor
    arguments: []
    namedArguments:
    - name: Description
      type: System.String
      value: A list of airports to process.
    - name: Required
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.Flows
  commentId: P:TMG.GTAModel.Purpose.AirportPurpose.Flows
  id: Flows
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: Flows
  nameWithType: AirportPurpose.Flows
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Flows
  type: Property
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Flows
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 71
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public List<TreeData<float[][]>> Flows { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TMG.TreeData{System.Single[][]}}
    content.vb: Public Property Flows As List(Of TreeData(Of Single()()))
  overload: TMG.GTAModel.Purpose.AirportPurpose.Flows*
  implements:
  - TMG.IPurpose.Flows
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.ModeSplit
  commentId: P:TMG.GTAModel.Purpose.AirportPurpose.ModeSplit
  id: ModeSplit
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: ModeSplit
  nameWithType: AirportPurpose.ModeSplit
  fullName: TMG.GTAModel.Purpose.AirportPurpose.ModeSplit
  type: Property
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ModeSplit
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 77
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public IMultiModeSplit ModeSplit { get; set; }
    parameters: []
    return:
      type: TMG.IMultiModeSplit
    content.vb: Public Property ModeSplit As IMultiModeSplit
  overload: TMG.GTAModel.Purpose.AirportPurpose.ModeSplit*
  implements:
  - TMG.IPurpose.ModeSplit
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.Name
  commentId: P:TMG.GTAModel.Purpose.AirportPurpose.Name
  id: Name
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: AirportPurpose.Name
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Name
  type: Property
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Name
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 80
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: TMG.GTAModel.Purpose.AirportPurpose.Name*
  implements:
  - XTMF.IModule.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.Progress
  commentId: P:TMG.GTAModel.Purpose.AirportPurpose.Progress
  id: Progress
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: AirportPurpose.Progress
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Progress
  type: Property
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Progress
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 86
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public float Progress { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Progress As Single
  overload: TMG.GTAModel.Purpose.AirportPurpose.Progress*
  implements:
  - XTMF.IModule.Progress
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.GTAModel.Purpose.AirportPurpose.ProgressColour
  commentId: P:TMG.GTAModel.Purpose.AirportPurpose.ProgressColour
  id: ProgressColour
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: ProgressColour
  nameWithType: AirportPurpose.ProgressColour
  fullName: TMG.GTAModel.Purpose.AirportPurpose.ProgressColour
  type: Property
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ProgressColour
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 91
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public Tuple<byte, byte, byte> ProgressColour { get; }
    parameters: []
    return:
      type: System.Tuple{System.Byte,System.Byte,System.Byte}
    content.vb: Public ReadOnly Property ProgressColour As Tuple(Of Byte, Byte, Byte)
  overload: TMG.GTAModel.Purpose.AirportPurpose.ProgressColour*
  implements:
  - XTMF.IModule.ProgressColour
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.GTAModel.Purpose.AirportPurpose.PurposeName
  commentId: P:TMG.GTAModel.Purpose.AirportPurpose.PurposeName
  id: PurposeName
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: PurposeName
  nameWithType: AirportPurpose.PurposeName
  fullName: TMG.GTAModel.Purpose.AirportPurpose.PurposeName
  type: Property
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: PurposeName
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 96
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: >-
      [RunParameter("Purpose Name", "Airport", "The name of this purpose.")]

      public string PurposeName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <RunParameter("Purpose Name", "Airport", "The name of this purpose.")>

      Public Property PurposeName As String
  overload: TMG.GTAModel.Purpose.AirportPurpose.PurposeName*
  implements:
  - TMG.IPurpose.PurposeName
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Purpose Name
    - type: System.String
      value: Airport
    - type: System.String
      value: The name of this purpose.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.Run
  commentId: M:TMG.GTAModel.Purpose.AirportPurpose.Run
  id: Run
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: Run()
  nameWithType: AirportPurpose.Run()
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Run()
  type: Method
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Run
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 99
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public void Run()
    content.vb: Public Sub Run
  overload: TMG.GTAModel.Purpose.AirportPurpose.Run*
  implements:
  - TMG.IPurpose.Run
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.Purpose.AirportPurpose.RuntimeValidation(System.String@)
  commentId: M:TMG.GTAModel.Purpose.AirportPurpose.RuntimeValidation(System.String@)
  id: RuntimeValidation(System.String@)
  parent: TMG.GTAModel.Purpose.AirportPurpose
  langs:
  - csharp
  - vb
  name: RuntimeValidation(ref String)
  nameWithType: AirportPurpose.RuntimeValidation(ref String)
  fullName: TMG.GTAModel.Purpose.AirportPurpose.RuntimeValidation(ref System.String)
  type: Method
  source:
    remote:
      path: Code/GTAModel/Purpose/AirportPurpose.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RuntimeValidation
    path: ../../../XTMF/Code/GTAModel/Purpose/AirportPurpose.cs
    startLine: 127
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.Purpose
  syntax:
    content: public bool RuntimeValidation(ref string error)
    parameters:
    - id: error
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function RuntimeValidation(ByRef error As String) As Boolean
  overload: TMG.GTAModel.Purpose.AirportPurpose.RuntimeValidation*
  implements:
  - XTMF.IModule.RuntimeValidation(System.String@)
  nameWithType.vb: AirportPurpose.RuntimeValidation(ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TMG.GTAModel.Purpose.AirportPurpose.RuntimeValidation(ByRef System.String)
  name.vb: RuntimeValidation(ByRef String)
references:
- uid: TMG.GTAModel.Purpose
  commentId: N:TMG.GTAModel.Purpose
  isExternal: false
  name: TMG.GTAModel.Purpose
  nameWithType: TMG.GTAModel.Purpose
  fullName: TMG.GTAModel.Purpose
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TMG.IPurpose
  commentId: T:TMG.IPurpose
  parent: TMG
  isExternal: false
  name: IPurpose
  nameWithType: IPurpose
  fullName: TMG.IPurpose
- uid: XTMF.IModule
  commentId: T:XTMF.IModule
  parent: XTMF
  isExternal: false
  name: IModule
  nameWithType: IModule
  fullName: XTMF.IModule
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  name: EnsureExactlyOne(IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TMG
  commentId: N:TMG
  isExternal: false
  name: TMG
  nameWithType: TMG
  fullName: TMG
- uid: XTMF
  commentId: N:XTMF
  isExternal: false
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper
  commentId: T:TMG.Functions.ModuleHelper
  parent: TMG.Functions
  isExternal: false
  name: ModuleHelper
  nameWithType: ModuleHelper
  fullName: TMG.Functions.ModuleHelper
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  isExternal: true
  name: EnsureExactlyOne(IModule, IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions
  commentId: N:TMG.Functions
  isExternal: false
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TMG.GTAModel.Purpose.Airport
  commentId: T:TMG.GTAModel.Purpose.Airport
  parent: TMG.GTAModel.Purpose
  isExternal: false
  name: Airport
  nameWithType: Airport
  fullName: TMG.GTAModel.Purpose.Airport
- uid: TMG.GTAModel.DataUtility.FloatList
  commentId: T:TMG.GTAModel.DataUtility.FloatList
  parent: TMG.GTAModel.DataUtility
  isExternal: false
  name: FloatList
  nameWithType: FloatList
  fullName: TMG.GTAModel.DataUtility.FloatList
- uid: TMG.GTAModel.DataUtility
  commentId: N:TMG.GTAModel.DataUtility
  isExternal: false
  name: TMG.GTAModel.DataUtility
  nameWithType: TMG.GTAModel.DataUtility
  fullName: TMG.GTAModel.DataUtility
- uid: TMG.GTAModel.DataUtility.NumberList
  commentId: T:TMG.GTAModel.DataUtility.NumberList
  parent: TMG.GTAModel.DataUtility
  isExternal: false
  name: NumberList
  nameWithType: NumberList
  fullName: TMG.GTAModel.DataUtility.NumberList
- uid: TMG.I4StepModel
  commentId: T:TMG.I4StepModel
  parent: TMG
  isExternal: false
  name: I4StepModel
  nameWithType: I4StepModel
  fullName: TMG.I4StepModel
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List{TMG.GTAModel.Purpose.Airport}
  commentId: T:System.Collections.Generic.List{TMG.GTAModel.Purpose.Airport}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Airport>
  nameWithType: List<Airport>
  fullName: System.Collections.Generic.List<TMG.GTAModel.Purpose.Airport>
  nameWithType.vb: List(Of Airport)
  fullName.vb: System.Collections.Generic.List(Of TMG.GTAModel.Purpose.Airport)
  name.vb: List(Of Airport)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.GTAModel.Purpose.Airport
    name: Airport
    nameWithType: Airport
    fullName: TMG.GTAModel.Purpose.Airport
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.GTAModel.Purpose.Airport
    name: Airport
    nameWithType: Airport
    fullName: TMG.GTAModel.Purpose.Airport
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TMG.GTAModel.Purpose.AirportPurpose.Flows*
  commentId: Overload:TMG.GTAModel.Purpose.AirportPurpose.Flows
  isExternal: false
  name: Flows
  nameWithType: AirportPurpose.Flows
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Flows
- uid: TMG.IPurpose.Flows
  commentId: P:TMG.IPurpose.Flows
  parent: TMG.IPurpose
  isExternal: false
  name: Flows
  nameWithType: IPurpose.Flows
  fullName: TMG.IPurpose.Flows
- uid: System.Collections.Generic.List{TMG.TreeData{System.Single[][]}}
  commentId: T:System.Collections.Generic.List{TMG.TreeData{System.Single[][]}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TreeData<Single[][]>>
  nameWithType: List<TreeData<Single[][]>>
  fullName: System.Collections.Generic.List<TMG.TreeData<System.Single[][]>>
  nameWithType.vb: List(Of TreeData(Of Single()()))
  fullName.vb: System.Collections.Generic.List(Of TMG.TreeData(Of System.Single()()))
  name.vb: List(Of TreeData(Of Single()()))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.GTAModel.Purpose.AirportPurpose.ModeSplit*
  commentId: Overload:TMG.GTAModel.Purpose.AirportPurpose.ModeSplit
  isExternal: false
  name: ModeSplit
  nameWithType: AirportPurpose.ModeSplit
  fullName: TMG.GTAModel.Purpose.AirportPurpose.ModeSplit
- uid: TMG.IPurpose.ModeSplit
  commentId: P:TMG.IPurpose.ModeSplit
  parent: TMG.IPurpose
  isExternal: false
  name: ModeSplit
  nameWithType: IPurpose.ModeSplit
  fullName: TMG.IPurpose.ModeSplit
- uid: TMG.IMultiModeSplit
  commentId: T:TMG.IMultiModeSplit
  parent: TMG
  isExternal: false
  name: IMultiModeSplit
  nameWithType: IMultiModeSplit
  fullName: TMG.IMultiModeSplit
- uid: TMG.GTAModel.Purpose.AirportPurpose.Name*
  commentId: Overload:TMG.GTAModel.Purpose.AirportPurpose.Name
  isExternal: false
  name: Name
  nameWithType: AirportPurpose.Name
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Name
- uid: XTMF.IModule.Name
  commentId: P:XTMF.IModule.Name
  parent: XTMF.IModule
  isExternal: false
  name: Name
  nameWithType: IModule.Name
  fullName: XTMF.IModule.Name
- uid: TMG.GTAModel.Purpose.AirportPurpose.Progress*
  commentId: Overload:TMG.GTAModel.Purpose.AirportPurpose.Progress
  isExternal: false
  name: Progress
  nameWithType: AirportPurpose.Progress
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Progress
- uid: XTMF.IModule.Progress
  commentId: P:XTMF.IModule.Progress
  parent: XTMF.IModule
  isExternal: false
  name: Progress
  nameWithType: IModule.Progress
  fullName: XTMF.IModule.Progress
- uid: TMG.GTAModel.Purpose.AirportPurpose.ProgressColour*
  commentId: Overload:TMG.GTAModel.Purpose.AirportPurpose.ProgressColour
  isExternal: false
  name: ProgressColour
  nameWithType: AirportPurpose.ProgressColour
  fullName: TMG.GTAModel.Purpose.AirportPurpose.ProgressColour
- uid: XTMF.IModule.ProgressColour
  commentId: P:XTMF.IModule.ProgressColour
  parent: XTMF.IModule
  isExternal: false
  name: ProgressColour
  nameWithType: IModule.ProgressColour
  fullName: XTMF.IModule.ProgressColour
- uid: System.Tuple{System.Byte,System.Byte,System.Byte}
  commentId: T:System.Tuple{System.Byte,System.Byte,System.Byte}
  parent: System
  definition: System.Tuple`3
  name: Tuple<Byte, Byte, Byte>
  nameWithType: Tuple<Byte, Byte, Byte>
  fullName: System.Tuple<System.Byte, System.Byte, System.Byte>
  nameWithType.vb: Tuple(Of Byte, Byte, Byte)
  fullName.vb: System.Tuple(Of System.Byte, System.Byte, System.Byte)
  name.vb: Tuple(Of Byte, Byte, Byte)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.GTAModel.Purpose.AirportPurpose.PurposeName*
  commentId: Overload:TMG.GTAModel.Purpose.AirportPurpose.PurposeName
  isExternal: false
  name: PurposeName
  nameWithType: AirportPurpose.PurposeName
  fullName: TMG.GTAModel.Purpose.AirportPurpose.PurposeName
- uid: TMG.IPurpose.PurposeName
  commentId: P:TMG.IPurpose.PurposeName
  parent: TMG.IPurpose
  isExternal: false
  name: PurposeName
  nameWithType: IPurpose.PurposeName
  fullName: TMG.IPurpose.PurposeName
- uid: TMG.GTAModel.Purpose.AirportPurpose.Run*
  commentId: Overload:TMG.GTAModel.Purpose.AirportPurpose.Run
  isExternal: false
  name: Run
  nameWithType: AirportPurpose.Run
  fullName: TMG.GTAModel.Purpose.AirportPurpose.Run
- uid: TMG.IPurpose.Run
  commentId: M:TMG.IPurpose.Run
  parent: TMG.IPurpose
  isExternal: false
  name: Run()
  nameWithType: IPurpose.Run()
  fullName: TMG.IPurpose.Run()
  spec.csharp:
  - uid: TMG.IPurpose.Run
    name: Run
    nameWithType: IPurpose.Run
    fullName: TMG.IPurpose.Run
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.IPurpose.Run
    name: Run
    nameWithType: IPurpose.Run
    fullName: TMG.IPurpose.Run
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.GTAModel.Purpose.AirportPurpose.RuntimeValidation*
  commentId: Overload:TMG.GTAModel.Purpose.AirportPurpose.RuntimeValidation
  isExternal: false
  name: RuntimeValidation
  nameWithType: AirportPurpose.RuntimeValidation
  fullName: TMG.GTAModel.Purpose.AirportPurpose.RuntimeValidation
- uid: XTMF.IModule.RuntimeValidation(System.String@)
  commentId: M:XTMF.IModule.RuntimeValidation(System.String@)
  parent: XTMF.IModule
  isExternal: true
  name: RuntimeValidation(String)
  nameWithType: IModule.RuntimeValidation(String)
  fullName: XTMF.IModule.RuntimeValidation(System.String)
  spec.csharp:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
