### YamlMime:ManagedReference
items:
- uid: TMG.GTAModel.DirectModeAggregationTally
  commentId: T:TMG.GTAModel.DirectModeAggregationTally
  id: DirectModeAggregationTally
  parent: TMG.GTAModel
  children:
  - TMG.GTAModel.DirectModeAggregationTally.GetMode(System.Int32)
  - TMG.GTAModel.DirectModeAggregationTally.GetResult(System.Collections.Generic.List{TMG.TreeData{System.Single[][]}},System.Int32)
  - TMG.GTAModel.DirectModeAggregationTally.GetResult(TMG.TreeData{System.Single[][]},System.Int32,System.Int32@)
  - TMG.GTAModel.DirectModeAggregationTally.IncludeTally(System.Single[][])
  - TMG.GTAModel.DirectModeAggregationTally.ModeIndexes
  - TMG.GTAModel.DirectModeAggregationTally.ModeNames
  - TMG.GTAModel.DirectModeAggregationTally.Name
  - TMG.GTAModel.DirectModeAggregationTally.Progress
  - TMG.GTAModel.DirectModeAggregationTally.ProgressColour
  - TMG.GTAModel.DirectModeAggregationTally.PurposeIndexes
  - TMG.GTAModel.DirectModeAggregationTally.PurposeNames
  - TMG.GTAModel.DirectModeAggregationTally.Root
  - TMG.GTAModel.DirectModeAggregationTally.RuntimeValidation(System.String@)
  langs:
  - csharp
  - vb
  name: DirectModeAggregationTally
  nameWithType: DirectModeAggregationTally
  fullName: TMG.GTAModel.DirectModeAggregationTally
  type: Class
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: DirectModeAggregationTally
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 26
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: 'public class DirectModeAggregationTally : IModeAggregationTally, IModule'
    content.vb: >-
      Public Class DirectModeAggregationTally

          Implements IModeAggregationTally, IModule
  inheritance:
  - System.Object
  derivedClasses:
  - TMG.GTAModel.InversedModeAggregationTally
  - TMG.GTAModel.SplitModeAggregationTally
  - TMG.GTAModel.Tally.StationAccessTally
  implements:
  - TMG.IModeAggregationTally
  - XTMF.IModule
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TMG.GTAModel.DirectModeAggregationTally.ModeNames
  commentId: F:TMG.GTAModel.DirectModeAggregationTally.ModeNames
  id: ModeNames
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: ModeNames
  nameWithType: DirectModeAggregationTally.ModeNames
  fullName: TMG.GTAModel.DirectModeAggregationTally.ModeNames
  type: Field
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ModeNames
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 33
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: >-
      [RunParameter("Modes", "Auto", "Ex \"Auto,Taxi,Passenger\" the modes you want to process.")]

      public string ModeNames
    return:
      type: System.String
    content.vb: >-
      <RunParameter("Modes", "Auto", "Ex ""Auto,Taxi,Passenger"" the modes you want to process.")>

      Public ModeNames As String
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Modes
    - type: System.String
      value: Auto
    - type: System.String
      value: Ex "Auto,Taxi,Passenger" the modes you want to process.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.DirectModeAggregationTally.PurposeNames
  commentId: F:TMG.GTAModel.DirectModeAggregationTally.PurposeNames
  id: PurposeNames
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: PurposeNames
  nameWithType: DirectModeAggregationTally.PurposeNames
  fullName: TMG.GTAModel.DirectModeAggregationTally.PurposeNames
  type: Field
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: PurposeNames
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 36
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: >-
      [RunParameter("Purposes", "", "Leave blank to do all purposes, otherwise Ex. \"A,B,D,E\" if you want to exclude C.")]

      public string PurposeNames
    return:
      type: System.String
    content.vb: >-
      <RunParameter("Purposes", "", "Leave blank to do all purposes, otherwise Ex. ""A,B,D,E"" if you want to exclude C.")>

      Public PurposeNames As String
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Purposes
    - type: System.String
      value: ''
    - type: System.String
      value: Leave blank to do all purposes, otherwise Ex. "A,B,D,E" if you want to exclude C.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.DirectModeAggregationTally.Root
  commentId: F:TMG.GTAModel.DirectModeAggregationTally.Root
  id: Root
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: DirectModeAggregationTally.Root
  fullName: TMG.GTAModel.DirectModeAggregationTally.Root
  type: Field
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Root
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 39
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: public I4StepModel Root
    return:
      type: TMG.I4StepModel
    content.vb: Public Root As I4StepModel
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.DirectModeAggregationTally.ModeIndexes
  commentId: F:TMG.GTAModel.DirectModeAggregationTally.ModeIndexes
  id: ModeIndexes
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: ModeIndexes
  nameWithType: DirectModeAggregationTally.ModeIndexes
  fullName: TMG.GTAModel.DirectModeAggregationTally.ModeIndexes
  type: Field
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ModeIndexes
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 44
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  summary: "\nThe mode indexes to process\n"
  example: []
  syntax:
    content: protected int[] ModeIndexes
    return:
      type: System.Int32[]
    content.vb: Protected ModeIndexes As Integer()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TMG.GTAModel.DirectModeAggregationTally.PurposeIndexes
  commentId: F:TMG.GTAModel.DirectModeAggregationTally.PurposeIndexes
  id: PurposeIndexes
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: PurposeIndexes
  nameWithType: DirectModeAggregationTally.PurposeIndexes
  fullName: TMG.GTAModel.DirectModeAggregationTally.PurposeIndexes
  type: Field
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: PurposeIndexes
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 49
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  summary: "\nThe purpose indexes to process\n"
  example: []
  syntax:
    content: protected int[] PurposeIndexes
    return:
      type: System.Int32[]
    content.vb: Protected PurposeIndexes As Integer()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TMG.GTAModel.DirectModeAggregationTally.Name
  commentId: P:TMG.GTAModel.DirectModeAggregationTally.Name
  id: Name
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DirectModeAggregationTally.Name
  fullName: TMG.GTAModel.DirectModeAggregationTally.Name
  type: Property
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Name
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 51
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: TMG.GTAModel.DirectModeAggregationTally.Name*
  implements:
  - XTMF.IModule.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.DirectModeAggregationTally.Progress
  commentId: P:TMG.GTAModel.DirectModeAggregationTally.Progress
  id: Progress
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: DirectModeAggregationTally.Progress
  fullName: TMG.GTAModel.DirectModeAggregationTally.Progress
  type: Property
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Progress
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 57
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: public float Progress { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Progress As Single
  overload: TMG.GTAModel.DirectModeAggregationTally.Progress*
  implements:
  - XTMF.IModule.Progress
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.DirectModeAggregationTally.ProgressColour
  commentId: P:TMG.GTAModel.DirectModeAggregationTally.ProgressColour
  id: ProgressColour
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: ProgressColour
  nameWithType: DirectModeAggregationTally.ProgressColour
  fullName: TMG.GTAModel.DirectModeAggregationTally.ProgressColour
  type: Property
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ProgressColour
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 63
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: public Tuple<byte, byte, byte> ProgressColour { get; set; }
    parameters: []
    return:
      type: System.Tuple{System.Byte,System.Byte,System.Byte}
    content.vb: Public Property ProgressColour As Tuple(Of Byte, Byte, Byte)
  overload: TMG.GTAModel.DirectModeAggregationTally.ProgressColour*
  implements:
  - XTMF.IModule.ProgressColour
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.GTAModel.DirectModeAggregationTally.IncludeTally(System.Single[][])
  commentId: M:TMG.GTAModel.DirectModeAggregationTally.IncludeTally(System.Single[][])
  id: IncludeTally(System.Single[][])
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: IncludeTally(Single[][])
  nameWithType: DirectModeAggregationTally.IncludeTally(Single[][])
  fullName: TMG.GTAModel.DirectModeAggregationTally.IncludeTally(System.Single[][])
  type: Method
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IncludeTally
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 69
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: public virtual void IncludeTally(float[][] currentTally)
    parameters:
    - id: currentTally
      type: System.Single[][]
    content.vb: Public Overridable Sub IncludeTally(currentTally As Single()())
  overload: TMG.GTAModel.DirectModeAggregationTally.IncludeTally*
  implements:
  - TMG.IModeAggregationTally.IncludeTally(System.Single[][])
  nameWithType.vb: DirectModeAggregationTally.IncludeTally(Single()())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: TMG.GTAModel.DirectModeAggregationTally.IncludeTally(System.Single()())
  name.vb: IncludeTally(Single()())
- uid: TMG.GTAModel.DirectModeAggregationTally.RuntimeValidation(System.String@)
  commentId: M:TMG.GTAModel.DirectModeAggregationTally.RuntimeValidation(System.String@)
  id: RuntimeValidation(System.String@)
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: RuntimeValidation(ref String)
  nameWithType: DirectModeAggregationTally.RuntimeValidation(ref String)
  fullName: TMG.GTAModel.DirectModeAggregationTally.RuntimeValidation(ref System.String)
  type: Method
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RuntimeValidation
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 94
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: public virtual bool RuntimeValidation(ref string error)
    parameters:
    - id: error
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Overridable Function RuntimeValidation(ByRef error As String) As Boolean
  overload: TMG.GTAModel.DirectModeAggregationTally.RuntimeValidation*
  implements:
  - XTMF.IModule.RuntimeValidation(System.String@)
  nameWithType.vb: DirectModeAggregationTally.RuntimeValidation(ByRef String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: TMG.GTAModel.DirectModeAggregationTally.RuntimeValidation(ByRef System.String)
  name.vb: RuntimeValidation(ByRef String)
- uid: TMG.GTAModel.DirectModeAggregationTally.GetMode(System.Int32)
  commentId: M:TMG.GTAModel.DirectModeAggregationTally.GetMode(System.Int32)
  id: GetMode(System.Int32)
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: GetMode(Int32)
  nameWithType: DirectModeAggregationTally.GetMode(Int32)
  fullName: TMG.GTAModel.DirectModeAggregationTally.GetMode(System.Int32)
  type: Method
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetMode
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 107
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: protected IModeChoiceNode GetMode(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: TMG.IModeChoiceNode
    content.vb: Protected Function GetMode(index As Integer) As IModeChoiceNode
  overload: TMG.GTAModel.DirectModeAggregationTally.GetMode*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TMG.GTAModel.DirectModeAggregationTally.GetResult(System.Collections.Generic.List{TMG.TreeData{System.Single[][]}},System.Int32)
  commentId: M:TMG.GTAModel.DirectModeAggregationTally.GetResult(System.Collections.Generic.List{TMG.TreeData{System.Single[][]}},System.Int32)
  id: GetResult(System.Collections.Generic.List{TMG.TreeData{System.Single[][]}},System.Int32)
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: GetResult(List<TreeData<Single[][]>>, Int32)
  nameWithType: DirectModeAggregationTally.GetResult(List<TreeData<Single[][]>>, Int32)
  fullName: TMG.GTAModel.DirectModeAggregationTally.GetResult(System.Collections.Generic.List<TMG.TreeData<System.Single[][]>>, System.Int32)
  type: Method
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetResult
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 123
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: protected float[][] GetResult(List<TreeData<float[][]>> list, int modeIndex)
    parameters:
    - id: list
      type: System.Collections.Generic.List{TMG.TreeData{System.Single[][]}}
    - id: modeIndex
      type: System.Int32
    return:
      type: System.Single[][]
    content.vb: Protected Function GetResult(list As List(Of TreeData(Of Single()())), modeIndex As Integer) As Single()()
  overload: TMG.GTAModel.DirectModeAggregationTally.GetResult*
  nameWithType.vb: DirectModeAggregationTally.GetResult(List(Of TreeData(Of Single()())), Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TMG.GTAModel.DirectModeAggregationTally.GetResult(System.Collections.Generic.List(Of TMG.TreeData(Of System.Single()())), System.Int32)
  name.vb: GetResult(List(Of TreeData(Of Single()())), Int32)
- uid: TMG.GTAModel.DirectModeAggregationTally.GetResult(TMG.TreeData{System.Single[][]},System.Int32,System.Int32@)
  commentId: M:TMG.GTAModel.DirectModeAggregationTally.GetResult(TMG.TreeData{System.Single[][]},System.Int32,System.Int32@)
  id: GetResult(TMG.TreeData{System.Single[][]},System.Int32,System.Int32@)
  parent: TMG.GTAModel.DirectModeAggregationTally
  langs:
  - csharp
  - vb
  name: GetResult(TreeData<Single[][]>, Int32, ref Int32)
  nameWithType: DirectModeAggregationTally.GetResult(TreeData<Single[][]>, Int32, ref Int32)
  fullName: TMG.GTAModel.DirectModeAggregationTally.GetResult(TMG.TreeData<System.Single[][]>, System.Int32, ref System.Int32)
  type: Method
  source:
    remote:
      path: Code/GTAModel/Tally/DirectModeAggregationTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetResult
    path: ../../../XTMF/Code/GTAModel/Tally/DirectModeAggregationTally.cs
    startLine: 138
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel
  syntax:
    content: protected float[][] GetResult(TreeData<float[][]> node, int modeIndex, ref int current)
    parameters:
    - id: node
      type: TMG.TreeData{System.Single[][]}
    - id: modeIndex
      type: System.Int32
    - id: current
      type: System.Int32
    return:
      type: System.Single[][]
    content.vb: Protected Function GetResult(node As TreeData(Of Single()()), modeIndex As Integer, ByRef current As Integer) As Single()()
  overload: TMG.GTAModel.DirectModeAggregationTally.GetResult*
  nameWithType.vb: DirectModeAggregationTally.GetResult(TreeData(Of Single()()), Int32, ByRef Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TMG.GTAModel.DirectModeAggregationTally.GetResult(TMG.TreeData(Of System.Single()()), System.Int32, ByRef System.Int32)
  name.vb: GetResult(TreeData(Of Single()()), Int32, ByRef Int32)
references:
- uid: TMG.GTAModel
  commentId: N:TMG.GTAModel
  isExternal: false
  name: TMG.GTAModel
  nameWithType: TMG.GTAModel
  fullName: TMG.GTAModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TMG.IModeAggregationTally
  commentId: T:TMG.IModeAggregationTally
  parent: TMG
  isExternal: false
  name: IModeAggregationTally
  nameWithType: IModeAggregationTally
  fullName: TMG.IModeAggregationTally
- uid: XTMF.IModule
  commentId: T:XTMF.IModule
  parent: XTMF
  isExternal: false
  name: IModule
  nameWithType: IModule
  fullName: XTMF.IModule
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  name: EnsureExactlyOne(IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TMG
  commentId: N:TMG
  isExternal: false
  name: TMG
  nameWithType: TMG
  fullName: TMG
- uid: XTMF
  commentId: N:XTMF
  isExternal: false
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper
  commentId: T:TMG.Functions.ModuleHelper
  parent: TMG.Functions
  isExternal: false
  name: ModuleHelper
  nameWithType: ModuleHelper
  fullName: TMG.Functions.ModuleHelper
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  isExternal: true
  name: EnsureExactlyOne(IModule, IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions
  commentId: N:TMG.Functions
  isExternal: false
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TMG.I4StepModel
  commentId: T:TMG.I4StepModel
  parent: TMG
  isExternal: false
  name: I4StepModel
  nameWithType: I4StepModel
  fullName: TMG.I4StepModel
- uid: System.Int32[]
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TMG.GTAModel.DirectModeAggregationTally.Name*
  commentId: Overload:TMG.GTAModel.DirectModeAggregationTally.Name
  isExternal: false
  name: Name
  nameWithType: DirectModeAggregationTally.Name
  fullName: TMG.GTAModel.DirectModeAggregationTally.Name
- uid: XTMF.IModule.Name
  commentId: P:XTMF.IModule.Name
  parent: XTMF.IModule
  isExternal: false
  name: Name
  nameWithType: IModule.Name
  fullName: XTMF.IModule.Name
- uid: TMG.GTAModel.DirectModeAggregationTally.Progress*
  commentId: Overload:TMG.GTAModel.DirectModeAggregationTally.Progress
  isExternal: false
  name: Progress
  nameWithType: DirectModeAggregationTally.Progress
  fullName: TMG.GTAModel.DirectModeAggregationTally.Progress
- uid: XTMF.IModule.Progress
  commentId: P:XTMF.IModule.Progress
  parent: XTMF.IModule
  isExternal: false
  name: Progress
  nameWithType: IModule.Progress
  fullName: XTMF.IModule.Progress
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TMG.GTAModel.DirectModeAggregationTally.ProgressColour*
  commentId: Overload:TMG.GTAModel.DirectModeAggregationTally.ProgressColour
  isExternal: false
  name: ProgressColour
  nameWithType: DirectModeAggregationTally.ProgressColour
  fullName: TMG.GTAModel.DirectModeAggregationTally.ProgressColour
- uid: XTMF.IModule.ProgressColour
  commentId: P:XTMF.IModule.ProgressColour
  parent: XTMF.IModule
  isExternal: false
  name: ProgressColour
  nameWithType: IModule.ProgressColour
  fullName: XTMF.IModule.ProgressColour
- uid: System.Tuple{System.Byte,System.Byte,System.Byte}
  commentId: T:System.Tuple{System.Byte,System.Byte,System.Byte}
  parent: System
  definition: System.Tuple`3
  name: Tuple<Byte, Byte, Byte>
  nameWithType: Tuple<Byte, Byte, Byte>
  fullName: System.Tuple<System.Byte, System.Byte, System.Byte>
  nameWithType.vb: Tuple(Of Byte, Byte, Byte)
  fullName.vb: System.Tuple(Of System.Byte, System.Byte, System.Byte)
  name.vb: Tuple(Of Byte, Byte, Byte)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.GTAModel.DirectModeAggregationTally.IncludeTally*
  commentId: Overload:TMG.GTAModel.DirectModeAggregationTally.IncludeTally
  isExternal: false
  name: IncludeTally
  nameWithType: DirectModeAggregationTally.IncludeTally
  fullName: TMG.GTAModel.DirectModeAggregationTally.IncludeTally
- uid: TMG.IModeAggregationTally.IncludeTally(System.Single[][])
  commentId: M:TMG.IModeAggregationTally.IncludeTally(System.Single[][])
  parent: TMG.IModeAggregationTally
  isExternal: true
  name: IncludeTally(Single[][])
  nameWithType: IModeAggregationTally.IncludeTally(Single[][])
  fullName: TMG.IModeAggregationTally.IncludeTally(System.Single[][])
  nameWithType.vb: IModeAggregationTally.IncludeTally(Single()())
  fullName.vb: TMG.IModeAggregationTally.IncludeTally(System.Single()())
  name.vb: IncludeTally(Single()())
  spec.csharp:
  - uid: TMG.IModeAggregationTally.IncludeTally(System.Single[][])
    name: IncludeTally
    nameWithType: IModeAggregationTally.IncludeTally
    fullName: TMG.IModeAggregationTally.IncludeTally
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.IModeAggregationTally.IncludeTally(System.Single[][])
    name: IncludeTally
    nameWithType: IModeAggregationTally.IncludeTally
    fullName: TMG.IModeAggregationTally.IncludeTally
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single[][]
  name: Single[][]
  nameWithType: Single[][]
  fullName: System.Single[][]
  nameWithType.vb: Single()()
  fullName.vb: System.Single()()
  name.vb: Single()()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TMG.GTAModel.DirectModeAggregationTally.RuntimeValidation*
  commentId: Overload:TMG.GTAModel.DirectModeAggregationTally.RuntimeValidation
  isExternal: false
  name: RuntimeValidation
  nameWithType: DirectModeAggregationTally.RuntimeValidation
  fullName: TMG.GTAModel.DirectModeAggregationTally.RuntimeValidation
- uid: XTMF.IModule.RuntimeValidation(System.String@)
  commentId: M:XTMF.IModule.RuntimeValidation(System.String@)
  parent: XTMF.IModule
  isExternal: true
  name: RuntimeValidation(String)
  nameWithType: IModule.RuntimeValidation(String)
  fullName: XTMF.IModule.RuntimeValidation(System.String)
  spec.csharp:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TMG.GTAModel.DirectModeAggregationTally.GetMode*
  commentId: Overload:TMG.GTAModel.DirectModeAggregationTally.GetMode
  isExternal: false
  name: GetMode
  nameWithType: DirectModeAggregationTally.GetMode
  fullName: TMG.GTAModel.DirectModeAggregationTally.GetMode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TMG.IModeChoiceNode
  commentId: T:TMG.IModeChoiceNode
  parent: TMG
  isExternal: false
  name: IModeChoiceNode
  nameWithType: IModeChoiceNode
  fullName: TMG.IModeChoiceNode
- uid: TMG.GTAModel.DirectModeAggregationTally.GetResult*
  commentId: Overload:TMG.GTAModel.DirectModeAggregationTally.GetResult
  isExternal: false
  name: GetResult
  nameWithType: DirectModeAggregationTally.GetResult
  fullName: TMG.GTAModel.DirectModeAggregationTally.GetResult
- uid: System.Collections.Generic.List{TMG.TreeData{System.Single[][]}}
  commentId: T:System.Collections.Generic.List{TMG.TreeData{System.Single[][]}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TreeData<Single[][]>>
  nameWithType: List<TreeData<Single[][]>>
  fullName: System.Collections.Generic.List<TMG.TreeData<System.Single[][]>>
  nameWithType.vb: List(Of TreeData(Of Single()()))
  fullName.vb: System.Collections.Generic.List(Of TMG.TreeData(Of System.Single()()))
  name.vb: List(Of TreeData(Of Single()()))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TMG.TreeData{System.Single[][]}
  commentId: T:TMG.TreeData{System.Single[][]}
  parent: TMG
  definition: TMG.TreeData`1
  name: TreeData<Single[][]>
  nameWithType: TreeData<Single[][]>
  fullName: TMG.TreeData<System.Single[][]>
  nameWithType.vb: TreeData(Of Single()())
  fullName.vb: TMG.TreeData(Of System.Single()())
  name.vb: TreeData(Of Single()())
  spec.csharp:
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.TreeData`1
  commentId: T:TMG.TreeData`1
  isExternal: false
  name: TreeData<T>
  nameWithType: TreeData<T>
  fullName: TMG.TreeData<T>
  nameWithType.vb: TreeData(Of T)
  fullName.vb: TMG.TreeData(Of T)
  name.vb: TreeData(Of T)
  spec.csharp:
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TMG.TreeData`1
    name: TreeData
    nameWithType: TreeData
    fullName: TMG.TreeData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
