### YamlMime:ManagedReference
items:
- uid: TMG.Functions.BinaryHelpers
  commentId: T:TMG.Functions.BinaryHelpers
  id: BinaryHelpers
  parent: TMG.Functions
  children:
  - TMG.Functions.BinaryHelpers.ExecuteReader(XTMF.IModule,System.Action{System.IO.BinaryReader},System.String)
  - TMG.Functions.BinaryHelpers.ExecuteWriter(System.Action{System.IO.BinaryWriter},System.String)
  langs:
  - csharp
  - vb
  name: BinaryHelpers
  nameWithType: BinaryHelpers
  fullName: TMG.Functions.BinaryHelpers
  type: Class
  source:
    remote:
      path: Code/TMG.Functions/BinaryHelpers.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: BinaryHelpers
    path: ../../XTMF/Code/TMG.Functions/BinaryHelpers.cs
    startLine: 24
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  syntax:
    content: public static class BinaryHelpers
    content.vb: Public Module BinaryHelpers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TMG.Functions.BinaryHelpers.ExecuteWriter(System.Action{System.IO.BinaryWriter},System.String)
  commentId: M:TMG.Functions.BinaryHelpers.ExecuteWriter(System.Action{System.IO.BinaryWriter},System.String)
  id: ExecuteWriter(System.Action{System.IO.BinaryWriter},System.String)
  parent: TMG.Functions.BinaryHelpers
  langs:
  - csharp
  - vb
  name: ExecuteWriter(Action<BinaryWriter>, String)
  nameWithType: BinaryHelpers.ExecuteWriter(Action<BinaryWriter>, String)
  fullName: TMG.Functions.BinaryHelpers.ExecuteWriter(System.Action<System.IO.BinaryWriter>, System.String)
  type: Method
  source:
    remote:
      path: Code/TMG.Functions/BinaryHelpers.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ExecuteWriter
    path: ../../XTMF/Code/TMG.Functions/BinaryHelpers.cs
    startLine: 26
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  syntax:
    content: public static void ExecuteWriter(Action<BinaryWriter> toRun, string fileName)
    parameters:
    - id: toRun
      type: System.Action{System.IO.BinaryWriter}
    - id: fileName
      type: System.String
    content.vb: Public Shared Sub ExecuteWriter(toRun As Action(Of BinaryWriter), fileName As String)
  overload: TMG.Functions.BinaryHelpers.ExecuteWriter*
  nameWithType.vb: BinaryHelpers.ExecuteWriter(Action(Of BinaryWriter), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.Functions.BinaryHelpers.ExecuteWriter(System.Action(Of System.IO.BinaryWriter), System.String)
  name.vb: ExecuteWriter(Action(Of BinaryWriter), String)
- uid: TMG.Functions.BinaryHelpers.ExecuteReader(XTMF.IModule,System.Action{System.IO.BinaryReader},System.String)
  commentId: M:TMG.Functions.BinaryHelpers.ExecuteReader(XTMF.IModule,System.Action{System.IO.BinaryReader},System.String)
  id: ExecuteReader(XTMF.IModule,System.Action{System.IO.BinaryReader},System.String)
  parent: TMG.Functions.BinaryHelpers
  langs:
  - csharp
  - vb
  name: ExecuteReader(IModule, Action<BinaryReader>, String)
  nameWithType: BinaryHelpers.ExecuteReader(IModule, Action<BinaryReader>, String)
  fullName: TMG.Functions.BinaryHelpers.ExecuteReader(XTMF.IModule, System.Action<System.IO.BinaryReader>, System.String)
  type: Method
  source:
    remote:
      path: Code/TMG.Functions/BinaryHelpers.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ExecuteReader
    path: ../../XTMF/Code/TMG.Functions/BinaryHelpers.cs
    startLine: 44
  assemblies:
  - TMG.Functions
  namespace: TMG.Functions
  syntax:
    content: public static void ExecuteReader(IModule module, Action<BinaryReader> toRun, string fileName)
    parameters:
    - id: module
      type: XTMF.IModule
    - id: toRun
      type: System.Action{System.IO.BinaryReader}
    - id: fileName
      type: System.String
    content.vb: Public Shared Sub ExecuteReader(module As IModule, toRun As Action(Of BinaryReader), fileName As String)
  overload: TMG.Functions.BinaryHelpers.ExecuteReader*
  nameWithType.vb: BinaryHelpers.ExecuteReader(IModule, Action(Of BinaryReader), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TMG.Functions.BinaryHelpers.ExecuteReader(XTMF.IModule, System.Action(Of System.IO.BinaryReader), System.String)
  name.vb: ExecuteReader(IModule, Action(Of BinaryReader), String)
references:
- uid: TMG.Functions
  commentId: N:TMG.Functions
  isExternal: false
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TMG.Functions.BinaryHelpers.ExecuteWriter*
  commentId: Overload:TMG.Functions.BinaryHelpers.ExecuteWriter
  isExternal: false
  name: ExecuteWriter
  nameWithType: BinaryHelpers.ExecuteWriter
  fullName: TMG.Functions.BinaryHelpers.ExecuteWriter
- uid: System.Action{System.IO.BinaryWriter}
  commentId: T:System.Action{System.IO.BinaryWriter}
  parent: System
  definition: System.Action`1
  name: Action<BinaryWriter>
  nameWithType: Action<BinaryWriter>
  fullName: System.Action<System.IO.BinaryWriter>
  nameWithType.vb: Action(Of BinaryWriter)
  fullName.vb: System.Action(Of System.IO.BinaryWriter)
  name.vb: Action(Of BinaryWriter)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.BinaryWriter
    name: BinaryWriter
    nameWithType: BinaryWriter
    fullName: System.IO.BinaryWriter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.BinaryWriter
    name: BinaryWriter
    nameWithType: BinaryWriter
    fullName: System.IO.BinaryWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.BinaryHelpers.ExecuteReader*
  commentId: Overload:TMG.Functions.BinaryHelpers.ExecuteReader
  isExternal: false
  name: ExecuteReader
  nameWithType: BinaryHelpers.ExecuteReader
  fullName: TMG.Functions.BinaryHelpers.ExecuteReader
- uid: XTMF.IModule
  commentId: T:XTMF.IModule
  parent: XTMF
  isExternal: false
  name: IModule
  nameWithType: IModule
  fullName: XTMF.IModule
- uid: System.Action{System.IO.BinaryReader}
  commentId: T:System.Action{System.IO.BinaryReader}
  parent: System
  definition: System.Action`1
  name: Action<BinaryReader>
  nameWithType: Action<BinaryReader>
  fullName: System.Action<System.IO.BinaryReader>
  nameWithType.vb: Action(Of BinaryReader)
  fullName.vb: System.Action(Of System.IO.BinaryReader)
  name.vb: Action(Of BinaryReader)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.BinaryReader
    name: BinaryReader
    nameWithType: BinaryReader
    fullName: System.IO.BinaryReader
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.BinaryReader
    name: BinaryReader
    nameWithType: BinaryReader
    fullName: System.IO.BinaryReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF
  commentId: N:XTMF
  isExternal: false
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
