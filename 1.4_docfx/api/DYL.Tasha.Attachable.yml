### YamlMime:ManagedReference
items:
- uid: DYL.Tasha.Attachable
  commentId: T:DYL.Tasha.Attachable
  id: Attachable
  parent: DYL.Tasha
  children:
  - DYL.Tasha.Attachable.#ctor
  - DYL.Tasha.Attachable.Attach(System.String,System.Object)
  - DYL.Tasha.Attachable.GetVariable(System.String)
  - DYL.Tasha.Attachable.Item(System.String)
  - DYL.Tasha.Attachable.Keys
  - DYL.Tasha.Attachable.Release
  - DYL.Tasha.Attachable.variables
  langs:
  - csharp
  - vb
  name: Attachable
  nameWithType: Attachable
  fullName: DYL.Tasha.Attachable
  type: Class
  source:
    remote:
      path: Code/LocationAllocationModel/Attachable.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Attachable
    path: ../../../XTMF/Code/LocationAllocationModel/Attachable.cs
    startLine: 28
  assemblies:
  - LocationAllocationModel
  namespace: DYL.Tasha
  summary: "\nThe base class of the common objects.\nThis allows for the attaching of properties to the objects\n"
  example: []
  syntax:
    content: 'public abstract class Attachable : IAttachable'
    content.vb: >-
      Public MustInherit Class Attachable

          Implements IAttachable
  inheritance:
  - System.Object
  derivedClasses:
  - DYL.Tasha.Person
  implements:
  - Tasha.Common.IAttachable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: DYL.Tasha.Attachable.variables
  commentId: F:DYL.Tasha.Attachable.variables
  id: variables
  parent: DYL.Tasha.Attachable
  langs:
  - csharp
  - vb
  name: variables
  nameWithType: Attachable.variables
  fullName: DYL.Tasha.Attachable.variables
  type: Field
  source:
    remote:
      path: Code/LocationAllocationModel/Attachable.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: variables
    path: ../../../XTMF/Code/LocationAllocationModel/Attachable.cs
    startLine: 33
  assemblies:
  - LocationAllocationModel
  namespace: DYL.Tasha
  summary: "\nWhere we store all of the attached objects\n"
  example: []
  syntax:
    content: protected SortedList<string, object> variables
    return:
      type: System.Collections.Generic.SortedList{System.String,System.Object}
    content.vb: Protected variables As SortedList(Of String, Object)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: DYL.Tasha.Attachable.#ctor
  commentId: M:DYL.Tasha.Attachable.#ctor
  id: '#ctor'
  parent: DYL.Tasha.Attachable
  langs:
  - csharp
  - vb
  name: Attachable()
  nameWithType: Attachable.Attachable()
  fullName: DYL.Tasha.Attachable.Attachable()
  type: Constructor
  source:
    remote:
      path: Code/LocationAllocationModel/Attachable.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: .ctor
    path: ../../../XTMF/Code/LocationAllocationModel/Attachable.cs
    startLine: 38
  assemblies:
  - LocationAllocationModel
  namespace: DYL.Tasha
  summary: "\nCreates a new attachable object\n"
  example: []
  syntax:
    content: protected Attachable()
    content.vb: Protected Sub New
  overload: DYL.Tasha.Attachable.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: DYL.Tasha.Attachable.Item(System.String)
  commentId: P:DYL.Tasha.Attachable.Item(System.String)
  id: Item(System.String)
  parent: DYL.Tasha.Attachable
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: Attachable.Item[String]
  fullName: DYL.Tasha.Attachable.Item[System.String]
  type: Property
  source:
    remote:
      path: Code/LocationAllocationModel/Attachable.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: this[]
    path: ../../../XTMF/Code/LocationAllocationModel/Attachable.cs
    startLine: 49
  assemblies:
  - LocationAllocationModel
  namespace: DYL.Tasha
  summary: "\nAttempts to access a variable from the object\n"
  example: []
  syntax:
    content: public object this[string name] { get; set; }
    parameters:
    - id: name
      type: System.String
      description: The name of the variable to look for
    return:
      type: System.Object
      description: The variable you wanted
    content.vb: Public Property Item(name As String) As Object
  overload: DYL.Tasha.Attachable.Item*
  implements:
  - Tasha.Common.IAttachable.Item(System.String)
  nameWithType.vb: Attachable.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: DYL.Tasha.Attachable.Item(System.String)
  name.vb: Item(String)
- uid: DYL.Tasha.Attachable.Attach(System.String,System.Object)
  commentId: M:DYL.Tasha.Attachable.Attach(System.String,System.Object)
  id: Attach(System.String,System.Object)
  parent: DYL.Tasha.Attachable
  langs:
  - csharp
  - vb
  name: Attach(String, Object)
  nameWithType: Attachable.Attach(String, Object)
  fullName: DYL.Tasha.Attachable.Attach(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Code/LocationAllocationModel/Attachable.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Attach
    path: ../../../XTMF/Code/LocationAllocationModel/Attachable.cs
    startLine: 72
  assemblies:
  - LocationAllocationModel
  namespace: DYL.Tasha
  summary: "\nAttaches a new variable to this object\n"
  example: []
  syntax:
    content: public void Attach(string name, object value)
    parameters:
    - id: name
      type: System.String
      description: The name of the variable (MUST BE UNIQUE!)
    - id: value
      type: System.Object
      description: The object to store to this name
    content.vb: Public Sub Attach(name As String, value As Object)
  overload: DYL.Tasha.Attachable.Attach*
  implements:
  - Tasha.Common.IAttachable.Attach(System.String,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DYL.Tasha.Attachable.GetVariable(System.String)
  commentId: M:DYL.Tasha.Attachable.GetVariable(System.String)
  id: GetVariable(System.String)
  parent: DYL.Tasha.Attachable
  langs:
  - csharp
  - vb
  name: GetVariable(String)
  nameWithType: Attachable.GetVariable(String)
  fullName: DYL.Tasha.Attachable.GetVariable(System.String)
  type: Method
  source:
    remote:
      path: Code/LocationAllocationModel/Attachable.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: GetVariable
    path: ../../../XTMF/Code/LocationAllocationModel/Attachable.cs
    startLine: 87
  assemblies:
  - LocationAllocationModel
  namespace: DYL.Tasha
  summary: "\nSynonamous with Attachable[name].\n"
  example: []
  syntax:
    content: public object GetVariable(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the variable you want
    return:
      type: System.Object
      description: The variable you wanted
    content.vb: Public Function GetVariable(name As String) As Object
  overload: DYL.Tasha.Attachable.GetVariable*
  implements:
  - Tasha.Common.IAttachable.GetVariable(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DYL.Tasha.Attachable.Keys
  commentId: P:DYL.Tasha.Attachable.Keys
  id: Keys
  parent: DYL.Tasha.Attachable
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: Attachable.Keys
  fullName: DYL.Tasha.Attachable.Keys
  type: Property
  source:
    remote:
      path: Code/LocationAllocationModel/Attachable.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Keys
    path: ../../../XTMF/Code/LocationAllocationModel/Attachable.cs
    startLine: 97
  assemblies:
  - LocationAllocationModel
  namespace: DYL.Tasha
  summary: "\nGets the keys associated with this object\n"
  example: []
  syntax:
    content: public IEnumerable<string> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property Keys As IEnumerable(Of String)
  overload: DYL.Tasha.Attachable.Keys*
  implements:
  - Tasha.Common.IAttachable.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DYL.Tasha.Attachable.Release
  commentId: M:DYL.Tasha.Attachable.Release
  id: Release
  parent: DYL.Tasha.Attachable
  langs:
  - csharp
  - vb
  name: Release()
  nameWithType: Attachable.Release()
  fullName: DYL.Tasha.Attachable.Release()
  type: Method
  source:
    remote:
      path: Code/LocationAllocationModel/Attachable.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Release
    path: ../../../XTMF/Code/LocationAllocationModel/Attachable.cs
    startLine: 102
  assemblies:
  - LocationAllocationModel
  namespace: DYL.Tasha
  syntax:
    content: public void Release()
    content.vb: Public Sub Release
  overload: DYL.Tasha.Attachable.Release*
  implements:
  - Tasha.Common.IAttachable.Release
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DYL.Tasha
  commentId: N:DYL.Tasha
  isExternal: false
  name: DYL.Tasha
  nameWithType: DYL.Tasha
  fullName: DYL.Tasha
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Tasha.Common.IAttachable
  commentId: T:Tasha.Common.IAttachable
  parent: Tasha.Common
  isExternal: false
  name: IAttachable
  nameWithType: IAttachable
  fullName: Tasha.Common.IAttachable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Tasha.Common
  commentId: N:Tasha.Common
  isExternal: false
  name: Tasha.Common
  nameWithType: Tasha.Common
  fullName: Tasha.Common
- uid: System.Collections.Generic.SortedList{System.String,System.Object}
  commentId: T:System.Collections.Generic.SortedList{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.SortedList`2
  name: SortedList<String, Object>
  nameWithType: SortedList<String, Object>
  fullName: System.Collections.Generic.SortedList<System.String, System.Object>
  nameWithType.vb: SortedList(Of String, Object)
  fullName.vb: System.Collections.Generic.SortedList(Of System.String, System.Object)
  name.vb: SortedList(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: System.Collections.Generic.SortedList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: System.Collections.Generic.SortedList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SortedList`2
  commentId: T:System.Collections.Generic.SortedList`2
  isExternal: true
  name: SortedList<TKey, TValue>
  nameWithType: SortedList<TKey, TValue>
  fullName: System.Collections.Generic.SortedList<TKey, TValue>
  nameWithType.vb: SortedList(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue)
  name.vb: SortedList(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: System.Collections.Generic.SortedList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: System.Collections.Generic.SortedList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DYL.Tasha.Attachable.#ctor*
  commentId: Overload:DYL.Tasha.Attachable.#ctor
  isExternal: false
  name: Attachable
  nameWithType: Attachable.Attachable
  fullName: DYL.Tasha.Attachable.Attachable
- uid: DYL.Tasha.Attachable.Item*
  commentId: Overload:DYL.Tasha.Attachable.Item
  isExternal: false
  name: Item
  nameWithType: Attachable.Item
  fullName: DYL.Tasha.Attachable.Item
- uid: Tasha.Common.IAttachable.Item(System.String)
  commentId: P:Tasha.Common.IAttachable.Item(System.String)
  parent: Tasha.Common.IAttachable
  isExternal: true
  name: Item[String]
  nameWithType: IAttachable.Item[String]
  fullName: Tasha.Common.IAttachable.Item[System.String]
  nameWithType.vb: IAttachable.Item(String)
  fullName.vb: Tasha.Common.IAttachable.Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: Tasha.Common.IAttachable.Item(System.String)
    name: Item
    nameWithType: IAttachable.Item
    fullName: Tasha.Common.IAttachable.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Tasha.Common.IAttachable.Item(System.String)
    name: Item
    nameWithType: IAttachable.Item
    fullName: Tasha.Common.IAttachable.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DYL.Tasha.Attachable.Attach*
  commentId: Overload:DYL.Tasha.Attachable.Attach
  isExternal: false
  name: Attach
  nameWithType: Attachable.Attach
  fullName: DYL.Tasha.Attachable.Attach
- uid: Tasha.Common.IAttachable.Attach(System.String,System.Object)
  commentId: M:Tasha.Common.IAttachable.Attach(System.String,System.Object)
  parent: Tasha.Common.IAttachable
  isExternal: true
  name: Attach(String, Object)
  nameWithType: IAttachable.Attach(String, Object)
  fullName: Tasha.Common.IAttachable.Attach(System.String, System.Object)
  spec.csharp:
  - uid: Tasha.Common.IAttachable.Attach(System.String,System.Object)
    name: Attach
    nameWithType: IAttachable.Attach
    fullName: Tasha.Common.IAttachable.Attach
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tasha.Common.IAttachable.Attach(System.String,System.Object)
    name: Attach
    nameWithType: IAttachable.Attach
    fullName: Tasha.Common.IAttachable.Attach
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DYL.Tasha.Attachable.GetVariable*
  commentId: Overload:DYL.Tasha.Attachable.GetVariable
  isExternal: false
  name: GetVariable
  nameWithType: Attachable.GetVariable
  fullName: DYL.Tasha.Attachable.GetVariable
- uid: Tasha.Common.IAttachable.GetVariable(System.String)
  commentId: M:Tasha.Common.IAttachable.GetVariable(System.String)
  parent: Tasha.Common.IAttachable
  isExternal: true
  name: GetVariable(String)
  nameWithType: IAttachable.GetVariable(String)
  fullName: Tasha.Common.IAttachable.GetVariable(System.String)
  spec.csharp:
  - uid: Tasha.Common.IAttachable.GetVariable(System.String)
    name: GetVariable
    nameWithType: IAttachable.GetVariable
    fullName: Tasha.Common.IAttachable.GetVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tasha.Common.IAttachable.GetVariable(System.String)
    name: GetVariable
    nameWithType: IAttachable.GetVariable
    fullName: Tasha.Common.IAttachable.GetVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DYL.Tasha.Attachable.Keys*
  commentId: Overload:DYL.Tasha.Attachable.Keys
  isExternal: false
  name: Keys
  nameWithType: Attachable.Keys
  fullName: DYL.Tasha.Attachable.Keys
- uid: Tasha.Common.IAttachable.Keys
  commentId: P:Tasha.Common.IAttachable.Keys
  parent: Tasha.Common.IAttachable
  isExternal: false
  name: Keys
  nameWithType: IAttachable.Keys
  fullName: Tasha.Common.IAttachable.Keys
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DYL.Tasha.Attachable.Release*
  commentId: Overload:DYL.Tasha.Attachable.Release
  isExternal: false
  name: Release
  nameWithType: Attachable.Release
  fullName: DYL.Tasha.Attachable.Release
- uid: Tasha.Common.IAttachable.Release
  commentId: M:Tasha.Common.IAttachable.Release
  parent: Tasha.Common.IAttachable
  isExternal: false
  name: Release()
  nameWithType: IAttachable.Release()
  fullName: Tasha.Common.IAttachable.Release()
  spec.csharp:
  - uid: Tasha.Common.IAttachable.Release
    name: Release
    nameWithType: IAttachable.Release
    fullName: Tasha.Common.IAttachable.Release
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tasha.Common.IAttachable.Release
    name: Release
    nameWithType: IAttachable.Release
    fullName: Tasha.Common.IAttachable.Release
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
