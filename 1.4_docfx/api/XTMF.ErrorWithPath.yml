### YamlMime:ManagedReference
items:
- uid: XTMF.ErrorWithPath
  commentId: T:XTMF.ErrorWithPath
  id: ErrorWithPath
  parent: XTMF
  children:
  - XTMF.ErrorWithPath.#ctor(System.Collections.Generic.List{System.Int32},System.String,System.String,System.String)
  - XTMF.ErrorWithPath.Message
  - XTMF.ErrorWithPath.ModuleName
  - XTMF.ErrorWithPath.Path
  - XTMF.ErrorWithPath.StackTrace
  langs:
  - csharp
  - vb
  name: ErrorWithPath
  nameWithType: ErrorWithPath
  fullName: XTMF.ErrorWithPath
  type: Struct
  source:
    remote:
      path: Code/XTMF1.1/ErrorWithPath.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ErrorWithPath
    path: ../../../XTMF/Code/XTMF1.1/ErrorWithPath.cs
    startLine: 30
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nDescribes an error with a path to the module that\ngenerated it.\n"
  example: []
  syntax:
    content: public struct ErrorWithPath
    content.vb: Public Structure ErrorWithPath
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: XTMF.ErrorWithPath.Path
  commentId: P:XTMF.ErrorWithPath.Path
  id: Path
  parent: XTMF.ErrorWithPath
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: ErrorWithPath.Path
  fullName: XTMF.ErrorWithPath.Path
  type: Property
  source:
    remote:
      path: Code/XTMF1.1/ErrorWithPath.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Path
    path: ../../../XTMF/Code/XTMF1.1/ErrorWithPath.cs
    startLine: 37
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nThe path through the model system structure&apos;s children\nto get to the offending module.  This is null if the path\nis unknowable.  An empty list is the root module.\n"
  example: []
  syntax:
    content: public IReadOnlyList<int> Path { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Int32}
    content.vb: Public ReadOnly Property Path As IReadOnlyList(Of Integer)
  overload: XTMF.ErrorWithPath.Path*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: XTMF.ErrorWithPath.Message
  commentId: P:XTMF.ErrorWithPath.Message
  id: Message
  parent: XTMF.ErrorWithPath
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: ErrorWithPath.Message
  fullName: XTMF.ErrorWithPath.Message
  type: Property
  source:
    remote:
      path: Code/XTMF1.1/ErrorWithPath.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Message
    path: ../../../XTMF/Code/XTMF1.1/ErrorWithPath.cs
    startLine: 42
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nThe error message to pass on.\n"
  example: []
  syntax:
    content: public string Message { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Message As String
  overload: XTMF.ErrorWithPath.Message*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: XTMF.ErrorWithPath.StackTrace
  commentId: P:XTMF.ErrorWithPath.StackTrace
  id: StackTrace
  parent: XTMF.ErrorWithPath
  langs:
  - csharp
  - vb
  name: StackTrace
  nameWithType: ErrorWithPath.StackTrace
  fullName: XTMF.ErrorWithPath.StackTrace
  type: Property
  source:
    remote:
      path: Code/XTMF1.1/ErrorWithPath.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: StackTrace
    path: ../../../XTMF/Code/XTMF1.1/ErrorWithPath.cs
    startLine: 48
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nThe stack trace at the point of the error.  This is null in the case\nof validation.\n"
  example: []
  syntax:
    content: public string StackTrace { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property StackTrace As String
  overload: XTMF.ErrorWithPath.StackTrace*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: XTMF.ErrorWithPath.ModuleName
  commentId: P:XTMF.ErrorWithPath.ModuleName
  id: ModuleName
  parent: XTMF.ErrorWithPath
  langs:
  - csharp
  - vb
  name: ModuleName
  nameWithType: ErrorWithPath.ModuleName
  fullName: XTMF.ErrorWithPath.ModuleName
  type: Property
  source:
    remote:
      path: Code/XTMF1.1/ErrorWithPath.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ModuleName
    path: ../../../XTMF/Code/XTMF1.1/ErrorWithPath.cs
    startLine: 50
  assemblies:
  - XTMF
  namespace: XTMF
  syntax:
    content: public string ModuleName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ModuleName As String
  overload: XTMF.ErrorWithPath.ModuleName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: XTMF.ErrorWithPath.#ctor(System.Collections.Generic.List{System.Int32},System.String,System.String,System.String)
  commentId: M:XTMF.ErrorWithPath.#ctor(System.Collections.Generic.List{System.Int32},System.String,System.String,System.String)
  id: '#ctor(System.Collections.Generic.List{System.Int32},System.String,System.String,System.String)'
  parent: XTMF.ErrorWithPath
  langs:
  - csharp
  - vb
  name: ErrorWithPath(List<Int32>, String, String, String)
  nameWithType: ErrorWithPath.ErrorWithPath(List<Int32>, String, String, String)
  fullName: XTMF.ErrorWithPath.ErrorWithPath(System.Collections.Generic.List<System.Int32>, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Code/XTMF1.1/ErrorWithPath.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: .ctor
    path: ../../../XTMF/Code/XTMF1.1/ErrorWithPath.cs
    startLine: 58
  assemblies:
  - XTMF
  namespace: XTMF
  summary: "\nCreates a new error with the given path.\n"
  example: []
  syntax:
    content: public ErrorWithPath(List<int> path, string message, string stackTrace = null, string moduleName = null)
    parameters:
    - id: path
      type: System.Collections.Generic.List{System.Int32}
      description: The path to use, a copy will be stored.
    - id: message
      type: System.String
      description: ''
    - id: stackTrace
      type: System.String
      description: ''
    - id: moduleName
      type: System.String
    content.vb: Public Sub New(path As List(Of Integer), message As String, stackTrace As String = Nothing, moduleName As String = Nothing)
  overload: XTMF.ErrorWithPath.#ctor*
  nameWithType.vb: ErrorWithPath.ErrorWithPath(List(Of Int32), String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.ErrorWithPath.ErrorWithPath(System.Collections.Generic.List(Of System.Int32), System.String, System.String, System.String)
  name.vb: ErrorWithPath(List(Of Int32), String, String, String)
references:
- uid: XTMF
  commentId: N:XTMF
  isExternal: false
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: XTMF.ErrorWithPath.Path*
  commentId: Overload:XTMF.ErrorWithPath.Path
  isExternal: false
  name: Path
  nameWithType: ErrorWithPath.Path
  fullName: XTMF.ErrorWithPath.Path
- uid: System.Collections.Generic.IReadOnlyList{System.Int32}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Int32>
  nameWithType: IReadOnlyList<Int32>
  fullName: System.Collections.Generic.IReadOnlyList<System.Int32>
  nameWithType.vb: IReadOnlyList(Of Int32)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of System.Int32)
  name.vb: IReadOnlyList(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: XTMF.ErrorWithPath.Message*
  commentId: Overload:XTMF.ErrorWithPath.Message
  isExternal: false
  name: Message
  nameWithType: ErrorWithPath.Message
  fullName: XTMF.ErrorWithPath.Message
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: XTMF.ErrorWithPath.StackTrace*
  commentId: Overload:XTMF.ErrorWithPath.StackTrace
  isExternal: false
  name: StackTrace
  nameWithType: ErrorWithPath.StackTrace
  fullName: XTMF.ErrorWithPath.StackTrace
- uid: XTMF.ErrorWithPath.ModuleName*
  commentId: Overload:XTMF.ErrorWithPath.ModuleName
  isExternal: false
  name: ModuleName
  nameWithType: ErrorWithPath.ModuleName
  fullName: XTMF.ErrorWithPath.ModuleName
- uid: XTMF.ErrorWithPath.#ctor*
  commentId: Overload:XTMF.ErrorWithPath.#ctor
  isExternal: false
  name: ErrorWithPath
  nameWithType: ErrorWithPath.ErrorWithPath
  fullName: XTMF.ErrorWithPath.ErrorWithPath
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
