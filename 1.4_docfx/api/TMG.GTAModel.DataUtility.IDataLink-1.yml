### YamlMime:ManagedReference
items:
- uid: TMG.GTAModel.DataUtility.IDataLink`1
  commentId: T:TMG.GTAModel.DataUtility.IDataLink`1
  id: IDataLink`1
  parent: TMG.GTAModel.DataUtility
  children:
  - TMG.GTAModel.DataUtility.IDataLink`1.Copy(`0,System.Object[])
  langs:
  - csharp
  - vb
  name: IDataLink<T>
  nameWithType: IDataLink<T>
  fullName: TMG.GTAModel.DataUtility.IDataLink<T>
  type: Interface
  source:
    remote:
      path: Code/GTAModel/DataUtility/IDataLink.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IDataLink
    path: ../../../XTMF/Code/GTAModel/DataUtility/IDataLink.cs
    startLine: 25
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.DataUtility
  summary: "\nProvides an Interface to copy data from the given original formats to the\ngiven destination type\n"
  example: []
  syntax:
    content: public interface IDataLink<T>
    typeParameters:
    - id: T
      description: The type of data that we will store into
    content.vb: Public Interface IDataLink(Of T)
  nameWithType.vb: IDataLink(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: TMG.GTAModel.DataUtility.IDataLink(Of T)
  name.vb: IDataLink(Of T)
- uid: TMG.GTAModel.DataUtility.IDataLink`1.Copy(`0,System.Object[])
  commentId: M:TMG.GTAModel.DataUtility.IDataLink`1.Copy(`0,System.Object[])
  id: Copy(`0,System.Object[])
  parent: TMG.GTAModel.DataUtility.IDataLink`1
  langs:
  - csharp
  - vb
  name: Copy(T, Object[])
  nameWithType: IDataLink<T>.Copy(T, Object[])
  fullName: TMG.GTAModel.DataUtility.IDataLink<T>.Copy(T, System.Object[])
  type: Method
  source:
    remote:
      path: Code/GTAModel/DataUtility/IDataLink.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Copy
    path: ../../../XTMF/Code/GTAModel/DataUtility/IDataLink.cs
    startLine: 27
  assemblies:
  - GTAModel
  namespace: TMG.GTAModel.DataUtility
  syntax:
    content: void Copy(T destination, object[] origin)
    parameters:
    - id: destination
      type: '{T}'
    - id: origin
      type: System.Object[]
    content.vb: Sub Copy(destination As T, origin As Object())
  overload: TMG.GTAModel.DataUtility.IDataLink`1.Copy*
  nameWithType.vb: IDataLink(Of T).Copy(T, Object())
  fullName.vb: TMG.GTAModel.DataUtility.IDataLink(Of T).Copy(T, System.Object())
  name.vb: Copy(T, Object())
references:
- uid: TMG.GTAModel.DataUtility
  commentId: N:TMG.GTAModel.DataUtility
  isExternal: false
  name: TMG.GTAModel.DataUtility
  nameWithType: TMG.GTAModel.DataUtility
  fullName: TMG.GTAModel.DataUtility
- uid: TMG.GTAModel.DataUtility.IDataLink`1.Copy*
  commentId: Overload:TMG.GTAModel.DataUtility.IDataLink`1.Copy
  isExternal: false
  name: Copy
  nameWithType: IDataLink<T>.Copy
  fullName: TMG.GTAModel.DataUtility.IDataLink<T>.Copy
  nameWithType.vb: IDataLink(Of T).Copy
  fullName.vb: TMG.GTAModel.DataUtility.IDataLink(Of T).Copy
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
