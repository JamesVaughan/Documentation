### YamlMime:ManagedReference
items:
- uid: XTMF.Networking.IClient
  commentId: T:XTMF.Networking.IClient
  id: IClient
  parent: XTMF.Networking
  children:
  - XTMF.Networking.IClient.NotifyComplete(System.Int32,System.String)
  - XTMF.Networking.IClient.NotifyProgress
  - XTMF.Networking.IClient.RegisterCustomMessageHandler(System.Int32,System.Action{System.Object})
  - XTMF.Networking.IClient.RegisterCustomReceiver(System.Int32,System.Func{System.IO.Stream,System.Object})
  - XTMF.Networking.IClient.RegisterCustomSender(System.Int32,System.Action{System.Object,System.IO.Stream})
  - XTMF.Networking.IClient.RetriveResource(System.String,System.Type)
  - XTMF.Networking.IClient.SendCustomMessage(System.Object,System.Int32)
  - XTMF.Networking.IClient.SetResource(System.String,System.Object)
  - XTMF.Networking.IClient.UniqueID
  langs:
  - csharp
  - vb
  name: IClient
  nameWithType: IClient
  fullName: XTMF.Networking.IClient
  type: Interface
  source:
    remote:
      path: Code/XTMFInterfaces/Networking/IClient.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: IClient
    path: ../../../XTMF/Code/XTMFInterfaces/Networking/IClient.cs
    startLine: 28
  assemblies:
  - XTMFInterfaces
  namespace: XTMF.Networking
  summary: "\nInclude this in your Client ModelSystemTemplate in order to unlock the XTMF Networking Sub-System.\n\nThe containing class will need to leave this as a public field/property for it to be setup properly.\n"
  example: []
  syntax:
    content: public interface IClient
    content.vb: Public Interface IClient
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: XTMF.Networking.IClient.UniqueID
  commentId: P:XTMF.Networking.IClient.UniqueID
  id: UniqueID
  parent: XTMF.Networking.IClient
  langs:
  - csharp
  - vb
  name: UniqueID
  nameWithType: IClient.UniqueID
  fullName: XTMF.Networking.IClient.UniqueID
  type: Property
  source:
    remote:
      path: Code/XTMFInterfaces/Networking/IClient.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: UniqueID
    path: ../../../XTMF/Code/XTMFInterfaces/Networking/IClient.cs
    startLine: 33
  assemblies:
  - XTMFInterfaces
  namespace: XTMF.Networking
  summary: "\nThe Id of this client\n"
  example: []
  syntax:
    content: string UniqueID { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property UniqueID As String
  overload: XTMF.Networking.IClient.UniqueID*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: XTMF.Networking.IClient.NotifyComplete(System.Int32,System.String)
  commentId: M:XTMF.Networking.IClient.NotifyComplete(System.Int32,System.String)
  id: NotifyComplete(System.Int32,System.String)
  parent: XTMF.Networking.IClient
  langs:
  - csharp
  - vb
  name: NotifyComplete(Int32, String)
  nameWithType: IClient.NotifyComplete(Int32, String)
  fullName: XTMF.Networking.IClient.NotifyComplete(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Networking/IClient.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: NotifyComplete
    path: ../../../XTMF/Code/XTMFInterfaces/Networking/IClient.cs
    startLine: 40
  assemblies:
  - XTMFInterfaces
  namespace: XTMF.Networking
  summary: "\nNotify the host that we have completed our run\n"
  example: []
  syntax:
    content: void NotifyComplete(int status = 0, string error = null)
    parameters:
    - id: status
      type: System.Int32
      description: Set this to non-zero if there is additional meaning for the host
    - id: error
      type: System.String
      description: This allows us to pass back a string in case of an error
    content.vb: Sub NotifyComplete(status As Integer = 0, error As String = Nothing)
  overload: XTMF.Networking.IClient.NotifyComplete*
- uid: XTMF.Networking.IClient.NotifyProgress
  commentId: M:XTMF.Networking.IClient.NotifyProgress
  id: NotifyProgress
  parent: XTMF.Networking.IClient
  langs:
  - csharp
  - vb
  name: NotifyProgress()
  nameWithType: IClient.NotifyProgress()
  fullName: XTMF.Networking.IClient.NotifyProgress()
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Networking/IClient.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: NotifyProgress
    path: ../../../XTMF/Code/XTMFInterfaces/Networking/IClient.cs
    startLine: 46
  assemblies:
  - XTMFInterfaces
  namespace: XTMF.Networking
  summary: "\nNotify the host of our current state of progress.\nThe progress will be gathered by the XTMF framework automatically from the model system template\n"
  example: []
  syntax:
    content: void NotifyProgress()
    content.vb: Sub NotifyProgress
  overload: XTMF.Networking.IClient.NotifyProgress*
- uid: XTMF.Networking.IClient.RegisterCustomMessageHandler(System.Int32,System.Action{System.Object})
  commentId: M:XTMF.Networking.IClient.RegisterCustomMessageHandler(System.Int32,System.Action{System.Object})
  id: RegisterCustomMessageHandler(System.Int32,System.Action{System.Object})
  parent: XTMF.Networking.IClient
  langs:
  - csharp
  - vb
  name: RegisterCustomMessageHandler(Int32, Action<Object>)
  nameWithType: IClient.RegisterCustomMessageHandler(Int32, Action<Object>)
  fullName: XTMF.Networking.IClient.RegisterCustomMessageHandler(System.Int32, System.Action<System.Object>)
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Networking/IClient.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegisterCustomMessageHandler
    path: ../../../XTMF/Code/XTMFInterfaces/Networking/IClient.cs
    startLine: 48
  assemblies:
  - XTMFInterfaces
  namespace: XTMF.Networking
  syntax:
    content: void RegisterCustomMessageHandler(int customMessageNumber, Action<object> handler)
    parameters:
    - id: customMessageNumber
      type: System.Int32
    - id: handler
      type: System.Action{System.Object}
    content.vb: Sub RegisterCustomMessageHandler(customMessageNumber As Integer, handler As Action(Of Object))
  overload: XTMF.Networking.IClient.RegisterCustomMessageHandler*
  nameWithType.vb: IClient.RegisterCustomMessageHandler(Int32, Action(Of Object))
  fullName.vb: XTMF.Networking.IClient.RegisterCustomMessageHandler(System.Int32, System.Action(Of System.Object))
  name.vb: RegisterCustomMessageHandler(Int32, Action(Of Object))
- uid: XTMF.Networking.IClient.RegisterCustomReceiver(System.Int32,System.Func{System.IO.Stream,System.Object})
  commentId: M:XTMF.Networking.IClient.RegisterCustomReceiver(System.Int32,System.Func{System.IO.Stream,System.Object})
  id: RegisterCustomReceiver(System.Int32,System.Func{System.IO.Stream,System.Object})
  parent: XTMF.Networking.IClient
  langs:
  - csharp
  - vb
  name: RegisterCustomReceiver(Int32, Func<Stream, Object>)
  nameWithType: IClient.RegisterCustomReceiver(Int32, Func<Stream, Object>)
  fullName: XTMF.Networking.IClient.RegisterCustomReceiver(System.Int32, System.Func<System.IO.Stream, System.Object>)
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Networking/IClient.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegisterCustomReceiver
    path: ../../../XTMF/Code/XTMFInterfaces/Networking/IClient.cs
    startLine: 50
  assemblies:
  - XTMFInterfaces
  namespace: XTMF.Networking
  syntax:
    content: void RegisterCustomReceiver(int customMessageNumber, Func<Stream, object> converter)
    parameters:
    - id: customMessageNumber
      type: System.Int32
    - id: converter
      type: System.Func{System.IO.Stream,System.Object}
    content.vb: Sub RegisterCustomReceiver(customMessageNumber As Integer, converter As Func(Of Stream, Object))
  overload: XTMF.Networking.IClient.RegisterCustomReceiver*
  nameWithType.vb: IClient.RegisterCustomReceiver(Int32, Func(Of Stream, Object))
  fullName.vb: XTMF.Networking.IClient.RegisterCustomReceiver(System.Int32, System.Func(Of System.IO.Stream, System.Object))
  name.vb: RegisterCustomReceiver(Int32, Func(Of Stream, Object))
- uid: XTMF.Networking.IClient.RegisterCustomSender(System.Int32,System.Action{System.Object,System.IO.Stream})
  commentId: M:XTMF.Networking.IClient.RegisterCustomSender(System.Int32,System.Action{System.Object,System.IO.Stream})
  id: RegisterCustomSender(System.Int32,System.Action{System.Object,System.IO.Stream})
  parent: XTMF.Networking.IClient
  langs:
  - csharp
  - vb
  name: RegisterCustomSender(Int32, Action<Object, Stream>)
  nameWithType: IClient.RegisterCustomSender(Int32, Action<Object, Stream>)
  fullName: XTMF.Networking.IClient.RegisterCustomSender(System.Int32, System.Action<System.Object, System.IO.Stream>)
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Networking/IClient.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegisterCustomSender
    path: ../../../XTMF/Code/XTMFInterfaces/Networking/IClient.cs
    startLine: 52
  assemblies:
  - XTMFInterfaces
  namespace: XTMF.Networking
  syntax:
    content: void RegisterCustomSender(int customMessageNumber, Action<object, Stream> converter)
    parameters:
    - id: customMessageNumber
      type: System.Int32
    - id: converter
      type: System.Action{System.Object,System.IO.Stream}
    content.vb: Sub RegisterCustomSender(customMessageNumber As Integer, converter As Action(Of Object, Stream))
  overload: XTMF.Networking.IClient.RegisterCustomSender*
  nameWithType.vb: IClient.RegisterCustomSender(Int32, Action(Of Object, Stream))
  fullName.vb: XTMF.Networking.IClient.RegisterCustomSender(System.Int32, System.Action(Of System.Object, System.IO.Stream))
  name.vb: RegisterCustomSender(Int32, Action(Of Object, Stream))
- uid: XTMF.Networking.IClient.RetriveResource(System.String,System.Type)
  commentId: M:XTMF.Networking.IClient.RetriveResource(System.String,System.Type)
  id: RetriveResource(System.String,System.Type)
  parent: XTMF.Networking.IClient
  langs:
  - csharp
  - vb
  name: RetriveResource(String, Type)
  nameWithType: IClient.RetriveResource(String, Type)
  fullName: XTMF.Networking.IClient.RetriveResource(System.String, System.Type)
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Networking/IClient.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RetriveResource
    path: ../../../XTMF/Code/XTMFInterfaces/Networking/IClient.cs
    startLine: 60
  assemblies:
  - XTMFInterfaces
  namespace: XTMF.Networking
  summary: "\nGet a resource from the host\n"
  example: []
  syntax:
    content: object RetriveResource(string name, Type t)
    parameters:
    - id: name
      type: System.String
      description: The name of the resource
    - id: t
      type: System.Type
      description: The type of resource expected
    return:
      type: System.Object
      description: The object, if found and of type.  Null otherwise.
    content.vb: Function RetriveResource(name As String, t As Type) As Object
  overload: XTMF.Networking.IClient.RetriveResource*
- uid: XTMF.Networking.IClient.SendCustomMessage(System.Object,System.Int32)
  commentId: M:XTMF.Networking.IClient.SendCustomMessage(System.Object,System.Int32)
  id: SendCustomMessage(System.Object,System.Int32)
  parent: XTMF.Networking.IClient
  langs:
  - csharp
  - vb
  name: SendCustomMessage(Object, Int32)
  nameWithType: IClient.SendCustomMessage(Object, Int32)
  fullName: XTMF.Networking.IClient.SendCustomMessage(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Networking/IClient.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: SendCustomMessage
    path: ../../../XTMF/Code/XTMFInterfaces/Networking/IClient.cs
    startLine: 62
  assemblies:
  - XTMFInterfaces
  namespace: XTMF.Networking
  syntax:
    content: void SendCustomMessage(object data, int customMessageNumber)
    parameters:
    - id: data
      type: System.Object
    - id: customMessageNumber
      type: System.Int32
    content.vb: Sub SendCustomMessage(data As Object, customMessageNumber As Integer)
  overload: XTMF.Networking.IClient.SendCustomMessage*
- uid: XTMF.Networking.IClient.SetResource(System.String,System.Object)
  commentId: M:XTMF.Networking.IClient.SetResource(System.String,System.Object)
  id: SetResource(System.String,System.Object)
  parent: XTMF.Networking.IClient
  langs:
  - csharp
  - vb
  name: SetResource(String, Object)
  nameWithType: IClient.SetResource(String, Object)
  fullName: XTMF.Networking.IClient.SetResource(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Code/XTMFInterfaces/Networking/IClient.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: SetResource
    path: ../../../XTMF/Code/XTMFInterfaces/Networking/IClient.cs
    startLine: 70
  assemblies:
  - XTMFInterfaces
  namespace: XTMF.Networking
  summary: "\nSet the resource on the host\n"
  example: []
  syntax:
    content: bool SetResource(string name, object o)
    parameters:
    - id: name
      type: System.String
      description: With the given name
    - id: o
      type: System.Object
      description: The object to send
    return:
      type: System.Boolean
      description: True if successful
    content.vb: Function SetResource(name As String, o As Object) As Boolean
  overload: XTMF.Networking.IClient.SetResource*
references:
- uid: XTMF.Networking
  commentId: N:XTMF.Networking
  isExternal: false
  name: XTMF.Networking
  nameWithType: XTMF.Networking
  fullName: XTMF.Networking
- uid: XTMF.Networking.IClient.UniqueID*
  commentId: Overload:XTMF.Networking.IClient.UniqueID
  isExternal: false
  name: UniqueID
  nameWithType: IClient.UniqueID
  fullName: XTMF.Networking.IClient.UniqueID
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: XTMF.Networking.IClient.NotifyComplete*
  commentId: Overload:XTMF.Networking.IClient.NotifyComplete
  isExternal: false
  name: NotifyComplete
  nameWithType: IClient.NotifyComplete
  fullName: XTMF.Networking.IClient.NotifyComplete
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: XTMF.Networking.IClient.NotifyProgress*
  commentId: Overload:XTMF.Networking.IClient.NotifyProgress
  isExternal: false
  name: NotifyProgress
  nameWithType: IClient.NotifyProgress
  fullName: XTMF.Networking.IClient.NotifyProgress
- uid: XTMF.Networking.IClient.RegisterCustomMessageHandler*
  commentId: Overload:XTMF.Networking.IClient.RegisterCustomMessageHandler
  isExternal: false
  name: RegisterCustomMessageHandler
  nameWithType: IClient.RegisterCustomMessageHandler
  fullName: XTMF.Networking.IClient.RegisterCustomMessageHandler
- uid: System.Action{System.Object}
  commentId: T:System.Action{System.Object}
  parent: System
  definition: System.Action`1
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
  nameWithType.vb: Action(Of Object)
  fullName.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.Networking.IClient.RegisterCustomReceiver*
  commentId: Overload:XTMF.Networking.IClient.RegisterCustomReceiver
  isExternal: false
  name: RegisterCustomReceiver
  nameWithType: IClient.RegisterCustomReceiver
  fullName: XTMF.Networking.IClient.RegisterCustomReceiver
- uid: System.Func{System.IO.Stream,System.Object}
  commentId: T:System.Func{System.IO.Stream,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<Stream, Object>
  nameWithType: Func<Stream, Object>
  fullName: System.Func<System.IO.Stream, System.Object>
  nameWithType.vb: Func(Of Stream, Object)
  fullName.vb: System.Func(Of System.IO.Stream, System.Object)
  name.vb: Func(Of Stream, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.Networking.IClient.RegisterCustomSender*
  commentId: Overload:XTMF.Networking.IClient.RegisterCustomSender
  isExternal: false
  name: RegisterCustomSender
  nameWithType: IClient.RegisterCustomSender
  fullName: XTMF.Networking.IClient.RegisterCustomSender
- uid: System.Action{System.Object,System.IO.Stream}
  commentId: T:System.Action{System.Object,System.IO.Stream}
  parent: System
  definition: System.Action`2
  name: Action<Object, Stream>
  nameWithType: Action<Object, Stream>
  fullName: System.Action<System.Object, System.IO.Stream>
  nameWithType.vb: Action(Of Object, Stream)
  fullName.vb: System.Action(Of System.Object, System.IO.Stream)
  name.vb: Action(Of Object, Stream)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.Networking.IClient.RetriveResource*
  commentId: Overload:XTMF.Networking.IClient.RetriveResource
  isExternal: false
  name: RetriveResource
  nameWithType: IClient.RetriveResource
  fullName: XTMF.Networking.IClient.RetriveResource
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: XTMF.Networking.IClient.SendCustomMessage*
  commentId: Overload:XTMF.Networking.IClient.SendCustomMessage
  isExternal: false
  name: SendCustomMessage
  nameWithType: IClient.SendCustomMessage
  fullName: XTMF.Networking.IClient.SendCustomMessage
- uid: XTMF.Networking.IClient.SetResource*
  commentId: Overload:XTMF.Networking.IClient.SetResource
  isExternal: false
  name: SetResource
  nameWithType: IClient.SetResource
  fullName: XTMF.Networking.IClient.SetResource
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
