### YamlMime:ManagedReference
items:
- uid: XTMF.Testing.Modules.Editing.TestGenericModule`2
  commentId: T:XTMF.Testing.Modules.Editing.TestGenericModule`2
  id: TestGenericModule`2
  parent: XTMF.Testing.Modules.Editing
  children:
  - XTMF.Testing.Modules.Editing.TestGenericModule`2.Data
  langs:
  - csharp
  - vb
  name: TestGenericModule<H, I>
  nameWithType: TestGenericModule<H, I>
  fullName: XTMF.Testing.Modules.Editing.TestGenericModule<H, I>
  type: Class
  source:
    remote:
      path: Code/XTMFCoreTesting/Modules/Editing/TestGenericModule.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: TestGenericModule
    path: ../../XTMF/Code/XTMFCoreTesting/Modules/Editing/TestGenericModule.cs
    startLine: 44
  assemblies:
  - XTMFCoreTesting
  namespace: XTMF.Testing.Modules.Editing
  syntax:
    content: 'public class TestGenericModule<H, I> : NonGenericBase<float, H, I>, IGenericInterface<float, float, H, I>, IModule'
    typeParameters:
    - id: H
    - id: I
    content.vb: >-
      Public Class TestGenericModule(Of H, I)

          Inherits NonGenericBase(Of Single, H, I)

          Implements IGenericInterface(Of Single, Single, H, I), IModule
  inheritance:
  - System.Object
  - XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}
  implements:
  - XTMF.Testing.Modules.Editing.IGenericInterface{System.Single,System.Single,{H},{I}}
  - XTMF.IModule
  inheritedMembers:
  - XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}.Name
  - XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}.Progress
  - XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}.ProgressColour
  - XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}.RuntimeValidation(System.String@)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  - XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  nameWithType.vb: TestGenericModule(Of H, I)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: XTMF.Testing.Modules.Editing.TestGenericModule(Of H, I)
  name.vb: TestGenericModule(Of H, I)
- uid: XTMF.Testing.Modules.Editing.TestGenericModule`2.Data
  commentId: F:XTMF.Testing.Modules.Editing.TestGenericModule`2.Data
  id: Data
  parent: XTMF.Testing.Modules.Editing.TestGenericModule`2
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: TestGenericModule<H, I>.Data
  fullName: XTMF.Testing.Modules.Editing.TestGenericModule<H, I>.Data
  type: Field
  source:
    remote:
      path: Code/XTMFCoreTesting/Modules/Editing/TestGenericModule.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Data
    path: ../../XTMF/Code/XTMFCoreTesting/Modules/Editing/TestGenericModule.cs
    startLine: 50
  assemblies:
  - XTMFCoreTesting
  namespace: XTMF.Testing.Modules.Editing
  summary: "\nActually have a data field in order to ensure the T matters\n"
  example: []
  syntax:
    content: public I Data
    return:
      type: '{I}'
    content.vb: Public Data As I
  nameWithType.vb: TestGenericModule(Of H, I).Data
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: XTMF.Testing.Modules.Editing.TestGenericModule(Of H, I).Data
references:
- uid: XTMF.Testing.Modules.Editing
  commentId: N:XTMF.Testing.Modules.Editing
  isExternal: false
  name: XTMF.Testing.Modules.Editing
  nameWithType: XTMF.Testing.Modules.Editing
  fullName: XTMF.Testing.Modules.Editing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}
  commentId: T:XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,`0,`1}
  parent: XTMF.Testing.Modules.Editing
  definition: XTMF.Testing.Modules.Editing.NonGenericBase`3
  name: NonGenericBase<Single, H, I>
  nameWithType: NonGenericBase<Single, H, I>
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<System.Single, H, I>
  nameWithType.vb: NonGenericBase(Of Single, H, I)
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of System.Single, H, I)
  name.vb: NonGenericBase(Of Single, H, I)
  spec.csharp:
  - uid: XTMF.Testing.Modules.Editing.NonGenericBase`3
    name: NonGenericBase
    nameWithType: NonGenericBase
    fullName: XTMF.Testing.Modules.Editing.NonGenericBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: H
    nameWithType: H
    fullName: H
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: I
    nameWithType: I
    fullName: I
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.Testing.Modules.Editing.NonGenericBase`3
    name: NonGenericBase
    nameWithType: NonGenericBase
    fullName: XTMF.Testing.Modules.Editing.NonGenericBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: H
    nameWithType: H
    fullName: H
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: I
    nameWithType: I
    fullName: I
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.Testing.Modules.Editing.IGenericInterface{System.Single,System.Single,{H},{I}}
  commentId: T:XTMF.Testing.Modules.Editing.IGenericInterface{System.Single,System.Single,`0,`1}
  parent: XTMF.Testing.Modules.Editing
  definition: XTMF.Testing.Modules.Editing.IGenericInterface`4
  name: IGenericInterface<Single, Single, H, I>
  nameWithType: IGenericInterface<Single, Single, H, I>
  fullName: XTMF.Testing.Modules.Editing.IGenericInterface<System.Single, System.Single, H, I>
  nameWithType.vb: IGenericInterface(Of Single, Single, H, I)
  fullName.vb: XTMF.Testing.Modules.Editing.IGenericInterface(Of System.Single, System.Single, H, I)
  name.vb: IGenericInterface(Of Single, Single, H, I)
  spec.csharp:
  - uid: XTMF.Testing.Modules.Editing.IGenericInterface`4
    name: IGenericInterface
    nameWithType: IGenericInterface
    fullName: XTMF.Testing.Modules.Editing.IGenericInterface
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: H
    nameWithType: H
    fullName: H
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: I
    nameWithType: I
    fullName: I
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.Testing.Modules.Editing.IGenericInterface`4
    name: IGenericInterface
    nameWithType: IGenericInterface
    fullName: XTMF.Testing.Modules.Editing.IGenericInterface
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: H
    nameWithType: H
    fullName: H
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: I
    nameWithType: I
    fullName: I
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule
  commentId: T:XTMF.IModule
  parent: XTMF
  isExternal: false
  name: IModule
  nameWithType: IModule
  fullName: XTMF.IModule
- uid: XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}.Name
  commentId: P:XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,`0,`1}.Name
  parent: XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}
  definition: XTMF.Testing.Modules.Editing.NonGenericBase`3.Name
  name: Name
  nameWithType: NonGenericBase<Single, H, I>.Name
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<System.Single, H, I>.Name
  nameWithType.vb: NonGenericBase(Of Single, H, I).Name
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of System.Single, H, I).Name
- uid: XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}.Progress
  commentId: P:XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,`0,`1}.Progress
  parent: XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}
  definition: XTMF.Testing.Modules.Editing.NonGenericBase`3.Progress
  name: Progress
  nameWithType: NonGenericBase<Single, H, I>.Progress
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<System.Single, H, I>.Progress
  nameWithType.vb: NonGenericBase(Of Single, H, I).Progress
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of System.Single, H, I).Progress
- uid: XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}.ProgressColour
  commentId: P:XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,`0,`1}.ProgressColour
  parent: XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}
  definition: XTMF.Testing.Modules.Editing.NonGenericBase`3.ProgressColour
  name: ProgressColour
  nameWithType: NonGenericBase<Single, H, I>.ProgressColour
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<System.Single, H, I>.ProgressColour
  nameWithType.vb: NonGenericBase(Of Single, H, I).ProgressColour
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of System.Single, H, I).ProgressColour
- uid: XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}.RuntimeValidation(System.String@)
  commentId: M:XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,`0,`1}.RuntimeValidation(System.String@)
  parent: XTMF.Testing.Modules.Editing.NonGenericBase{System.Single,{H},{I}}
  definition: XTMF.Testing.Modules.Editing.NonGenericBase`3.RuntimeValidation(System.String@)
  name: RuntimeValidation(String)
  nameWithType: NonGenericBase<Single, H, I>.RuntimeValidation(String)
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<System.Single, H, I>.RuntimeValidation(System.String)
  nameWithType.vb: NonGenericBase(Of Single, H, I).RuntimeValidation(String)
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of System.Single, H, I).RuntimeValidation(System.String)
  spec.csharp:
  - uid: XTMF.Testing.Modules.Editing.NonGenericBase`3.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: NonGenericBase<Single, H, I>.RuntimeValidation
    fullName: XTMF.Testing.Modules.Editing.NonGenericBase<System.Single, H, I>.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.Testing.Modules.Editing.NonGenericBase`3.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: NonGenericBase(Of Single, H, I).RuntimeValidation
    fullName: XTMF.Testing.Modules.Editing.NonGenericBase(Of System.Single, H, I).RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  name: EnsureExactlyOne(IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.IModule.TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{{T}},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  parent: TMG.Functions.ModuleHelper
  definition: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  name: EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: XTMF.Testing.Modules.Editing.NonGenericBase`3
  commentId: T:XTMF.Testing.Modules.Editing.NonGenericBase`3
  isExternal: false
  name: NonGenericBase<E, F, G>
  nameWithType: NonGenericBase<E, F, G>
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<E, F, G>
  nameWithType.vb: NonGenericBase(Of E, F, G)
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of E, F, G)
  name.vb: NonGenericBase(Of E, F, G)
  spec.csharp:
  - uid: XTMF.Testing.Modules.Editing.NonGenericBase`3
    name: NonGenericBase
    nameWithType: NonGenericBase
    fullName: XTMF.Testing.Modules.Editing.NonGenericBase
  - name: <
    nameWithType: <
    fullName: <
  - name: E
    nameWithType: E
    fullName: E
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: F
    nameWithType: F
    fullName: F
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: G
    nameWithType: G
    fullName: G
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.Testing.Modules.Editing.NonGenericBase`3
    name: NonGenericBase
    nameWithType: NonGenericBase
    fullName: XTMF.Testing.Modules.Editing.NonGenericBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: E
    nameWithType: E
    fullName: E
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: F
    nameWithType: F
    fullName: F
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: G
    nameWithType: G
    fullName: G
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF.Testing.Modules.Editing.IGenericInterface`4
  commentId: T:XTMF.Testing.Modules.Editing.IGenericInterface`4
  isExternal: false
  name: IGenericInterface<A, B, C, D>
  nameWithType: IGenericInterface<A, B, C, D>
  fullName: XTMF.Testing.Modules.Editing.IGenericInterface<A, B, C, D>
  nameWithType.vb: IGenericInterface(Of A, B, C, D)
  fullName.vb: XTMF.Testing.Modules.Editing.IGenericInterface(Of A, B, C, D)
  name.vb: IGenericInterface(Of A, B, C, D)
  spec.csharp:
  - uid: XTMF.Testing.Modules.Editing.IGenericInterface`4
    name: IGenericInterface
    nameWithType: IGenericInterface
    fullName: XTMF.Testing.Modules.Editing.IGenericInterface
  - name: <
    nameWithType: <
    fullName: <
  - name: A
    nameWithType: A
    fullName: A
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: B
    nameWithType: B
    fullName: B
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: D
    nameWithType: D
    fullName: D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XTMF.Testing.Modules.Editing.IGenericInterface`4
    name: IGenericInterface
    nameWithType: IGenericInterface
    fullName: XTMF.Testing.Modules.Editing.IGenericInterface
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: A
    nameWithType: A
    fullName: A
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: B
    nameWithType: B
    fullName: B
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: C
    nameWithType: C
    fullName: C
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: D
    nameWithType: D
    fullName: D
  - name: )
    nameWithType: )
    fullName: )
- uid: XTMF
  commentId: N:XTMF
  isExternal: false
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: XTMF.Testing.Modules.Editing.NonGenericBase`3.Name
  commentId: P:XTMF.Testing.Modules.Editing.NonGenericBase`3.Name
  isExternal: false
  name: Name
  nameWithType: NonGenericBase<E, F, G>.Name
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<E, F, G>.Name
  nameWithType.vb: NonGenericBase(Of E, F, G).Name
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of E, F, G).Name
- uid: XTMF.Testing.Modules.Editing.NonGenericBase`3.Progress
  commentId: P:XTMF.Testing.Modules.Editing.NonGenericBase`3.Progress
  isExternal: false
  name: Progress
  nameWithType: NonGenericBase<E, F, G>.Progress
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<E, F, G>.Progress
  nameWithType.vb: NonGenericBase(Of E, F, G).Progress
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of E, F, G).Progress
- uid: XTMF.Testing.Modules.Editing.NonGenericBase`3.ProgressColour
  commentId: P:XTMF.Testing.Modules.Editing.NonGenericBase`3.ProgressColour
  isExternal: false
  name: ProgressColour
  nameWithType: NonGenericBase<E, F, G>.ProgressColour
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<E, F, G>.ProgressColour
  nameWithType.vb: NonGenericBase(Of E, F, G).ProgressColour
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of E, F, G).ProgressColour
- uid: XTMF.Testing.Modules.Editing.NonGenericBase`3.RuntimeValidation(System.String@)
  commentId: M:XTMF.Testing.Modules.Editing.NonGenericBase`3.RuntimeValidation(System.String@)
  isExternal: true
  name: RuntimeValidation(String)
  nameWithType: NonGenericBase<E, F, G>.RuntimeValidation(String)
  fullName: XTMF.Testing.Modules.Editing.NonGenericBase<E, F, G>.RuntimeValidation(System.String)
  nameWithType.vb: NonGenericBase(Of E, F, G).RuntimeValidation(String)
  fullName.vb: XTMF.Testing.Modules.Editing.NonGenericBase(Of E, F, G).RuntimeValidation(System.String)
  spec.csharp:
  - uid: XTMF.Testing.Modules.Editing.NonGenericBase`3.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: NonGenericBase<E, F, G>.RuntimeValidation
    fullName: XTMF.Testing.Modules.Editing.NonGenericBase<E, F, G>.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.Testing.Modules.Editing.NonGenericBase`3.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: NonGenericBase(Of E, F, G).RuntimeValidation
    fullName: XTMF.Testing.Modules.Editing.NonGenericBase(Of E, F, G).RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureExactlyOneAndOfSameType(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType<T>
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType<T>
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureExactlyOneAndOfSameType(Of T)
    nameWithType: ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOneAndOfSameType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper
  commentId: T:TMG.Functions.ModuleHelper
  parent: TMG.Functions
  isExternal: false
  name: ModuleHelper
  nameWithType: ModuleHelper
  fullName: TMG.Functions.ModuleHelper
- uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
  isExternal: true
  name: EnsureExactlyOne(IModule, IModule, IModule, String)
  nameWithType: ModuleHelper.EnsureExactlyOne(IModule, IModule, IModule, String)
  fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule, XTMF.IModule, XTMF.IModule, System.String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureExactlyOne(XTMF.IModule,XTMF.IModule,XTMF.IModule,System.String@)
    name: EnsureExactlyOne
    nameWithType: ModuleHelper.EnsureExactlyOne
    fullName: TMG.Functions.ModuleHelper.EnsureExactlyOne
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  commentId: M:TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
  isExternal: true
  name: EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  nameWithType: ModuleHelper.EnsureTypesMatch<T>(IModule, IDataSource<T>, IResource, String)
  fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>(XTMF.IModule, XTMF.IDataSource<T>, XTMF.IResource, System.String)
  nameWithType.vb: ModuleHelper.EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  fullName.vb: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)(XTMF.IModule, XTMF.IDataSource(Of T), XTMF.IResource, System.String)
  name.vb: EnsureTypesMatch(Of T)(IModule, IDataSource(Of T), IResource, String)
  spec.csharp:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch<T>
    nameWithType: ModuleHelper.EnsureTypesMatch<T>
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.Functions.ModuleHelper.EnsureTypesMatch``1(XTMF.IModule,XTMF.IDataSource{``0},XTMF.IResource,System.String@)
    name: EnsureTypesMatch(Of T)
    nameWithType: ModuleHelper.EnsureTypesMatch(Of T)
    fullName: TMG.Functions.ModuleHelper.EnsureTypesMatch(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: XTMF.IModule
    name: IModule
    nameWithType: IModule
    fullName: XTMF.IModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IDataSource`1
    name: IDataSource
    nameWithType: IDataSource
    fullName: XTMF.IDataSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XTMF.IResource
    name: IResource
    nameWithType: IResource
    fullName: XTMF.IResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.Functions
  commentId: N:TMG.Functions
  isExternal: false
  name: TMG.Functions
  nameWithType: TMG.Functions
  fullName: TMG.Functions
- uid: '{I}'
  commentId: '!:I'
  definition: I
  name: I
  nameWithType: I
  fullName: I
- uid: I
  commentId: '!:I'
  isExternal: false
  name: I
  nameWithType: I
  fullName: I
