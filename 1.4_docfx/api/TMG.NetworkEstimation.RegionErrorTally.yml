### YamlMime:ManagedReference
items:
- uid: TMG.NetworkEstimation.RegionErrorTally
  commentId: T:TMG.NetworkEstimation.RegionErrorTally
  id: RegionErrorTally
  parent: TMG.NetworkEstimation
  children:
  - TMG.NetworkEstimation.RegionErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting[],TMG.Emme.TransitLine[],TMG.Emme.TransitLine[])
  - TMG.NetworkEstimation.RegionErrorTally.MabsWeight
  - TMG.NetworkEstimation.RegionErrorTally.Name
  - TMG.NetworkEstimation.RegionErrorTally.Progress
  - TMG.NetworkEstimation.RegionErrorTally.ProgressColour
  - TMG.NetworkEstimation.RegionErrorTally.RegionErrorFile
  - TMG.NetworkEstimation.RegionErrorTally.RegionPercentError
  - TMG.NetworkEstimation.RegionErrorTally.RmseWeight
  - TMG.NetworkEstimation.RegionErrorTally.RuntimeValidation(System.String@)
  - TMG.NetworkEstimation.RegionErrorTally.TerrorWeight
  langs:
  - csharp
  - vb
  name: RegionErrorTally
  nameWithType: RegionErrorTally
  fullName: TMG.NetworkEstimation.RegionErrorTally
  type: Class
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegionErrorTally
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 29
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: 'public class RegionErrorTally : IErrorTally, IModule'
    content.vb: >-
      Public Class RegionErrorTally
          Implements IErrorTally, IModule
  inheritance:
  - System.Object
  implements:
  - TMG.NetworkEstimation.IErrorTally
  - XTMF.IModule
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TMG.NetworkEstimation.RegionErrorTally.MabsWeight
  commentId: F:TMG.NetworkEstimation.RegionErrorTally.MabsWeight
  id: MabsWeight
  parent: TMG.NetworkEstimation.RegionErrorTally
  langs:
  - csharp
  - vb
  name: MabsWeight
  nameWithType: RegionErrorTally.MabsWeight
  fullName: TMG.NetworkEstimation.RegionErrorTally.MabsWeight
  type: Field
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: MabsWeight
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 32
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: >-
      [RunParameter("Absolute Error Weight", 0F, "The weight for absolute error.")]

      public float MabsWeight
    return:
      type: System.Single
    content.vb: >-
      <RunParameter("Absolute Error Weight", 0F, "The weight for absolute error.")>

      Public MabsWeight As Single
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Absolute Error Weight
    - type: System.Single
      value: 0
    - type: System.String
      value: The weight for absolute error.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.NetworkEstimation.RegionErrorTally.RegionErrorFile
  commentId: F:TMG.NetworkEstimation.RegionErrorTally.RegionErrorFile
  id: RegionErrorFile
  parent: TMG.NetworkEstimation.RegionErrorTally
  langs:
  - csharp
  - vb
  name: RegionErrorFile
  nameWithType: RegionErrorTally.RegionErrorFile
  fullName: TMG.NetworkEstimation.RegionErrorTally.RegionErrorFile
  type: Field
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegionErrorFile
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 35
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: >-
      [RunParameter("Region Error File", "RegionError.csv", "The file name to save the region error into.")]

      public string RegionErrorFile
    return:
      type: System.String
    content.vb: >-
      <RunParameter("Region Error File", "RegionError.csv", "The file name to save the region error into.")>

      Public RegionErrorFile As String
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Region Error File
    - type: System.String
      value: RegionError.csv
    - type: System.String
      value: The file name to save the region error into.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.NetworkEstimation.RegionErrorTally.RegionPercentError
  commentId: F:TMG.NetworkEstimation.RegionErrorTally.RegionPercentError
  id: RegionPercentError
  parent: TMG.NetworkEstimation.RegionErrorTally
  langs:
  - csharp
  - vb
  name: RegionPercentError
  nameWithType: RegionErrorTally.RegionPercentError
  fullName: TMG.NetworkEstimation.RegionErrorTally.RegionPercentError
  type: Field
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RegionPercentError
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 38
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: >-
      [RunParameter("Region Percent Error", false, "Should we use error in terms of percent when doing the calculations?")]

      public bool RegionPercentError
    return:
      type: System.Boolean
    content.vb: >-
      <RunParameter("Region Percent Error", False, "Should we use error in terms of percent when doing the calculations?")>

      Public RegionPercentError As Boolean
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Region Percent Error
    - type: System.Boolean
      value: false
    - type: System.String
      value: Should we use error in terms of percent when doing the calculations?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.NetworkEstimation.RegionErrorTally.RmseWeight
  commentId: F:TMG.NetworkEstimation.RegionErrorTally.RmseWeight
  id: RmseWeight
  parent: TMG.NetworkEstimation.RegionErrorTally
  langs:
  - csharp
  - vb
  name: RmseWeight
  nameWithType: RegionErrorTally.RmseWeight
  fullName: TMG.NetworkEstimation.RegionErrorTally.RmseWeight
  type: Field
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RmseWeight
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 41
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: >-
      [RunParameter("Root Mean Square Error Weight", 1F, "The weight for root mean square error.")]

      public float RmseWeight
    return:
      type: System.Single
    content.vb: >-
      <RunParameter("Root Mean Square Error Weight", 1F, "The weight for root mean square error.")>

      Public RmseWeight As Single
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Root Mean Square Error Weight
    - type: System.Single
      value: 1
    - type: System.String
      value: The weight for root mean square error.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.NetworkEstimation.RegionErrorTally.TerrorWeight
  commentId: F:TMG.NetworkEstimation.RegionErrorTally.TerrorWeight
  id: TerrorWeight
  parent: TMG.NetworkEstimation.RegionErrorTally
  langs:
  - csharp
  - vb
  name: TerrorWeight
  nameWithType: RegionErrorTally.TerrorWeight
  fullName: TMG.NetworkEstimation.RegionErrorTally.TerrorWeight
  type: Field
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: TerrorWeight
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 44
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: >-
      [RunParameter("Total Error Weight", 0F, "The weight for total error.")]

      public float TerrorWeight
    return:
      type: System.Single
    content.vb: >-
      <RunParameter("Total Error Weight", 0F, "The weight for total error.")>

      Public TerrorWeight As Single
  attributes:
  - type: XTMF.RunParameterAttribute
    ctor: XTMF.RunParameterAttribute.#ctor(System.String,System.Object,System.String)
    arguments:
    - type: System.String
      value: Total Error Weight
    - type: System.Single
      value: 0
    - type: System.String
      value: The weight for total error.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TMG.NetworkEstimation.RegionErrorTally.Name
  commentId: P:TMG.NetworkEstimation.RegionErrorTally.Name
  id: Name
  parent: TMG.NetworkEstimation.RegionErrorTally
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: RegionErrorTally.Name
  fullName: TMG.NetworkEstimation.RegionErrorTally.Name
  type: Property
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Name
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 46
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: TMG.NetworkEstimation.RegionErrorTally.Name*
  implements:
  - XTMF.IModule.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.NetworkEstimation.RegionErrorTally.Progress
  commentId: P:TMG.NetworkEstimation.RegionErrorTally.Progress
  id: Progress
  parent: TMG.NetworkEstimation.RegionErrorTally
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: RegionErrorTally.Progress
  fullName: TMG.NetworkEstimation.RegionErrorTally.Progress
  type: Property
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: Progress
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 52
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: public float Progress { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Progress As Single
  overload: TMG.NetworkEstimation.RegionErrorTally.Progress*
  implements:
  - XTMF.IModule.Progress
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TMG.NetworkEstimation.RegionErrorTally.ProgressColour
  commentId: P:TMG.NetworkEstimation.RegionErrorTally.ProgressColour
  id: ProgressColour
  parent: TMG.NetworkEstimation.RegionErrorTally
  langs:
  - csharp
  - vb
  name: ProgressColour
  nameWithType: RegionErrorTally.ProgressColour
  fullName: TMG.NetworkEstimation.RegionErrorTally.ProgressColour
  type: Property
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ProgressColour
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 58
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: public Tuple<byte, byte, byte> ProgressColour { get; }
    parameters: []
    return:
      type: System.Tuple{System.Byte,System.Byte,System.Byte}
    content.vb: Public ReadOnly Property ProgressColour As Tuple(Of Byte, Byte, Byte)
  overload: TMG.NetworkEstimation.RegionErrorTally.ProgressColour*
  implements:
  - XTMF.IModule.ProgressColour
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TMG.NetworkEstimation.RegionErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting[],TMG.Emme.TransitLine[],TMG.Emme.TransitLine[])
  commentId: M:TMG.NetworkEstimation.RegionErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting[],TMG.Emme.TransitLine[],TMG.Emme.TransitLine[])
  id: ComputeError(TMG.NetworkEstimation.ParameterSetting[],TMG.Emme.TransitLine[],TMG.Emme.TransitLine[])
  parent: TMG.NetworkEstimation.RegionErrorTally
  langs:
  - csharp
  - vb
  name: ComputeError(ParameterSetting[], TransitLine[], TransitLine[])
  nameWithType: RegionErrorTally.ComputeError(ParameterSetting[], TransitLine[], TransitLine[])
  fullName: TMG.NetworkEstimation.RegionErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting[], TMG.Emme.TransitLine[], TMG.Emme.TransitLine[])
  type: Method
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: ComputeError
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 63
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: public float ComputeError(ParameterSetting[] parameters, TransitLine[] transitLine, TransitLine[] predicted)
    parameters:
    - id: parameters
      type: TMG.NetworkEstimation.ParameterSetting[]
    - id: transitLine
      type: TMG.Emme.TransitLine[]
    - id: predicted
      type: TMG.Emme.TransitLine[]
    return:
      type: System.Single
    content.vb: Public Function ComputeError(parameters As ParameterSetting(), transitLine As TransitLine(), predicted As TransitLine()) As Single
  overload: TMG.NetworkEstimation.RegionErrorTally.ComputeError*
  implements:
  - TMG.NetworkEstimation.IErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting[],TMG.Emme.TransitLine[],TMG.Emme.TransitLine[])
  nameWithType.vb: RegionErrorTally.ComputeError(ParameterSetting(), TransitLine(), TransitLine())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TMG.NetworkEstimation.RegionErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting(), TMG.Emme.TransitLine(), TMG.Emme.TransitLine())
  name.vb: ComputeError(ParameterSetting(), TransitLine(), TransitLine())
- uid: TMG.NetworkEstimation.RegionErrorTally.RuntimeValidation(System.String@)
  commentId: M:TMG.NetworkEstimation.RegionErrorTally.RuntimeValidation(System.String@)
  id: RuntimeValidation(System.String@)
  parent: TMG.NetworkEstimation.RegionErrorTally
  langs:
  - csharp
  - vb
  name: RuntimeValidation(ref String)
  nameWithType: RegionErrorTally.RuntimeValidation(ref String)
  fullName: TMG.NetworkEstimation.RegionErrorTally.RuntimeValidation(ref System.String)
  type: Method
  source:
    remote:
      path: Code/NetworkEstimation/RegionErrorTally.cs
      branch: dev-1.4
      repo: https://github.com/TravelModellingGroup/XTMF.git
    id: RuntimeValidation
    path: ../../../XTMF/Code/NetworkEstimation/RegionErrorTally.cs
    startLine: 178
  assemblies:
  - NetworkEstimation
  namespace: TMG.NetworkEstimation
  syntax:
    content: public bool RuntimeValidation(ref string error)
    parameters:
    - id: error
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function RuntimeValidation(ByRef error As String) As Boolean
  overload: TMG.NetworkEstimation.RegionErrorTally.RuntimeValidation*
  implements:
  - XTMF.IModule.RuntimeValidation(System.String@)
  nameWithType.vb: RegionErrorTally.RuntimeValidation(ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TMG.NetworkEstimation.RegionErrorTally.RuntimeValidation(ByRef System.String)
  name.vb: RuntimeValidation(ByRef String)
references:
- uid: TMG.NetworkEstimation
  commentId: N:TMG.NetworkEstimation
  isExternal: false
  name: TMG.NetworkEstimation
  nameWithType: TMG.NetworkEstimation
  fullName: TMG.NetworkEstimation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TMG.NetworkEstimation.IErrorTally
  commentId: T:TMG.NetworkEstimation.IErrorTally
  parent: TMG.NetworkEstimation
  isExternal: false
  name: IErrorTally
  nameWithType: IErrorTally
  fullName: TMG.NetworkEstimation.IErrorTally
- uid: XTMF.IModule
  commentId: T:XTMF.IModule
  parent: XTMF
  isExternal: false
  name: IModule
  nameWithType: IModule
  fullName: XTMF.IModule
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: XTMF
  commentId: N:XTMF
  isExternal: false
  name: XTMF
  nameWithType: XTMF
  fullName: XTMF
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TMG.NetworkEstimation.RegionErrorTally.Name*
  commentId: Overload:TMG.NetworkEstimation.RegionErrorTally.Name
  isExternal: false
  name: Name
  nameWithType: RegionErrorTally.Name
  fullName: TMG.NetworkEstimation.RegionErrorTally.Name
- uid: XTMF.IModule.Name
  commentId: P:XTMF.IModule.Name
  parent: XTMF.IModule
  isExternal: false
  name: Name
  nameWithType: IModule.Name
  fullName: XTMF.IModule.Name
- uid: TMG.NetworkEstimation.RegionErrorTally.Progress*
  commentId: Overload:TMG.NetworkEstimation.RegionErrorTally.Progress
  isExternal: false
  name: Progress
  nameWithType: RegionErrorTally.Progress
  fullName: TMG.NetworkEstimation.RegionErrorTally.Progress
- uid: XTMF.IModule.Progress
  commentId: P:XTMF.IModule.Progress
  parent: XTMF.IModule
  isExternal: false
  name: Progress
  nameWithType: IModule.Progress
  fullName: XTMF.IModule.Progress
- uid: TMG.NetworkEstimation.RegionErrorTally.ProgressColour*
  commentId: Overload:TMG.NetworkEstimation.RegionErrorTally.ProgressColour
  isExternal: false
  name: ProgressColour
  nameWithType: RegionErrorTally.ProgressColour
  fullName: TMG.NetworkEstimation.RegionErrorTally.ProgressColour
- uid: XTMF.IModule.ProgressColour
  commentId: P:XTMF.IModule.ProgressColour
  parent: XTMF.IModule
  isExternal: false
  name: ProgressColour
  nameWithType: IModule.ProgressColour
  fullName: XTMF.IModule.ProgressColour
- uid: System.Tuple{System.Byte,System.Byte,System.Byte}
  commentId: T:System.Tuple{System.Byte,System.Byte,System.Byte}
  parent: System
  definition: System.Tuple`3
  name: Tuple<Byte, Byte, Byte>
  nameWithType: Tuple<Byte, Byte, Byte>
  fullName: System.Tuple<System.Byte, System.Byte, System.Byte>
  nameWithType.vb: Tuple(Of Byte, Byte, Byte)
  fullName.vb: System.Tuple(Of System.Byte, System.Byte, System.Byte)
  name.vb: Tuple(Of Byte, Byte, Byte)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`3
  commentId: T:System.Tuple`3
  isExternal: true
  name: Tuple<T1, T2, T3>
  nameWithType: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  nameWithType.vb: Tuple(Of T1, T2, T3)
  fullName.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.NetworkEstimation.RegionErrorTally.ComputeError*
  commentId: Overload:TMG.NetworkEstimation.RegionErrorTally.ComputeError
  isExternal: false
  name: ComputeError
  nameWithType: RegionErrorTally.ComputeError
  fullName: TMG.NetworkEstimation.RegionErrorTally.ComputeError
- uid: TMG.NetworkEstimation.IErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting[],TMG.Emme.TransitLine[],TMG.Emme.TransitLine[])
  commentId: M:TMG.NetworkEstimation.IErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting[],TMG.Emme.TransitLine[],TMG.Emme.TransitLine[])
  parent: TMG.NetworkEstimation.IErrorTally
  isExternal: false
  name: ComputeError(ParameterSetting[], TransitLine[], TransitLine[])
  nameWithType: IErrorTally.ComputeError(ParameterSetting[], TransitLine[], TransitLine[])
  fullName: TMG.NetworkEstimation.IErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting[], TMG.Emme.TransitLine[], TMG.Emme.TransitLine[])
  nameWithType.vb: IErrorTally.ComputeError(ParameterSetting(), TransitLine(), TransitLine())
  fullName.vb: TMG.NetworkEstimation.IErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting(), TMG.Emme.TransitLine(), TMG.Emme.TransitLine())
  name.vb: ComputeError(ParameterSetting(), TransitLine(), TransitLine())
  spec.csharp:
  - uid: TMG.NetworkEstimation.IErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting[],TMG.Emme.TransitLine[],TMG.Emme.TransitLine[])
    name: ComputeError
    nameWithType: IErrorTally.ComputeError
    fullName: TMG.NetworkEstimation.IErrorTally.ComputeError
  - name: (
    nameWithType: (
    fullName: (
  - uid: TMG.NetworkEstimation.ParameterSetting
    name: ParameterSetting
    nameWithType: ParameterSetting
    fullName: TMG.NetworkEstimation.ParameterSetting
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.Emme.TransitLine
    name: TransitLine
    nameWithType: TransitLine
    fullName: TMG.Emme.TransitLine
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.Emme.TransitLine
    name: TransitLine
    nameWithType: TransitLine
    fullName: TMG.Emme.TransitLine
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TMG.NetworkEstimation.IErrorTally.ComputeError(TMG.NetworkEstimation.ParameterSetting[],TMG.Emme.TransitLine[],TMG.Emme.TransitLine[])
    name: ComputeError
    nameWithType: IErrorTally.ComputeError
    fullName: TMG.NetworkEstimation.IErrorTally.ComputeError
  - name: (
    nameWithType: (
    fullName: (
  - uid: TMG.NetworkEstimation.ParameterSetting
    name: ParameterSetting
    nameWithType: ParameterSetting
    fullName: TMG.NetworkEstimation.ParameterSetting
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.Emme.TransitLine
    name: TransitLine
    nameWithType: TransitLine
    fullName: TMG.Emme.TransitLine
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TMG.Emme.TransitLine
    name: TransitLine
    nameWithType: TransitLine
    fullName: TMG.Emme.TransitLine
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TMG.NetworkEstimation.ParameterSetting[]
  name: ParameterSetting[]
  nameWithType: ParameterSetting[]
  fullName: TMG.NetworkEstimation.ParameterSetting[]
  nameWithType.vb: ParameterSetting()
  fullName.vb: TMG.NetworkEstimation.ParameterSetting()
  name.vb: ParameterSetting()
  spec.csharp:
  - uid: TMG.NetworkEstimation.ParameterSetting
    name: ParameterSetting
    nameWithType: ParameterSetting
    fullName: TMG.NetworkEstimation.ParameterSetting
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TMG.NetworkEstimation.ParameterSetting
    name: ParameterSetting
    nameWithType: ParameterSetting
    fullName: TMG.NetworkEstimation.ParameterSetting
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TMG.Emme.TransitLine[]
  name: TransitLine[]
  nameWithType: TransitLine[]
  fullName: TMG.Emme.TransitLine[]
  nameWithType.vb: TransitLine()
  fullName.vb: TMG.Emme.TransitLine()
  name.vb: TransitLine()
  spec.csharp:
  - uid: TMG.Emme.TransitLine
    name: TransitLine
    nameWithType: TransitLine
    fullName: TMG.Emme.TransitLine
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TMG.Emme.TransitLine
    name: TransitLine
    nameWithType: TransitLine
    fullName: TMG.Emme.TransitLine
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TMG.NetworkEstimation.RegionErrorTally.RuntimeValidation*
  commentId: Overload:TMG.NetworkEstimation.RegionErrorTally.RuntimeValidation
  isExternal: false
  name: RuntimeValidation
  nameWithType: RegionErrorTally.RuntimeValidation
  fullName: TMG.NetworkEstimation.RegionErrorTally.RuntimeValidation
- uid: XTMF.IModule.RuntimeValidation(System.String@)
  commentId: M:XTMF.IModule.RuntimeValidation(System.String@)
  parent: XTMF.IModule
  isExternal: true
  name: RuntimeValidation(String)
  nameWithType: IModule.RuntimeValidation(String)
  fullName: XTMF.IModule.RuntimeValidation(System.String)
  spec.csharp:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: XTMF.IModule.RuntimeValidation(System.String@)
    name: RuntimeValidation
    nameWithType: IModule.RuntimeValidation
    fullName: XTMF.IModule.RuntimeValidation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
